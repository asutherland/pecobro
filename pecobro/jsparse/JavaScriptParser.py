# $ANTLR 3.0.1 /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g 2008-04-30 22:13:00

from antlr3 import *
from antlr3.compat import set, frozenset

from antlr3.tree import *



# for convenience in actions
HIDDEN = BaseRecognizer.HIDDEN

# token types
LT=41
HexEscapeSequence=53
NEW=21
LineComment=70
REGEX=29
DecimalDigit=58
EOF=-1
PROP=27
HexDigit=59
RegularExpressionHacks=46
Identifier=45
SingleStringCharacter=51
CODE=12
XMLComment=43
IN=19
SCOPE=31
Comment=69
OBJ=26
SingleEscapeCharacter=55
RETURN=30
PROPREF=28
UnicodeLetter=65
ExponentPart=62
ARGS=5
EscapeCharacter=57
WhiteSpace=71
VARDEF=36
VARDEFS=37
IdentifierPart=64
ARRAY=6
INDEXREF=20
WITH=40
UnicodeCombiningMark=68
UnicodeDigit=66
NumericLiteral=44
RegularExpressionChars=47
UnicodeEscapeSequence=54
NULL=23
CONDLOOP=11
NUMBER=24
IdentifierStart=63
DoubleStringCharacter=50
VEXPR=39
DecimalLiteral=60
FUNCARGS=17
DESCREF=14
NSREF=25
TRUE=35
StringLiteral=42
RegularExpressionFirstChar=49
ARRAYCOMP=7
TESTVAL=34
HexIntegerLiteral=61
FUNC=16
NONE=22
NonEscapeCharacter=56
ASSIGN=8
VARREF=38
TEST=33
CALL=9
CharacterEscapeSequence=52
DEFAULTNS=13
GLOBAL=18
FALSE=15
COND=10
EscapeSequence=48
UnicodeConnectorPunctuation=67
ANONYMOUS=4
STRING=32

# token names
tokenNames = [
    "<invalid>", "<EOR>", "<DOWN>", "<UP>", 
    "ANONYMOUS", "ARGS", "ARRAY", "ARRAYCOMP", "ASSIGN", "CALL", "COND", 
    "CONDLOOP", "CODE", "DEFAULTNS", "DESCREF", "FALSE", "FUNC", "FUNCARGS", 
    "GLOBAL", "IN", "INDEXREF", "NEW", "NONE", "NULL", "NUMBER", "NSREF", 
    "OBJ", "PROP", "PROPREF", "REGEX", "RETURN", "SCOPE", "STRING", "TEST", 
    "TESTVAL", "TRUE", "VARDEF", "VARDEFS", "VARREF", "VEXPR", "WITH", "LT", 
    "StringLiteral", "XMLComment", "NumericLiteral", "Identifier", "RegularExpressionHacks", 
    "RegularExpressionChars", "EscapeSequence", "RegularExpressionFirstChar", 
    "DoubleStringCharacter", "SingleStringCharacter", "CharacterEscapeSequence", 
    "HexEscapeSequence", "UnicodeEscapeSequence", "SingleEscapeCharacter", 
    "NonEscapeCharacter", "EscapeCharacter", "DecimalDigit", "HexDigit", 
    "DecimalLiteral", "HexIntegerLiteral", "ExponentPart", "IdentifierStart", 
    "IdentifierPart", "UnicodeLetter", "UnicodeDigit", "UnicodeConnectorPunctuation", 
    "UnicodeCombiningMark", "Comment", "LineComment", "WhiteSpace", "'<'", 
    "'>'", "'/'", "':'", "'-'", "'='", "'{'", "'}'", "'function'", "'('", 
    "','", "')'", "'default'", "'xml'", "'namespace'", "';'", "'return'", 
    "'var'", "'const'", "'let'", "'['", "']'", "'if'", "'else'", "'do'", 
    "'while'", "'for'", "'each'", "'in'", "'continue'", "'break'", "'with'", 
    "'switch'", "'case'", "'throw'", "'try'", "'catch'", "'finally'", "'new'", 
    "'.'", "'*'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", 
    "'>>>='", "'&='", "'^='", "'|='", "'?'", "'||'", "'&&'", "'|'", "'^'", 
    "'&'", "'=='", "'!='", "'==='", "'!=='", "'<='", "'>='", "'instanceof'", 
    "'<<'", "'>>'", "'>>>'", "'+'", "'%'", "'delete'", "'void'", "'typeof'", 
    "'++'", "'--'", "'~'", "'!'", "'this'", "'get'", "'set'", "'null'", 
    "'true'", "'false'", "'#'"
]



class JavaScriptParser(Parser):
    grammarFileName = "/home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g"
    tokenNames = tokenNames

    def __init__(self, input):
        Parser.__init__(self, input)
        self.ruleMemo = {}
        self.dfa4 = self.DFA4(
            self, 4,
            eot = self.DFA4_eot,
            eof = self.DFA4_eof,
            min = self.DFA4_min,
            max = self.DFA4_max,
            accept = self.DFA4_accept,
            special = self.DFA4_special,
            transition = self.DFA4_transition
            )
        self.dfa6 = self.DFA6(
            self, 6,
            eot = self.DFA6_eot,
            eof = self.DFA6_eof,
            min = self.DFA6_min,
            max = self.DFA6_max,
            accept = self.DFA6_accept,
            special = self.DFA6_special,
            transition = self.DFA6_transition
            )
        self.dfa9 = self.DFA9(
            self, 9,
            eot = self.DFA9_eot,
            eof = self.DFA9_eof,
            min = self.DFA9_min,
            max = self.DFA9_max,
            accept = self.DFA9_accept,
            special = self.DFA9_special,
            transition = self.DFA9_transition
            )
        self.dfa14 = self.DFA14(
            self, 14,
            eot = self.DFA14_eot,
            eof = self.DFA14_eof,
            min = self.DFA14_min,
            max = self.DFA14_max,
            accept = self.DFA14_accept,
            special = self.DFA14_special,
            transition = self.DFA14_transition
            )
        self.dfa32 = self.DFA32(
            self, 32,
            eot = self.DFA32_eot,
            eof = self.DFA32_eof,
            min = self.DFA32_min,
            max = self.DFA32_max,
            accept = self.DFA32_accept,
            special = self.DFA32_special,
            transition = self.DFA32_transition
            )
        self.dfa31 = self.DFA31(
            self, 31,
            eot = self.DFA31_eot,
            eof = self.DFA31_eof,
            min = self.DFA31_min,
            max = self.DFA31_max,
            accept = self.DFA31_accept,
            special = self.DFA31_special,
            transition = self.DFA31_transition
            )
        self.dfa39 = self.DFA39(
            self, 39,
            eot = self.DFA39_eot,
            eof = self.DFA39_eof,
            min = self.DFA39_min,
            max = self.DFA39_max,
            accept = self.DFA39_accept,
            special = self.DFA39_special,
            transition = self.DFA39_transition
            )
        self.dfa50 = self.DFA50(
            self, 50,
            eot = self.DFA50_eot,
            eof = self.DFA50_eof,
            min = self.DFA50_min,
            max = self.DFA50_max,
            accept = self.DFA50_accept,
            special = self.DFA50_special,
            transition = self.DFA50_transition
            )
        self.dfa53 = self.DFA53(
            self, 53,
            eot = self.DFA53_eot,
            eof = self.DFA53_eof,
            min = self.DFA53_min,
            max = self.DFA53_max,
            accept = self.DFA53_accept,
            special = self.DFA53_special,
            transition = self.DFA53_transition
            )
        self.dfa55 = self.DFA55(
            self, 55,
            eot = self.DFA55_eot,
            eof = self.DFA55_eof,
            min = self.DFA55_min,
            max = self.DFA55_max,
            accept = self.DFA55_accept,
            special = self.DFA55_special,
            transition = self.DFA55_transition
            )
        self.dfa61 = self.DFA61(
            self, 61,
            eot = self.DFA61_eot,
            eof = self.DFA61_eof,
            min = self.DFA61_min,
            max = self.DFA61_max,
            accept = self.DFA61_accept,
            special = self.DFA61_special,
            transition = self.DFA61_transition
            )
        self.dfa60 = self.DFA60(
            self, 60,
            eot = self.DFA60_eot,
            eof = self.DFA60_eof,
            min = self.DFA60_min,
            max = self.DFA60_max,
            accept = self.DFA60_accept,
            special = self.DFA60_special,
            transition = self.DFA60_transition
            )
        self.dfa66 = self.DFA66(
            self, 66,
            eot = self.DFA66_eot,
            eof = self.DFA66_eof,
            min = self.DFA66_min,
            max = self.DFA66_max,
            accept = self.DFA66_accept,
            special = self.DFA66_special,
            transition = self.DFA66_transition
            )
        self.dfa69 = self.DFA69(
            self, 69,
            eot = self.DFA69_eot,
            eof = self.DFA69_eof,
            min = self.DFA69_min,
            max = self.DFA69_max,
            accept = self.DFA69_accept,
            special = self.DFA69_special,
            transition = self.DFA69_transition
            )
        self.dfa75 = self.DFA75(
            self, 75,
            eot = self.DFA75_eot,
            eof = self.DFA75_eof,
            min = self.DFA75_min,
            max = self.DFA75_max,
            accept = self.DFA75_accept,
            special = self.DFA75_special,
            transition = self.DFA75_transition
            )
        self.dfa74 = self.DFA74(
            self, 74,
            eot = self.DFA74_eot,
            eof = self.DFA74_eof,
            min = self.DFA74_min,
            max = self.DFA74_max,
            accept = self.DFA74_accept,
            special = self.DFA74_special,
            transition = self.DFA74_transition
            )
        self.dfa80 = self.DFA80(
            self, 80,
            eot = self.DFA80_eot,
            eof = self.DFA80_eof,
            min = self.DFA80_min,
            max = self.DFA80_max,
            accept = self.DFA80_accept,
            special = self.DFA80_special,
            transition = self.DFA80_transition
            )
        self.dfa102 = self.DFA102(
            self, 102,
            eot = self.DFA102_eot,
            eof = self.DFA102_eof,
            min = self.DFA102_min,
            max = self.DFA102_max,
            accept = self.DFA102_accept,
            special = self.DFA102_special,
            transition = self.DFA102_transition
            )
        self.dfa105 = self.DFA105(
            self, 105,
            eot = self.DFA105_eot,
            eof = self.DFA105_eof,
            min = self.DFA105_min,
            max = self.DFA105_max,
            accept = self.DFA105_accept,
            special = self.DFA105_special,
            transition = self.DFA105_transition
            )
        self.dfa108 = self.DFA108(
            self, 108,
            eot = self.DFA108_eot,
            eof = self.DFA108_eof,
            min = self.DFA108_min,
            max = self.DFA108_max,
            accept = self.DFA108_accept,
            special = self.DFA108_special,
            transition = self.DFA108_transition
            )
        self.dfa113 = self.DFA113(
            self, 113,
            eot = self.DFA113_eot,
            eof = self.DFA113_eof,
            min = self.DFA113_min,
            max = self.DFA113_max,
            accept = self.DFA113_accept,
            special = self.DFA113_special,
            transition = self.DFA113_transition
            )
        self.dfa144 = self.DFA144(
            self, 144,
            eot = self.DFA144_eot,
            eof = self.DFA144_eof,
            min = self.DFA144_min,
            max = self.DFA144_max,
            accept = self.DFA144_accept,
            special = self.DFA144_special,
            transition = self.DFA144_transition
            )
        self.dfa148 = self.DFA148(
            self, 148,
            eot = self.DFA148_eot,
            eof = self.DFA148_eof,
            min = self.DFA148_min,
            max = self.DFA148_max,
            accept = self.DFA148_accept,
            special = self.DFA148_special,
            transition = self.DFA148_transition
            )
        self.dfa147 = self.DFA147(
            self, 147,
            eot = self.DFA147_eot,
            eof = self.DFA147_eof,
            min = self.DFA147_min,
            max = self.DFA147_max,
            accept = self.DFA147_accept,
            special = self.DFA147_special,
            transition = self.DFA147_transition
            )
        self.dfa156 = self.DFA156(
            self, 156,
            eot = self.DFA156_eot,
            eof = self.DFA156_eof,
            min = self.DFA156_min,
            max = self.DFA156_max,
            accept = self.DFA156_accept,
            special = self.DFA156_special,
            transition = self.DFA156_transition
            )
        self.dfa160 = self.DFA160(
            self, 160,
            eot = self.DFA160_eot,
            eof = self.DFA160_eof,
            min = self.DFA160_min,
            max = self.DFA160_max,
            accept = self.DFA160_accept,
            special = self.DFA160_special,
            transition = self.DFA160_transition
            )
        self.dfa169 = self.DFA169(
            self, 169,
            eot = self.DFA169_eot,
            eof = self.DFA169_eof,
            min = self.DFA169_min,
            max = self.DFA169_max,
            accept = self.DFA169_accept,
            special = self.DFA169_special,
            transition = self.DFA169_transition
            )
        self.dfa172 = self.DFA172(
            self, 172,
            eot = self.DFA172_eot,
            eof = self.DFA172_eof,
            min = self.DFA172_min,
            max = self.DFA172_max,
            accept = self.DFA172_accept,
            special = self.DFA172_special,
            transition = self.DFA172_transition
            )
        self.dfa211 = self.DFA211(
            self, 211,
            eot = self.DFA211_eot,
            eof = self.DFA211_eof,
            min = self.DFA211_min,
            max = self.DFA211_max,
            accept = self.DFA211_accept,
            special = self.DFA211_special,
            transition = self.DFA211_transition
            )
        self.dfa229 = self.DFA229(
            self, 229,
            eot = self.DFA229_eot,
            eof = self.DFA229_eof,
            min = self.DFA229_min,
            max = self.DFA229_max,
            accept = self.DFA229_accept,
            special = self.DFA229_special,
            transition = self.DFA229_transition
            )
        self.dfa235 = self.DFA235(
            self, 235,
            eot = self.DFA235_eot,
            eof = self.DFA235_eof,
            min = self.DFA235_min,
            max = self.DFA235_max,
            accept = self.DFA235_accept,
            special = self.DFA235_special,
            transition = self.DFA235_transition
            )
        self.dfa241 = self.DFA241(
            self, 241,
            eot = self.DFA241_eot,
            eof = self.DFA241_eof,
            min = self.DFA241_min,
            max = self.DFA241_max,
            accept = self.DFA241_accept,
            special = self.DFA241_special,
            transition = self.DFA241_transition
            )
        self.dfa247 = self.DFA247(
            self, 247,
            eot = self.DFA247_eot,
            eof = self.DFA247_eof,
            min = self.DFA247_min,
            max = self.DFA247_max,
            accept = self.DFA247_accept,
            special = self.DFA247_special,
            transition = self.DFA247_transition
            )
        self.dfa253 = self.DFA253(
            self, 253,
            eot = self.DFA253_eot,
            eof = self.DFA253_eof,
            min = self.DFA253_min,
            max = self.DFA253_max,
            accept = self.DFA253_accept,
            special = self.DFA253_special,
            transition = self.DFA253_transition
            )
        self.dfa259 = self.DFA259(
            self, 259,
            eot = self.DFA259_eot,
            eof = self.DFA259_eof,
            min = self.DFA259_min,
            max = self.DFA259_max,
            accept = self.DFA259_accept,
            special = self.DFA259_special,
            transition = self.DFA259_transition
            )
        self.dfa265 = self.DFA265(
            self, 265,
            eot = self.DFA265_eot,
            eof = self.DFA265_eof,
            min = self.DFA265_min,
            max = self.DFA265_max,
            accept = self.DFA265_accept,
            special = self.DFA265_special,
            transition = self.DFA265_transition
            )
        self.dfa271 = self.DFA271(
            self, 271,
            eot = self.DFA271_eot,
            eof = self.DFA271_eof,
            min = self.DFA271_min,
            max = self.DFA271_max,
            accept = self.DFA271_accept,
            special = self.DFA271_special,
            transition = self.DFA271_transition
            )
        self.dfa287 = self.DFA287(
            self, 287,
            eot = self.DFA287_eot,
            eof = self.DFA287_eof,
            min = self.DFA287_min,
            max = self.DFA287_max,
            accept = self.DFA287_accept,
            special = self.DFA287_special,
            transition = self.DFA287_transition
            )
        self.dfa291 = self.DFA291(
            self, 291,
            eot = self.DFA291_eot,
            eof = self.DFA291_eof,
            min = self.DFA291_min,
            max = self.DFA291_max,
            accept = self.DFA291_accept,
            special = self.DFA291_special,
            transition = self.DFA291_transition
            )
        self.dfa290 = self.DFA290(
            self, 290,
            eot = self.DFA290_eot,
            eof = self.DFA290_eof,
            min = self.DFA290_min,
            max = self.DFA290_max,
            accept = self.DFA290_accept,
            special = self.DFA290_special,
            transition = self.DFA290_transition
            )
        self.dfa310 = self.DFA310(
            self, 310,
            eot = self.DFA310_eot,
            eof = self.DFA310_eof,
            min = self.DFA310_min,
            max = self.DFA310_max,
            accept = self.DFA310_accept,
            special = self.DFA310_special,
            transition = self.DFA310_transition
            )
        self.dfa324 = self.DFA324(
            self, 324,
            eot = self.DFA324_eot,
            eof = self.DFA324_eof,
            min = self.DFA324_min,
            max = self.DFA324_max,
            accept = self.DFA324_accept,
            special = self.DFA324_special,
            transition = self.DFA324_transition
            )
        self.dfa352 = self.DFA352(
            self, 352,
            eot = self.DFA352_eot,
            eof = self.DFA352_eof,
            min = self.DFA352_min,
            max = self.DFA352_max,
            accept = self.DFA352_accept,
            special = self.DFA352_special,
            transition = self.DFA352_transition
            )
        self.dfa468 = self.DFA468(
            self, 468,
            eot = self.DFA468_eot,
            eof = self.DFA468_eof,
            min = self.DFA468_min,
            max = self.DFA468_max,
            accept = self.DFA468_accept,
            special = self.DFA468_special,
            transition = self.DFA468_transition
            )
        self.dfa472 = self.DFA472(
            self, 472,
            eot = self.DFA472_eot,
            eof = self.DFA472_eof,
            min = self.DFA472_min,
            max = self.DFA472_max,
            accept = self.DFA472_accept,
            special = self.DFA472_special,
            transition = self.DFA472_transition
            )
        self.dfa471 = self.DFA471(
            self, 471,
            eot = self.DFA471_eot,
            eof = self.DFA471_eof,
            min = self.DFA471_min,
            max = self.DFA471_max,
            accept = self.DFA471_accept,
            special = self.DFA471_special,
            transition = self.DFA471_transition
            )




                
        self.adaptor = CommonTreeAdaptor()




    class program_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start program
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:56:1: program : ( LT )* sourceElements ( LT )* EOF -> ^( SCOPE GLOBAL NONE sourceElements ) ;
    def program(self, ):

        retval = self.program_return()
        retval.start = self.input.LT(1)
        program_StartIndex = self.input.index()
        root_0 = None

        LT1 = None
        LT3 = None
        EOF4 = None
        sourceElements2 = None


        LT1_tree = None
        LT3_tree = None
        EOF4_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_EOF = RewriteRuleTokenStream(self.adaptor, "token EOF")
        stream_sourceElements = RewriteRuleSubtreeStream(self.adaptor, "rule sourceElements")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 1):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:57:2: ( ( LT )* sourceElements ( LT )* EOF -> ^( SCOPE GLOBAL NONE sourceElements ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:57:4: ( LT )* sourceElements ( LT )* EOF
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:57:4: ( LT )*
                while True: #loop1
                    alt1 = 2
                    LA1_0 = self.input.LA(1)

                    if (LA1_0 == LT) :
                        LA1_2 = self.input.LA(2)

                        if (self.synpred1()) :
                            alt1 = 1




                    if alt1 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT1 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_program196)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT1)


                    else:
                        break #loop1


                self.following.append(self.FOLLOW_sourceElements_in_program199)
                sourceElements2 = self.sourceElements()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_sourceElements.add(sourceElements2.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:57:23: ( LT )*
                while True: #loop2
                    alt2 = 2
                    LA2_0 = self.input.LA(1)

                    if (LA2_0 == LT) :
                        alt2 = 1


                    if alt2 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT3 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_program201)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT3)


                    else:
                        break #loop2


                EOF4 = self.input.LT(1)
                self.match(self.input, EOF, self.FOLLOW_EOF_in_program204)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_EOF.add(EOF4)
                # AST Rewrite
                # elements: sourceElements
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 58:3: -> ^( SCOPE GLOBAL NONE sourceElements )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:58:6: ^( SCOPE GLOBAL NONE sourceElements )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(GLOBAL, "GLOBAL"))
                    self.adaptor.addChild(root_1, self.adaptor.createFromType(NONE, "NONE"))
                    self.adaptor.addChild(root_1, stream_sourceElements.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 1, program_StartIndex)

            pass

        return retval

    # $ANTLR end program

    class sourceElements_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start sourceElements
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:61:1: sourceElements : sourceElement ( ( LT )* sourceElement )* ;
    def sourceElements(self, ):

        retval = self.sourceElements_return()
        retval.start = self.input.LT(1)
        sourceElements_StartIndex = self.input.index()
        root_0 = None

        LT6 = None
        sourceElement5 = None

        sourceElement7 = None


        LT6_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 2):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:62:2: ( sourceElement ( ( LT )* sourceElement )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:62:4: sourceElement ( ( LT )* sourceElement )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_sourceElement_in_sourceElements230)
                sourceElement5 = self.sourceElement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, sourceElement5.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:62:18: ( ( LT )* sourceElement )*
                while True: #loop4
                    alt4 = 2
                    alt4 = self.dfa4.predict(self.input)
                    if alt4 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:62:19: ( LT )* sourceElement
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:62:21: ( LT )*
                        while True: #loop3
                            alt3 = 2
                            LA3_0 = self.input.LA(1)

                            if (LA3_0 == LT) :
                                LA3_2 = self.input.LA(2)

                                if (self.synpred3()) :
                                    alt3 = 1




                            if alt3 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT6 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_sourceElements233)
                                if self.failed:
                                    return retval


                            else:
                                break #loop3


                        self.following.append(self.FOLLOW_sourceElement_in_sourceElements237)
                        sourceElement7 = self.sourceElement()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, sourceElement7.tree)


                    else:
                        break #loop4





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 2, sourceElements_StartIndex)

            pass

        return retval

    # $ANTLR end sourceElements

    class sourceElement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start sourceElement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:65:1: sourceElement : statement ;
    def sourceElement(self, ):

        retval = self.sourceElement_return()
        retval.start = self.input.LT(1)
        sourceElement_StartIndex = self.input.index()
        root_0 = None

        statement8 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 3):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:66:2: ( statement )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:66:4: statement
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_statement_in_sourceElement251)
                statement8 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statement8.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 3, sourceElement_StartIndex)

            pass

        return retval

    # $ANTLR end sourceElement

    class xmlStartTag_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlStartTag
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:1: xmlStartTag options {backtrack=false; } : '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '>' ;
    def xmlStartTag(self, ):

        retval = self.xmlStartTag_return()
        retval.start = self.input.LT(1)
        xmlStartTag_StartIndex = self.input.index()
        root_0 = None

        char_literal9 = None
        LT11 = None
        LT13 = None
        char_literal14 = None
        xmlTagName10 = None

        xmlAttribute12 = None


        char_literal9_tree = None
        LT11_tree = None
        LT13_tree = None
        char_literal14_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 4):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:71:2: ( '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '>' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:71:4: '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '>'
                root_0 = self.adaptor.nil()

                char_literal9 = self.input.LT(1)
                self.match(self.input, 72, self.FOLLOW_72_in_xmlStartTag269)
                if self.failed:
                    return retval

                char_literal9_tree = self.adaptor.createWithPayload(char_literal9)
                self.adaptor.addChild(root_0, char_literal9_tree)

                self.following.append(self.FOLLOW_xmlTagName_in_xmlStartTag271)
                xmlTagName10 = self.xmlTagName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlTagName10.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:71:19: ( ( LT )* xmlAttribute )*
                while True: #loop6
                    alt6 = 2
                    alt6 = self.dfa6.predict(self.input)
                    if alt6 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:71:20: ( LT )* xmlAttribute
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:71:22: ( LT )*
                        while True: #loop5
                            alt5 = 2
                            LA5_0 = self.input.LA(1)

                            if (LA5_0 == LT) :
                                alt5 = 1


                            if alt5 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT11 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_xmlStartTag274)
                                if self.failed:
                                    return retval


                            else:
                                break #loop5


                        self.following.append(self.FOLLOW_xmlAttribute_in_xmlStartTag278)
                        xmlAttribute12 = self.xmlAttribute()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, xmlAttribute12.tree)


                    else:
                        break #loop6


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:71:42: ( LT )*
                while True: #loop7
                    alt7 = 2
                    LA7_0 = self.input.LA(1)

                    if (LA7_0 == LT) :
                        alt7 = 1


                    if alt7 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT13 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_xmlStartTag282)
                        if self.failed:
                            return retval


                    else:
                        break #loop7


                char_literal14 = self.input.LT(1)
                self.match(self.input, 73, self.FOLLOW_73_in_xmlStartTag286)
                if self.failed:
                    return retval

                char_literal14_tree = self.adaptor.createWithPayload(char_literal14)
                self.adaptor.addChild(root_0, char_literal14_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 4, xmlStartTag_StartIndex)

            pass

        return retval

    # $ANTLR end xmlStartTag

    class xmlEndTag_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlEndTag
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:74:1: xmlEndTag options {backtrack=false; } : '<' '/' xmlTagName '>' ;
    def xmlEndTag(self, ):

        retval = self.xmlEndTag_return()
        retval.start = self.input.LT(1)
        xmlEndTag_StartIndex = self.input.index()
        root_0 = None

        char_literal15 = None
        char_literal16 = None
        char_literal18 = None
        xmlTagName17 = None


        char_literal15_tree = None
        char_literal16_tree = None
        char_literal18_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 5):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:76:2: ( '<' '/' xmlTagName '>' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:76:4: '<' '/' xmlTagName '>'
                root_0 = self.adaptor.nil()

                char_literal15 = self.input.LT(1)
                self.match(self.input, 72, self.FOLLOW_72_in_xmlEndTag304)
                if self.failed:
                    return retval

                char_literal15_tree = self.adaptor.createWithPayload(char_literal15)
                self.adaptor.addChild(root_0, char_literal15_tree)

                char_literal16 = self.input.LT(1)
                self.match(self.input, 74, self.FOLLOW_74_in_xmlEndTag306)
                if self.failed:
                    return retval

                char_literal16_tree = self.adaptor.createWithPayload(char_literal16)
                self.adaptor.addChild(root_0, char_literal16_tree)

                self.following.append(self.FOLLOW_xmlTagName_in_xmlEndTag308)
                xmlTagName17 = self.xmlTagName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlTagName17.tree)
                char_literal18 = self.input.LT(1)
                self.match(self.input, 73, self.FOLLOW_73_in_xmlEndTag310)
                if self.failed:
                    return retval

                char_literal18_tree = self.adaptor.createWithPayload(char_literal18)
                self.adaptor.addChild(root_0, char_literal18_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 5, xmlEndTag_StartIndex)

            pass

        return retval

    # $ANTLR end xmlEndTag

    class xmlEmptyTag_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlEmptyTag
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:79:1: xmlEmptyTag options {backtrack=false; } : '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '/' '>' ;
    def xmlEmptyTag(self, ):

        retval = self.xmlEmptyTag_return()
        retval.start = self.input.LT(1)
        xmlEmptyTag_StartIndex = self.input.index()
        root_0 = None

        char_literal19 = None
        LT21 = None
        LT23 = None
        char_literal24 = None
        char_literal25 = None
        xmlTagName20 = None

        xmlAttribute22 = None


        char_literal19_tree = None
        LT21_tree = None
        LT23_tree = None
        char_literal24_tree = None
        char_literal25_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 6):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:81:2: ( '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '/' '>' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:81:4: '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '/' '>'
                root_0 = self.adaptor.nil()

                char_literal19 = self.input.LT(1)
                self.match(self.input, 72, self.FOLLOW_72_in_xmlEmptyTag328)
                if self.failed:
                    return retval

                char_literal19_tree = self.adaptor.createWithPayload(char_literal19)
                self.adaptor.addChild(root_0, char_literal19_tree)

                self.following.append(self.FOLLOW_xmlTagName_in_xmlEmptyTag330)
                xmlTagName20 = self.xmlTagName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlTagName20.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:81:19: ( ( LT )* xmlAttribute )*
                while True: #loop9
                    alt9 = 2
                    alt9 = self.dfa9.predict(self.input)
                    if alt9 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:81:20: ( LT )* xmlAttribute
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:81:22: ( LT )*
                        while True: #loop8
                            alt8 = 2
                            LA8_0 = self.input.LA(1)

                            if (LA8_0 == LT) :
                                alt8 = 1


                            if alt8 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT21 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_xmlEmptyTag333)
                                if self.failed:
                                    return retval


                            else:
                                break #loop8


                        self.following.append(self.FOLLOW_xmlAttribute_in_xmlEmptyTag337)
                        xmlAttribute22 = self.xmlAttribute()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, xmlAttribute22.tree)


                    else:
                        break #loop9


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:81:42: ( LT )*
                while True: #loop10
                    alt10 = 2
                    LA10_0 = self.input.LA(1)

                    if (LA10_0 == LT) :
                        alt10 = 1


                    if alt10 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT23 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_xmlEmptyTag341)
                        if self.failed:
                            return retval


                    else:
                        break #loop10


                char_literal24 = self.input.LT(1)
                self.match(self.input, 74, self.FOLLOW_74_in_xmlEmptyTag345)
                if self.failed:
                    return retval

                char_literal24_tree = self.adaptor.createWithPayload(char_literal24)
                self.adaptor.addChild(root_0, char_literal24_tree)

                char_literal25 = self.input.LT(1)
                self.match(self.input, 73, self.FOLLOW_73_in_xmlEmptyTag347)
                if self.failed:
                    return retval

                char_literal25_tree = self.adaptor.createWithPayload(char_literal25)
                self.adaptor.addChild(root_0, char_literal25_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 6, xmlEmptyTag_StartIndex)

            pass

        return retval

    # $ANTLR end xmlEmptyTag

    class xmlTagName_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlTagName
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:84:1: xmlTagName options {backtrack=false; } : identifier ( ( ':' | '-' ) identifier )* ;
    def xmlTagName(self, ):

        retval = self.xmlTagName_return()
        retval.start = self.input.LT(1)
        xmlTagName_StartIndex = self.input.index()
        root_0 = None

        set27 = None
        identifier26 = None

        identifier28 = None


        set27_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 7):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:86:2: ( identifier ( ( ':' | '-' ) identifier )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:86:4: identifier ( ( ':' | '-' ) identifier )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_identifier_in_xmlTagName365)
                identifier26 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, identifier26.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:86:15: ( ( ':' | '-' ) identifier )*
                while True: #loop11
                    alt11 = 2
                    LA11_0 = self.input.LA(1)

                    if ((75 <= LA11_0 <= 76)) :
                        alt11 = 1


                    if alt11 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:86:17: ( ':' | '-' ) identifier
                        set27 = self.input.LT(1)
                        if (75 <= self.input.LA(1) <= 76):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set27))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_xmlTagName369
                                )
                            raise mse


                        self.following.append(self.FOLLOW_identifier_in_xmlTagName375)
                        identifier28 = self.identifier()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, identifier28.tree)


                    else:
                        break #loop11





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 7, xmlTagName_StartIndex)

            pass

        return retval

    # $ANTLR end xmlTagName

    class xmlAttribute_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlAttribute
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:89:1: xmlAttribute options {backtrack=false; } : xmlAttributeName '=' xmlAttributeValue ;
    def xmlAttribute(self, ):

        retval = self.xmlAttribute_return()
        retval.start = self.input.LT(1)
        xmlAttribute_StartIndex = self.input.index()
        root_0 = None

        char_literal30 = None
        xmlAttributeName29 = None

        xmlAttributeValue31 = None


        char_literal30_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 8):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:91:2: ( xmlAttributeName '=' xmlAttributeValue )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:91:4: xmlAttributeName '=' xmlAttributeValue
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_xmlAttributeName_in_xmlAttribute395)
                xmlAttributeName29 = self.xmlAttributeName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlAttributeName29.tree)
                char_literal30 = self.input.LT(1)
                self.match(self.input, 77, self.FOLLOW_77_in_xmlAttribute397)
                if self.failed:
                    return retval

                char_literal30_tree = self.adaptor.createWithPayload(char_literal30)
                self.adaptor.addChild(root_0, char_literal30_tree)

                self.following.append(self.FOLLOW_xmlAttributeValue_in_xmlAttribute399)
                xmlAttributeValue31 = self.xmlAttributeValue()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlAttributeValue31.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 8, xmlAttribute_StartIndex)

            pass

        return retval

    # $ANTLR end xmlAttribute

    class xmlAttributeName_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlAttributeName
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:95:1: xmlAttributeName options {backtrack=false; } : identifier ( ( ':' | '-' ) identifier )* ;
    def xmlAttributeName(self, ):

        retval = self.xmlAttributeName_return()
        retval.start = self.input.LT(1)
        xmlAttributeName_StartIndex = self.input.index()
        root_0 = None

        set33 = None
        identifier32 = None

        identifier34 = None


        set33_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 9):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:97:2: ( identifier ( ( ':' | '-' ) identifier )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:97:4: identifier ( ( ':' | '-' ) identifier )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_identifier_in_xmlAttributeName418)
                identifier32 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, identifier32.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:97:15: ( ( ':' | '-' ) identifier )*
                while True: #loop12
                    alt12 = 2
                    LA12_0 = self.input.LA(1)

                    if ((75 <= LA12_0 <= 76)) :
                        alt12 = 1


                    if alt12 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:97:17: ( ':' | '-' ) identifier
                        set33 = self.input.LT(1)
                        if (75 <= self.input.LA(1) <= 76):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set33))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_xmlAttributeName422
                                )
                            raise mse


                        self.following.append(self.FOLLOW_identifier_in_xmlAttributeName428)
                        identifier34 = self.identifier()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, identifier34.tree)


                    else:
                        break #loop12





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 9, xmlAttributeName_StartIndex)

            pass

        return retval

    # $ANTLR end xmlAttributeName

    class xmlAttributeValue_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlAttributeValue
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:100:1: xmlAttributeValue options {backtrack=false; } : ( ( '{' )=> e4xSplice | StringLiteral );
    def xmlAttributeValue(self, ):

        retval = self.xmlAttributeValue_return()
        retval.start = self.input.LT(1)
        xmlAttributeValue_StartIndex = self.input.index()
        root_0 = None

        StringLiteral36 = None
        e4xSplice35 = None


        StringLiteral36_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 10):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:102:2: ( ( '{' )=> e4xSplice | StringLiteral )
                alt13 = 2
                LA13_0 = self.input.LA(1)

                if (LA13_0 == 78) and (self.synpred15()):
                    alt13 = 1
                elif (LA13_0 == StringLiteral) :
                    alt13 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("100:1: xmlAttributeValue options {backtrack=false; } : ( ( '{' )=> e4xSplice | StringLiteral );", 13, 0, self.input)

                    raise nvae

                if alt13 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:102:4: ( '{' )=> e4xSplice
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_e4xSplice_in_xmlAttributeValue453)
                    e4xSplice35 = self.e4xSplice()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, e4xSplice35.tree)


                elif alt13 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:103:4: StringLiteral
                    root_0 = self.adaptor.nil()

                    StringLiteral36 = self.input.LT(1)
                    self.match(self.input, StringLiteral, self.FOLLOW_StringLiteral_in_xmlAttributeValue458)
                    if self.failed:
                        return retval

                    StringLiteral36_tree = self.adaptor.createWithPayload(StringLiteral36)
                    self.adaptor.addChild(root_0, StringLiteral36_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 10, xmlAttributeValue_StartIndex)

            pass

        return retval

    # $ANTLR end xmlAttributeValue

    class e4xSplice_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start e4xSplice
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:106:1: e4xSplice options {backtrack=false; } : '{' expression '}' ;
    def e4xSplice(self, ):

        retval = self.e4xSplice_return()
        retval.start = self.input.LT(1)
        e4xSplice_StartIndex = self.input.index()
        root_0 = None

        char_literal37 = None
        char_literal39 = None
        expression38 = None


        char_literal37_tree = None
        char_literal39_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 11):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:108:2: ( '{' expression '}' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:108:4: '{' expression '}'
                root_0 = self.adaptor.nil()

                char_literal37 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_e4xSplice476)
                if self.failed:
                    return retval

                char_literal37_tree = self.adaptor.createWithPayload(char_literal37)
                self.adaptor.addChild(root_0, char_literal37_tree)

                self.following.append(self.FOLLOW_expression_in_e4xSplice478)
                expression38 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, expression38.tree)
                char_literal39 = self.input.LT(1)
                self.match(self.input, 79, self.FOLLOW_79_in_e4xSplice480)
                if self.failed:
                    return retval

                char_literal39_tree = self.adaptor.createWithPayload(char_literal39)
                self.adaptor.addChild(root_0, char_literal39_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 11, e4xSplice_StartIndex)

            pass

        return retval

    # $ANTLR end e4xSplice

    class xmlPayload_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlPayload
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:111:1: xmlPayload : ( xmlEndTag | xmlEmptyTag | xmlStartTag | e4xSplice | XMLComment );
    def xmlPayload(self, ):

        retval = self.xmlPayload_return()
        retval.start = self.input.LT(1)
        xmlPayload_StartIndex = self.input.index()
        root_0 = None

        XMLComment44 = None
        xmlEndTag40 = None

        xmlEmptyTag41 = None

        xmlStartTag42 = None

        e4xSplice43 = None


        XMLComment44_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 12):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:120:2: ( xmlEndTag | xmlEmptyTag | xmlStartTag | e4xSplice | XMLComment )
                alt14 = 5
                alt14 = self.dfa14.predict(self.input)
                if alt14 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:120:4: xmlEndTag
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlEndTag_in_xmlPayload494)
                    xmlEndTag40 = self.xmlEndTag()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlEndTag40.tree)


                elif alt14 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:121:4: xmlEmptyTag
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlEmptyTag_in_xmlPayload499)
                    xmlEmptyTag41 = self.xmlEmptyTag()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlEmptyTag41.tree)


                elif alt14 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:122:4: xmlStartTag
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlStartTag_in_xmlPayload504)
                    xmlStartTag42 = self.xmlStartTag()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlStartTag42.tree)


                elif alt14 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:123:4: e4xSplice
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_e4xSplice_in_xmlPayload509)
                    e4xSplice43 = self.e4xSplice()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, e4xSplice43.tree)


                elif alt14 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:124:4: XMLComment
                    root_0 = self.adaptor.nil()

                    XMLComment44 = self.input.LT(1)
                    self.match(self.input, XMLComment, self.FOLLOW_XMLComment_in_xmlPayload514)
                    if self.failed:
                        return retval

                    XMLComment44_tree = self.adaptor.createWithPayload(XMLComment44)
                    self.adaptor.addChild(root_0, XMLComment44_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 12, xmlPayload_StartIndex)

            pass

        return retval

    # $ANTLR end xmlPayload

    class xmlLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:127:1: xmlLiteral : ( ( LT )* xmlPayload )+ ;
    def xmlLiteral(self, ):

        retval = self.xmlLiteral_return()
        retval.start = self.input.LT(1)
        xmlLiteral_StartIndex = self.input.index()
        root_0 = None

        LT45 = None
        xmlPayload46 = None


        LT45_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 13):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:2: ( ( ( LT )* xmlPayload )+ )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:4: ( ( LT )* xmlPayload )+
                root_0 = self.adaptor.nil()

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:4: ( ( LT )* xmlPayload )+
                cnt16 = 0
                while True: #loop16
                    alt16 = 2
                    LA16 = self.input.LA(1)
                    if LA16 == LT:
                        LA16_1 = self.input.LA(2)

                        if (self.synpred21()) :
                            alt16 = 1


                    elif LA16 == 72:
                        LA16_11 = self.input.LA(2)

                        if (self.synpred21()) :
                            alt16 = 1


                    elif LA16 == XMLComment or LA16 == 78:
                        alt16 = 1

                    if alt16 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:5: ( LT )* xmlPayload
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:5: ( LT )*
                        while True: #loop15
                            alt15 = 2
                            LA15_0 = self.input.LA(1)

                            if (LA15_0 == LT) :
                                alt15 = 1


                            if alt15 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT45 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_xmlLiteral527)
                                if self.failed:
                                    return retval

                                LT45_tree = self.adaptor.createWithPayload(LT45)
                                self.adaptor.addChild(root_0, LT45_tree)



                            else:
                                break #loop15


                        self.following.append(self.FOLLOW_xmlPayload_in_xmlLiteral530)
                        xmlPayload46 = self.xmlPayload()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, xmlPayload46.tree)


                    else:
                        if cnt16 >= 1:
                            break #loop16

                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        eee = EarlyExitException(16, self.input)
                        raise eee

                    cnt16 += 1





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 13, xmlLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end xmlLiteral

    class functionExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start functionExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:133:1: functionExpression : ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) );
    def functionExpression(self, ):

        retval = self.functionExpression_return()
        retval.start = self.input.LT(1)
        functionExpression_StartIndex = self.input.index()
        root_0 = None

        func = None
        string_literal47 = None
        LT48 = None
        LT50 = None
        LT52 = None
        LT54 = None
        LT56 = None
        string_literal58 = None
        LT59 = None
        LT61 = None
        LT63 = None
        LT65 = None
        LT67 = None
        identifier49 = None

        formalParameterList51 = None

        statementBlock53 = None

        formalParameterList55 = None

        statementBlock57 = None

        identifier60 = None

        formalParameterList62 = None

        assignmentExpression64 = None

        formalParameterList66 = None

        assignmentExpression68 = None


        func_tree = None
        string_literal47_tree = None
        LT48_tree = None
        LT50_tree = None
        LT52_tree = None
        LT54_tree = None
        LT56_tree = None
        string_literal58_tree = None
        LT59_tree = None
        LT61_tree = None
        LT63_tree = None
        LT65_tree = None
        LT67_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_80 = RewriteRuleTokenStream(self.adaptor, "token 80")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        stream_statementBlock = RewriteRuleSubtreeStream(self.adaptor, "rule statementBlock")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        stream_formalParameterList = RewriteRuleSubtreeStream(self.adaptor, "rule formalParameterList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 14):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:2: ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) )
                alt27 = 4
                LA27_0 = self.input.LA(1)

                if (LA27_0 == 80) :
                    LA27_1 = self.input.LA(2)

                    if (self.synpred25()) :
                        alt27 = 1
                    elif (self.synpred28()) :
                        alt27 = 2
                    elif (self.synpred32()) :
                        alt27 = 3
                    elif (True) :
                        alt27 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("133:1: functionExpression : ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) );", 27, 1, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("133:1: functionExpression : ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) );", 27, 0, self.input)

                    raise nvae

                if alt27 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock
                    string_literal47 = self.input.LT(1)
                    self.match(self.input, 80, self.FOLLOW_80_in_functionExpression545)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_80.add(string_literal47)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:15: ( LT )*
                    while True: #loop17
                        alt17 = 2
                        LA17_0 = self.input.LA(1)

                        if (LA17_0 == LT) :
                            alt17 = 1


                        if alt17 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT48 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression547)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT48)


                        else:
                            break #loop17


                    self.following.append(self.FOLLOW_identifier_in_functionExpression550)
                    identifier49 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier49.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:30: ( LT )*
                    while True: #loop18
                        alt18 = 2
                        LA18_0 = self.input.LA(1)

                        if (LA18_0 == LT) :
                            alt18 = 1


                        if alt18 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT50 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression552)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT50)


                        else:
                            break #loop18


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression555)
                    formalParameterList51 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList51.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:54: ( LT )*
                    while True: #loop19
                        alt19 = 2
                        LA19_0 = self.input.LA(1)

                        if (LA19_0 == LT) :
                            alt19 = 1


                        if alt19 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT52 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression557)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT52)


                        else:
                            break #loop19


                    self.following.append(self.FOLLOW_statementBlock_in_functionExpression560)
                    statementBlock53 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock53.tree)
                    # AST Rewrite
                    # elements: formalParameterList, statementBlock, 89, identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 135:3: -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:135:6: ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:135:44: ^( SCOPE 'var' statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(89, "89"))
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt27 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:4: func= 'function' ( LT )* formalParameterList ( LT )* statementBlock
                    func = self.input.LT(1)
                    self.match(self.input, 80, self.FOLLOW_80_in_functionExpression587)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_80.add(func)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:20: ( LT )*
                    while True: #loop20
                        alt20 = 2
                        LA20_0 = self.input.LA(1)

                        if (LA20_0 == LT) :
                            alt20 = 1


                        if alt20 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT54 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression589)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT54)


                        else:
                            break #loop20


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression592)
                    formalParameterList55 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList55.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:44: ( LT )*
                    while True: #loop21
                        alt21 = 2
                        LA21_0 = self.input.LA(1)

                        if (LA21_0 == LT) :
                            alt21 = 1


                        if alt21 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT56 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression594)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT56)


                        else:
                            break #loop21


                    self.following.append(self.FOLLOW_statementBlock_in_functionExpression597)
                    statementBlock57 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock57.tree)
                    # AST Rewrite
                    # elements: formalParameterList, statementBlock, 89
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 137:3: -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:137:6: ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromToken(ANONYMOUS, func))
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:137:50: ^( SCOPE 'var' statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(89, "89"))
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt27 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression
                    string_literal58 = self.input.LT(1)
                    self.match(self.input, 80, self.FOLLOW_80_in_functionExpression623)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_80.add(string_literal58)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:15: ( LT )*
                    while True: #loop22
                        alt22 = 2
                        LA22_0 = self.input.LA(1)

                        if (LA22_0 == LT) :
                            alt22 = 1


                        if alt22 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT59 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression625)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT59)


                        else:
                            break #loop22


                    self.following.append(self.FOLLOW_identifier_in_functionExpression628)
                    identifier60 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier60.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:30: ( LT )*
                    while True: #loop23
                        alt23 = 2
                        LA23_0 = self.input.LA(1)

                        if (LA23_0 == LT) :
                            alt23 = 1


                        if alt23 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT61 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression630)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT61)


                        else:
                            break #loop23


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression633)
                    formalParameterList62 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList62.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:54: ( LT )*
                    while True: #loop24
                        alt24 = 2
                        LA24_0 = self.input.LA(1)

                        if (LA24_0 == LT) :
                            LA24_2 = self.input.LA(2)

                            if (self.synpred31()) :
                                alt24 = 1




                        if alt24 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT63 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression635)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT63)


                        else:
                            break #loop24


                    self.following.append(self.FOLLOW_assignmentExpression_in_functionExpression638)
                    assignmentExpression64 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression64.tree)
                    # AST Rewrite
                    # elements: 89, identifier, formalParameterList, assignmentExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 139:3: -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:139:6: ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:139:44: ^( SCOPE 'var' assignmentExpression )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(89, "89"))
                        self.adaptor.addChild(root_2, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt27 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:140:4: func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression
                    func = self.input.LT(1)
                    self.match(self.input, 80, self.FOLLOW_80_in_functionExpression665)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_80.add(func)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:140:20: ( LT )*
                    while True: #loop25
                        alt25 = 2
                        LA25_0 = self.input.LA(1)

                        if (LA25_0 == LT) :
                            alt25 = 1


                        if alt25 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT65 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression667)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT65)


                        else:
                            break #loop25


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression670)
                    formalParameterList66 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList66.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:140:44: ( LT )*
                    while True: #loop26
                        alt26 = 2
                        LA26_0 = self.input.LA(1)

                        if (LA26_0 == LT) :
                            LA26_2 = self.input.LA(2)

                            if (self.synpred34()) :
                                alt26 = 1




                        if alt26 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT67 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression672)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT67)


                        else:
                            break #loop26


                    self.following.append(self.FOLLOW_assignmentExpression_in_functionExpression675)
                    assignmentExpression68 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression68.tree)
                    # AST Rewrite
                    # elements: 89, formalParameterList, assignmentExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 141:3: -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:6: ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromToken(ANONYMOUS, func))
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:50: ^( SCOPE 'var' assignmentExpression )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(89, "89"))
                        self.adaptor.addChild(root_2, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 14, functionExpression_StartIndex)

            pass

        return retval

    # $ANTLR end functionExpression

    class formalParameterList_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start formalParameterList
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:144:1: formalParameterList : '(' ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )? ( LT )* ')' -> ^( FUNCARGS ( identifier )* ) ;
    def formalParameterList(self, ):

        retval = self.formalParameterList_return()
        retval.start = self.input.LT(1)
        formalParameterList_StartIndex = self.input.index()
        root_0 = None

        char_literal69 = None
        LT70 = None
        LT72 = None
        char_literal73 = None
        LT74 = None
        LT76 = None
        char_literal77 = None
        identifier71 = None

        identifier75 = None


        char_literal69_tree = None
        LT70_tree = None
        LT72_tree = None
        char_literal73_tree = None
        LT74_tree = None
        LT76_tree = None
        char_literal77_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 15):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:2: ( '(' ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )? ( LT )* ')' -> ^( FUNCARGS ( identifier )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:4: '(' ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )? ( LT )* ')'
                char_literal69 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_formalParameterList708)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal69)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:8: ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )?
                alt32 = 2
                alt32 = self.dfa32.predict(self.input)
                if alt32 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:9: ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )*
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:9: ( LT )*
                    while True: #loop28
                        alt28 = 2
                        LA28_0 = self.input.LA(1)

                        if (LA28_0 == LT) :
                            alt28 = 1


                        if alt28 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT70 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList711)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT70)


                        else:
                            break #loop28


                    self.following.append(self.FOLLOW_identifier_in_formalParameterList714)
                    identifier71 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier71.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:24: ( ( LT )* ',' ( LT )* identifier )*
                    while True: #loop31
                        alt31 = 2
                        alt31 = self.dfa31.predict(self.input)
                        if alt31 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:25: ( LT )* ',' ( LT )* identifier
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:25: ( LT )*
                            while True: #loop29
                                alt29 = 2
                                LA29_0 = self.input.LA(1)

                                if (LA29_0 == LT) :
                                    alt29 = 1


                                if alt29 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT72 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList717)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT72)


                                else:
                                    break #loop29


                            char_literal73 = self.input.LT(1)
                            self.match(self.input, 82, self.FOLLOW_82_in_formalParameterList720)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_82.add(char_literal73)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:33: ( LT )*
                            while True: #loop30
                                alt30 = 2
                                LA30_0 = self.input.LA(1)

                                if (LA30_0 == LT) :
                                    alt30 = 1


                                if alt30 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT74 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList722)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT74)


                                else:
                                    break #loop30


                            self.following.append(self.FOLLOW_identifier_in_formalParameterList725)
                            identifier75 = self.identifier()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_identifier.add(identifier75.tree)


                        else:
                            break #loop31





                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:52: ( LT )*
                while True: #loop33
                    alt33 = 2
                    LA33_0 = self.input.LA(1)

                    if (LA33_0 == LT) :
                        alt33 = 1


                    if alt33 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT76 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList731)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT76)


                    else:
                        break #loop33


                char_literal77 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_formalParameterList734)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal77)
                # AST Rewrite
                # elements: identifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 146:3: -> ^( FUNCARGS ( identifier )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:146:6: ^( FUNCARGS ( identifier )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNCARGS, "FUNCARGS"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:146:17: ( identifier )*
                    while stream_identifier.hasNext():
                        self.adaptor.addChild(root_1, stream_identifier.next())


                    stream_identifier.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 15, formalParameterList_StartIndex)

            pass

        return retval

    # $ANTLR end formalParameterList

    class statement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start statement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:150:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | defaultXmlNamespaceStatement );
    def statement(self, ):

        retval = self.statement_return()
        retval.start = self.input.LT(1)
        statement_StartIndex = self.input.index()
        root_0 = None

        statementBlock78 = None

        variableStatement79 = None

        emptyStatement80 = None

        expressionStatement81 = None

        ifStatement82 = None

        iterationStatement83 = None

        continueStatement84 = None

        breakStatement85 = None

        returnStatement86 = None

        withStatement87 = None

        letStatement88 = None

        labelledStatement89 = None

        switchStatement90 = None

        throwStatement91 = None

        tryStatement92 = None

        defaultXmlNamespaceStatement93 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 16):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:151:2: ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | defaultXmlNamespaceStatement )
                alt34 = 16
                LA34 = self.input.LA(1)
                if LA34 == 78:
                    LA34_1 = self.input.LA(2)

                    if (self.synpred41()) :
                        alt34 = 1
                    elif (self.synpred44()) :
                        alt34 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("150:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | defaultXmlNamespaceStatement );", 34, 1, self.input)

                        raise nvae

                elif LA34 == 89 or LA34 == 90:
                    alt34 = 2
                elif LA34 == 91:
                    LA34_4 = self.input.LA(2)

                    if (self.synpred42()) :
                        alt34 = 2
                    elif (self.synpred44()) :
                        alt34 = 4
                    elif (self.synpred51()) :
                        alt34 = 11
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("150:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | defaultXmlNamespaceStatement );", 34, 4, self.input)

                        raise nvae

                elif LA34 == 87:
                    alt34 = 3
                elif LA34 == LT or LA34 == StringLiteral or LA34 == XMLComment or LA34 == NumericLiteral or LA34 == RegularExpressionHacks or LA34 == 72 or LA34 == 74 or LA34 == 76 or LA34 == 80 or LA34 == 81 or LA34 == 92 or LA34 == 110 or LA34 == 140 or LA34 == 142 or LA34 == 143 or LA34 == 144 or LA34 == 145 or LA34 == 146 or LA34 == 147 or LA34 == 148 or LA34 == 149 or LA34 == 152 or LA34 == 153 or LA34 == 154:
                    alt34 = 4
                elif LA34 == 84:
                    LA34_10 = self.input.LA(2)

                    if (self.synpred44()) :
                        alt34 = 4
                    elif (self.synpred52()) :
                        alt34 = 12
                    elif (True) :
                        alt34 = 16
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("150:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | defaultXmlNamespaceStatement );", 34, 10, self.input)

                        raise nvae

                elif LA34 == 94:
                    alt34 = 5
                elif LA34 == 96 or LA34 == 97 or LA34 == 98:
                    alt34 = 6
                elif LA34 == 101:
                    alt34 = 7
                elif LA34 == 102:
                    alt34 = 8
                elif LA34 == 88:
                    alt34 = 9
                elif LA34 == 103:
                    alt34 = 10
                elif LA34 == 104:
                    alt34 = 13
                elif LA34 == 106:
                    alt34 = 14
                elif LA34 == 107:
                    alt34 = 15
                elif LA34 == Identifier or LA34 == 85 or LA34 == 86 or LA34 == 99 or LA34 == 150 or LA34 == 151:
                    LA34_34 = self.input.LA(2)

                    if (self.synpred44()) :
                        alt34 = 4
                    elif (self.synpred52()) :
                        alt34 = 12
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("150:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | defaultXmlNamespaceStatement );", 34, 34, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("150:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | defaultXmlNamespaceStatement );", 34, 0, self.input)

                    raise nvae

                if alt34 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:151:4: statementBlock
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_statementBlock_in_statement757)
                    statementBlock78 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, statementBlock78.tree)


                elif alt34 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:4: variableStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_variableStatement_in_statement762)
                    variableStatement79 = self.variableStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, variableStatement79.tree)


                elif alt34 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:153:4: emptyStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_emptyStatement_in_statement767)
                    emptyStatement80 = self.emptyStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, emptyStatement80.tree)


                elif alt34 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:154:4: expressionStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_expressionStatement_in_statement772)
                    expressionStatement81 = self.expressionStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, expressionStatement81.tree)


                elif alt34 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:155:4: ifStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_ifStatement_in_statement777)
                    ifStatement82 = self.ifStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, ifStatement82.tree)


                elif alt34 == 6:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:156:4: iterationStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_iterationStatement_in_statement782)
                    iterationStatement83 = self.iterationStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, iterationStatement83.tree)


                elif alt34 == 7:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:157:4: continueStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_continueStatement_in_statement787)
                    continueStatement84 = self.continueStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, continueStatement84.tree)


                elif alt34 == 8:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:158:4: breakStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_breakStatement_in_statement792)
                    breakStatement85 = self.breakStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, breakStatement85.tree)


                elif alt34 == 9:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:159:4: returnStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_returnStatement_in_statement797)
                    returnStatement86 = self.returnStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, returnStatement86.tree)


                elif alt34 == 10:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:160:4: withStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_withStatement_in_statement802)
                    withStatement87 = self.withStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, withStatement87.tree)


                elif alt34 == 11:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:161:4: letStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_letStatement_in_statement807)
                    letStatement88 = self.letStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, letStatement88.tree)


                elif alt34 == 12:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:162:4: labelledStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_labelledStatement_in_statement812)
                    labelledStatement89 = self.labelledStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, labelledStatement89.tree)


                elif alt34 == 13:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:163:4: switchStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_switchStatement_in_statement817)
                    switchStatement90 = self.switchStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, switchStatement90.tree)


                elif alt34 == 14:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:164:4: throwStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_throwStatement_in_statement822)
                    throwStatement91 = self.throwStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, throwStatement91.tree)


                elif alt34 == 15:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:165:4: tryStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_tryStatement_in_statement827)
                    tryStatement92 = self.tryStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, tryStatement92.tree)


                elif alt34 == 16:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:166:4: defaultXmlNamespaceStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_defaultXmlNamespaceStatement_in_statement832)
                    defaultXmlNamespaceStatement93 = self.defaultXmlNamespaceStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, defaultXmlNamespaceStatement93.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 16, statement_StartIndex)

            pass

        return retval

    # $ANTLR end statement

    class defaultXmlNamespaceStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start defaultXmlNamespaceStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:169:1: defaultXmlNamespaceStatement : 'default' 'xml' 'namespace' ( LT )* '=' ( LT )* identifier ( LT | ';' ) -> ^( DEFAULTNS identifier ) ;
    def defaultXmlNamespaceStatement(self, ):

        retval = self.defaultXmlNamespaceStatement_return()
        retval.start = self.input.LT(1)
        defaultXmlNamespaceStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal94 = None
        string_literal95 = None
        string_literal96 = None
        LT97 = None
        char_literal98 = None
        LT99 = None
        LT101 = None
        char_literal102 = None
        identifier100 = None


        string_literal94_tree = None
        string_literal95_tree = None
        string_literal96_tree = None
        LT97_tree = None
        char_literal98_tree = None
        LT99_tree = None
        LT101_tree = None
        char_literal102_tree = None
        stream_77 = RewriteRuleTokenStream(self.adaptor, "token 77")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_87 = RewriteRuleTokenStream(self.adaptor, "token 87")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_85 = RewriteRuleTokenStream(self.adaptor, "token 85")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 17):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:2: ( 'default' 'xml' 'namespace' ( LT )* '=' ( LT )* identifier ( LT | ';' ) -> ^( DEFAULTNS identifier ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:4: 'default' 'xml' 'namespace' ( LT )* '=' ( LT )* identifier ( LT | ';' )
                string_literal94 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_defaultXmlNamespaceStatement843)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(string_literal94)
                string_literal95 = self.input.LT(1)
                self.match(self.input, 85, self.FOLLOW_85_in_defaultXmlNamespaceStatement845)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_85.add(string_literal95)
                string_literal96 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_defaultXmlNamespaceStatement847)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(string_literal96)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:32: ( LT )*
                while True: #loop35
                    alt35 = 2
                    LA35_0 = self.input.LA(1)

                    if (LA35_0 == LT) :
                        alt35 = 1


                    if alt35 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT97 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultXmlNamespaceStatement849)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT97)


                    else:
                        break #loop35


                char_literal98 = self.input.LT(1)
                self.match(self.input, 77, self.FOLLOW_77_in_defaultXmlNamespaceStatement852)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_77.add(char_literal98)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:40: ( LT )*
                while True: #loop36
                    alt36 = 2
                    LA36_0 = self.input.LA(1)

                    if (LA36_0 == LT) :
                        alt36 = 1


                    if alt36 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT99 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultXmlNamespaceStatement854)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT99)


                    else:
                        break #loop36


                self.following.append(self.FOLLOW_identifier_in_defaultXmlNamespaceStatement857)
                identifier100 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_identifier.add(identifier100.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:55: ( LT | ';' )
                alt37 = 2
                LA37_0 = self.input.LA(1)

                if (LA37_0 == LT) :
                    alt37 = 1
                elif (LA37_0 == 87) :
                    alt37 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("170:55: ( LT | ';' )", 37, 0, self.input)

                    raise nvae

                if alt37 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:56: LT
                    LT101 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_defaultXmlNamespaceStatement860)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT101)


                elif alt37 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:61: ';'
                    char_literal102 = self.input.LT(1)
                    self.match(self.input, 87, self.FOLLOW_87_in_defaultXmlNamespaceStatement864)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_87.add(char_literal102)



                # AST Rewrite
                # elements: identifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 171:3: -> ^( DEFAULTNS identifier )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:171:6: ^( DEFAULTNS identifier )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(DEFAULTNS, "DEFAULTNS"), root_1)

                    self.adaptor.addChild(root_1, stream_identifier.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 17, defaultXmlNamespaceStatement_StartIndex)

            pass

        return retval

    # $ANTLR end defaultXmlNamespaceStatement

    class statementBlock_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start statementBlock
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:174:1: statementBlock : ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) );
    def statementBlock(self, ):

        retval = self.statementBlock_return()
        retval.start = self.input.LT(1)
        statementBlock_StartIndex = self.input.index()
        root_0 = None

        char_literal103 = None
        LT104 = None
        LT106 = None
        char_literal107 = None
        char_literal108 = None
        string_literal109 = None
        char_literal111 = None
        statementList105 = None

        expression110 = None


        char_literal103_tree = None
        LT104_tree = None
        LT106_tree = None
        char_literal107_tree = None
        char_literal108_tree = None
        string_literal109_tree = None
        char_literal111_tree = None
        stream_79 = RewriteRuleTokenStream(self.adaptor, "token 79")
        stream_78 = RewriteRuleTokenStream(self.adaptor, "token 78")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_88 = RewriteRuleTokenStream(self.adaptor, "token 88")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statementList = RewriteRuleSubtreeStream(self.adaptor, "rule statementList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 18):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:2: ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) )
                alt42 = 2
                LA42_0 = self.input.LA(1)

                if (LA42_0 == 78) :
                    LA42_1 = self.input.LA(2)

                    if (self.synpred62()) :
                        alt42 = 1
                    elif (True) :
                        alt42 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("174:1: statementBlock : ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) );", 42, 1, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("174:1: statementBlock : ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) );", 42, 0, self.input)

                    raise nvae

                if alt42 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:4: '{' ( LT )* ( statementList )? ( LT )* '}'
                    char_literal103 = self.input.LT(1)
                    self.match(self.input, 78, self.FOLLOW_78_in_statementBlock886)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_78.add(char_literal103)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:8: ( LT )*
                    while True: #loop38
                        alt38 = 2
                        LA38_0 = self.input.LA(1)

                        if (LA38_0 == LT) :
                            LA38_2 = self.input.LA(2)

                            if (self.synpred59()) :
                                alt38 = 1




                        if alt38 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT104 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_statementBlock888)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT104)


                        else:
                            break #loop38


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:12: ( statementList )?
                    alt39 = 2
                    alt39 = self.dfa39.predict(self.input)
                    if alt39 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
                        self.following.append(self.FOLLOW_statementList_in_statementBlock891)
                        statementList105 = self.statementList()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_statementList.add(statementList105.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:27: ( LT )*
                    while True: #loop40
                        alt40 = 2
                        LA40_0 = self.input.LA(1)

                        if (LA40_0 == LT) :
                            alt40 = 1


                        if alt40 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT106 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_statementBlock894)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT106)


                        else:
                            break #loop40


                    char_literal107 = self.input.LT(1)
                    self.match(self.input, 79, self.FOLLOW_79_in_statementBlock897)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_79.add(char_literal107)
                    # AST Rewrite
                    # elements: statementList, 91
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 176:3: -> ^( SCOPE 'let' ( statementList )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:176:6: ^( SCOPE 'let' ( statementList )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromType(91, "91"))
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:176:20: ( statementList )?
                        if stream_statementList.hasNext():
                            self.adaptor.addChild(root_1, stream_statementList.next())


                        stream_statementList.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt42 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:177:4: '{' ( 'return' )? expression '}'
                    char_literal108 = self.input.LT(1)
                    self.match(self.input, 78, self.FOLLOW_78_in_statementBlock915)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_78.add(char_literal108)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:177:8: ( 'return' )?
                    alt41 = 2
                    LA41_0 = self.input.LA(1)

                    if (LA41_0 == 88) :
                        alt41 = 1
                    if alt41 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: 'return'
                        string_literal109 = self.input.LT(1)
                        self.match(self.input, 88, self.FOLLOW_88_in_statementBlock917)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_88.add(string_literal109)



                    self.following.append(self.FOLLOW_expression_in_statementBlock920)
                    expression110 = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(expression110.tree)
                    char_literal111 = self.input.LT(1)
                    self.match(self.input, 79, self.FOLLOW_79_in_statementBlock922)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_79.add(char_literal111)
                    # AST Rewrite
                    # elements: expression, 91
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 178:3: -> ^( SCOPE 'let' ^( RETURN expression ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:6: ^( SCOPE 'let' ^( RETURN expression ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromType(91, "91"))
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:20: ^( RETURN expression )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(RETURN, "RETURN"), root_2)

                        self.adaptor.addChild(root_2, stream_expression.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 18, statementBlock_StartIndex)

            pass

        return retval

    # $ANTLR end statementBlock

    class statementList_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start statementList
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:181:1: statementList : statement ( ( LT )* statement )* ;
    def statementList(self, ):

        retval = self.statementList_return()
        retval.start = self.input.LT(1)
        statementList_StartIndex = self.input.index()
        root_0 = None

        LT113 = None
        statement112 = None

        statement114 = None


        LT113_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 19):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:2: ( statement ( ( LT )* statement )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:4: statement ( ( LT )* statement )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_statement_in_statementList951)
                statement112 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statement112.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:14: ( ( LT )* statement )*
                while True: #loop44
                    alt44 = 2
                    LA44 = self.input.LA(1)
                    if LA44 == LT:
                        LA44_1 = self.input.LA(2)

                        if (self.synpred65()) :
                            alt44 = 1


                    elif LA44 == 84:
                        LA44_3 = self.input.LA(2)

                        if (self.synpred65()) :
                            alt44 = 1


                    elif LA44 == StringLiteral or LA44 == XMLComment or LA44 == NumericLiteral or LA44 == Identifier or LA44 == RegularExpressionHacks or LA44 == 72 or LA44 == 74 or LA44 == 76 or LA44 == 78 or LA44 == 80 or LA44 == 81 or LA44 == 85 or LA44 == 86 or LA44 == 87 or LA44 == 88 or LA44 == 89 or LA44 == 90 or LA44 == 91 or LA44 == 92 or LA44 == 94 or LA44 == 96 or LA44 == 97 or LA44 == 98 or LA44 == 99 or LA44 == 101 or LA44 == 102 or LA44 == 103 or LA44 == 104 or LA44 == 106 or LA44 == 107 or LA44 == 110 or LA44 == 140 or LA44 == 142 or LA44 == 143 or LA44 == 144 or LA44 == 145 or LA44 == 146 or LA44 == 147 or LA44 == 148 or LA44 == 149 or LA44 == 150 or LA44 == 151 or LA44 == 152 or LA44 == 153 or LA44 == 154:
                        alt44 = 1

                    if alt44 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:15: ( LT )* statement
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:17: ( LT )*
                        while True: #loop43
                            alt43 = 2
                            LA43_0 = self.input.LA(1)

                            if (LA43_0 == LT) :
                                LA43_2 = self.input.LA(2)

                                if (self.synpred64()) :
                                    alt43 = 1




                            if alt43 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT113 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_statementList954)
                                if self.failed:
                                    return retval


                            else:
                                break #loop43


                        self.following.append(self.FOLLOW_statement_in_statementList958)
                        statement114 = self.statement()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, statement114.tree)


                    else:
                        break #loop44





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 19, statementList_StartIndex)

            pass

        return retval

    # $ANTLR end statementList

    class variableStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:185:1: variableStatement : (mod= 'var' | mod= 'const' | mod= 'let' ) ( LT )* variableDeclarationList ( LT | ';' ) -> ^( VARDEFS $mod variableDeclarationList ) ;
    def variableStatement(self, ):

        retval = self.variableStatement_return()
        retval.start = self.input.LT(1)
        variableStatement_StartIndex = self.input.index()
        root_0 = None

        mod = None
        LT115 = None
        LT117 = None
        char_literal118 = None
        variableDeclarationList116 = None


        mod_tree = None
        LT115_tree = None
        LT117_tree = None
        char_literal118_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_90 = RewriteRuleTokenStream(self.adaptor, "token 90")
        stream_87 = RewriteRuleTokenStream(self.adaptor, "token 87")
        stream_89 = RewriteRuleTokenStream(self.adaptor, "token 89")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 20):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:2: ( (mod= 'var' | mod= 'const' | mod= 'let' ) ( LT )* variableDeclarationList ( LT | ';' ) -> ^( VARDEFS $mod variableDeclarationList ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:4: (mod= 'var' | mod= 'const' | mod= 'let' ) ( LT )* variableDeclarationList ( LT | ';' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:4: (mod= 'var' | mod= 'const' | mod= 'let' )
                alt45 = 3
                LA45 = self.input.LA(1)
                if LA45 == 89:
                    alt45 = 1
                elif LA45 == 90:
                    alt45 = 2
                elif LA45 == 91:
                    alt45 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("186:4: (mod= 'var' | mod= 'const' | mod= 'let' )", 45, 0, self.input)

                    raise nvae

                if alt45 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:5: mod= 'var'
                    mod = self.input.LT(1)
                    self.match(self.input, 89, self.FOLLOW_89_in_variableStatement974)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_89.add(mod)


                elif alt45 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:15: mod= 'const'
                    mod = self.input.LT(1)
                    self.match(self.input, 90, self.FOLLOW_90_in_variableStatement978)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_90.add(mod)


                elif alt45 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:27: mod= 'let'
                    mod = self.input.LT(1)
                    self.match(self.input, 91, self.FOLLOW_91_in_variableStatement982)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_91.add(mod)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:38: ( LT )*
                while True: #loop46
                    alt46 = 2
                    LA46_0 = self.input.LA(1)

                    if (LA46_0 == LT) :
                        alt46 = 1


                    if alt46 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT115 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_variableStatement985)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT115)


                    else:
                        break #loop46


                self.following.append(self.FOLLOW_variableDeclarationList_in_variableStatement988)
                variableDeclarationList116 = self.variableDeclarationList()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_variableDeclarationList.add(variableDeclarationList116.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:66: ( LT | ';' )
                alt47 = 2
                LA47_0 = self.input.LA(1)

                if (LA47_0 == LT) :
                    alt47 = 1
                elif (LA47_0 == 87) :
                    alt47 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("186:66: ( LT | ';' )", 47, 0, self.input)

                    raise nvae

                if alt47 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:67: LT
                    LT117 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_variableStatement991)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT117)


                elif alt47 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:72: ';'
                    char_literal118 = self.input.LT(1)
                    self.match(self.input, 87, self.FOLLOW_87_in_variableStatement995)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_87.add(char_literal118)



                # AST Rewrite
                # elements: variableDeclarationList, mod
                # token labels: mod
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0
                    stream_mod = RewriteRuleTokenStream(self.adaptor, "token mod", mod)

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 187:3: -> ^( VARDEFS $mod variableDeclarationList )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:187:6: ^( VARDEFS $mod variableDeclarationList )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_1)

                    self.adaptor.addChild(root_1, stream_mod.next())
                    self.adaptor.addChild(root_1, stream_variableDeclarationList.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 20, variableStatement_StartIndex)

            pass

        return retval

    # $ANTLR end variableStatement

    class variableDeclarationList_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclarationList
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:1: variableDeclarationList : variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )* ;
    def variableDeclarationList(self, ):

        retval = self.variableDeclarationList_return()
        retval.start = self.input.LT(1)
        variableDeclarationList_StartIndex = self.input.index()
        root_0 = None

        LT120 = None
        char_literal121 = None
        LT122 = None
        variableDeclaration119 = None

        variableDeclaration123 = None


        LT120_tree = None
        char_literal121_tree = None
        LT122_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 21):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:191:2: ( variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:191:4: variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_variableDeclaration_in_variableDeclarationList1020)
                variableDeclaration119 = self.variableDeclaration()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, variableDeclaration119.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:191:24: ( ( LT )* ',' ( LT )* variableDeclaration )*
                while True: #loop50
                    alt50 = 2
                    alt50 = self.dfa50.predict(self.input)
                    if alt50 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:191:25: ( LT )* ',' ( LT )* variableDeclaration
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:191:27: ( LT )*
                        while True: #loop48
                            alt48 = 2
                            LA48_0 = self.input.LA(1)

                            if (LA48_0 == LT) :
                                alt48 = 1


                            if alt48 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT120 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationList1023)
                                if self.failed:
                                    return retval


                            else:
                                break #loop48


                        char_literal121 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_variableDeclarationList1027)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:191:37: ( LT )*
                        while True: #loop49
                            alt49 = 2
                            LA49_0 = self.input.LA(1)

                            if (LA49_0 == LT) :
                                alt49 = 1


                            if alt49 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT122 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationList1030)
                                if self.failed:
                                    return retval


                            else:
                                break #loop49


                        self.following.append(self.FOLLOW_variableDeclaration_in_variableDeclarationList1034)
                        variableDeclaration123 = self.variableDeclaration()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, variableDeclaration123.tree)


                    else:
                        break #loop50





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 21, variableDeclarationList_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclarationList

    class variableDeclarationListNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclarationListNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )* ;
    def variableDeclarationListNoIn(self, ):

        retval = self.variableDeclarationListNoIn_return()
        retval.start = self.input.LT(1)
        variableDeclarationListNoIn_StartIndex = self.input.index()
        root_0 = None

        LT125 = None
        char_literal126 = None
        LT127 = None
        variableDeclarationNoIn124 = None

        variableDeclarationNoIn128 = None


        LT125_tree = None
        char_literal126_tree = None
        LT127_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 22):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:195:2: ( variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:195:4: variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1048)
                variableDeclarationNoIn124 = self.variableDeclarationNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, variableDeclarationNoIn124.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:195:28: ( ( LT )* ',' ( LT )* variableDeclarationNoIn )*
                while True: #loop53
                    alt53 = 2
                    alt53 = self.dfa53.predict(self.input)
                    if alt53 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:195:29: ( LT )* ',' ( LT )* variableDeclarationNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:195:31: ( LT )*
                        while True: #loop51
                            alt51 = 2
                            LA51_0 = self.input.LA(1)

                            if (LA51_0 == LT) :
                                alt51 = 1


                            if alt51 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT125 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationListNoIn1051)
                                if self.failed:
                                    return retval


                            else:
                                break #loop51


                        char_literal126 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_variableDeclarationListNoIn1055)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:195:41: ( LT )*
                        while True: #loop52
                            alt52 = 2
                            LA52_0 = self.input.LA(1)

                            if (LA52_0 == LT) :
                                alt52 = 1


                            if alt52 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT127 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationListNoIn1058)
                                if self.failed:
                                    return retval


                            else:
                                break #loop52


                        self.following.append(self.FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1062)
                        variableDeclarationNoIn128 = self.variableDeclarationNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, variableDeclarationNoIn128.tree)


                    else:
                        break #loop53





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 22, variableDeclarationListNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclarationListNoIn

    class variableDeclaration_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclaration
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:198:1: variableDeclaration : ( identifier ( ( LT )* initialiser )? -> ^( VARDEF identifier ( initialiser )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiser )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiser )? ) );
    def variableDeclaration(self, ):

        retval = self.variableDeclaration_return()
        retval.start = self.input.LT(1)
        variableDeclaration_StartIndex = self.input.index()
        root_0 = None

        LT130 = None
        char_literal132 = None
        LT133 = None
        LT135 = None
        char_literal136 = None
        LT137 = None
        LT139 = None
        char_literal140 = None
        LT141 = None
        char_literal142 = None
        LT143 = None
        identifier129 = None

        initialiser131 = None

        identifier134 = None

        identifier138 = None

        initialiser144 = None


        LT130_tree = None
        char_literal132_tree = None
        LT133_tree = None
        LT135_tree = None
        char_literal136_tree = None
        LT137_tree = None
        LT139_tree = None
        char_literal140_tree = None
        LT141_tree = None
        char_literal142_tree = None
        LT143_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_92 = RewriteRuleTokenStream(self.adaptor, "token 92")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_initialiser = RewriteRuleSubtreeStream(self.adaptor, "rule initialiser")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 23):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:2: ( identifier ( ( LT )* initialiser )? -> ^( VARDEF identifier ( initialiser )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiser )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiser )? ) )
                alt67 = 2
                LA67_0 = self.input.LA(1)

                if (LA67_0 == Identifier or (84 <= LA67_0 <= 86) or LA67_0 == 99 or (150 <= LA67_0 <= 151)) :
                    alt67 = 1
                elif (LA67_0 == 92) :
                    alt67 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("198:1: variableDeclaration : ( identifier ( ( LT )* initialiser )? -> ^( VARDEF identifier ( initialiser )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiser )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiser )? ) );", 67, 0, self.input)

                    raise nvae

                if alt67 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:4: identifier ( ( LT )* initialiser )?
                    self.following.append(self.FOLLOW_identifier_in_variableDeclaration1076)
                    identifier129 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier129.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:15: ( ( LT )* initialiser )?
                    alt55 = 2
                    alt55 = self.dfa55.predict(self.input)
                    if alt55 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:16: ( LT )* initialiser
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:16: ( LT )*
                        while True: #loop54
                            alt54 = 2
                            LA54_0 = self.input.LA(1)

                            if (LA54_0 == LT) :
                                alt54 = 1


                            if alt54 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT130 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1079)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT130)


                            else:
                                break #loop54


                        self.following.append(self.FOLLOW_initialiser_in_variableDeclaration1082)
                        initialiser131 = self.initialiser()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_initialiser.add(initialiser131.tree)



                    # AST Rewrite
                    # elements: identifier, initialiser
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 200:3: -> ^( VARDEF identifier ( initialiser )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:200:6: ^( VARDEF identifier ( initialiser )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEF, "VARDEF"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:200:26: ( initialiser )?
                        if stream_initialiser.hasNext():
                            self.adaptor.addChild(root_1, stream_initialiser.next())


                        stream_initialiser.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt67 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:4: '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiser )?
                    char_literal132 = self.input.LT(1)
                    self.match(self.input, 92, self.FOLLOW_92_in_variableDeclaration1102)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_92.add(char_literal132)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:8: ( LT )*
                    while True: #loop56
                        alt56 = 2
                        LA56_0 = self.input.LA(1)

                        if (LA56_0 == LT) :
                            LA56_2 = self.input.LA(2)

                            if (self.synpred79()) :
                                alt56 = 1




                        if alt56 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT133 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1104)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT133)


                        else:
                            break #loop56


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:12: ( identifier )?
                    alt57 = 2
                    LA57_0 = self.input.LA(1)

                    if (LA57_0 == Identifier or (84 <= LA57_0 <= 86) or LA57_0 == 99 or (150 <= LA57_0 <= 151)) :
                        alt57 = 1
                    if alt57 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: identifier
                        self.following.append(self.FOLLOW_identifier_in_variableDeclaration1107)
                        identifier134 = self.identifier()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_identifier.add(identifier134.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:24: ( ( LT )* ',' ( ( LT )* identifier )? )*
                    while True: #loop61
                        alt61 = 2
                        alt61 = self.dfa61.predict(self.input)
                        if alt61 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:25: ( LT )* ',' ( ( LT )* identifier )?
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:25: ( LT )*
                            while True: #loop58
                                alt58 = 2
                                LA58_0 = self.input.LA(1)

                                if (LA58_0 == LT) :
                                    alt58 = 1


                                if alt58 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT135 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1111)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT135)


                                else:
                                    break #loop58


                            char_literal136 = self.input.LT(1)
                            self.match(self.input, 82, self.FOLLOW_82_in_variableDeclaration1114)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_82.add(char_literal136)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:33: ( ( LT )* identifier )?
                            alt60 = 2
                            alt60 = self.dfa60.predict(self.input)
                            if alt60 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:34: ( LT )* identifier
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:34: ( LT )*
                                while True: #loop59
                                    alt59 = 2
                                    LA59_0 = self.input.LA(1)

                                    if (LA59_0 == LT) :
                                        alt59 = 1


                                    if alt59 == 1:
                                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                        LT137 = self.input.LT(1)
                                        self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1117)
                                        if self.failed:
                                            return retval
                                        if self.backtracking == 0:
                                            stream_LT.add(LT137)


                                    else:
                                        break #loop59


                                self.following.append(self.FOLLOW_identifier_in_variableDeclaration1120)
                                identifier138 = self.identifier()
                                self.following.pop()
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_identifier.add(identifier138.tree)





                        else:
                            break #loop61


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:53: ( LT )*
                    while True: #loop62
                        alt62 = 2
                        LA62_0 = self.input.LA(1)

                        if (LA62_0 == LT) :
                            alt62 = 1


                        if alt62 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT139 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1126)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT139)


                        else:
                            break #loop62


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:57: ( ',' ( LT )* )?
                    alt64 = 2
                    LA64_0 = self.input.LA(1)

                    if (LA64_0 == 82) :
                        alt64 = 1
                    if alt64 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:58: ',' ( LT )*
                        char_literal140 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_variableDeclaration1130)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_82.add(char_literal140)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:62: ( LT )*
                        while True: #loop63
                            alt63 = 2
                            LA63_0 = self.input.LA(1)

                            if (LA63_0 == LT) :
                                alt63 = 1


                            if alt63 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT141 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1132)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT141)


                            else:
                                break #loop63





                    char_literal142 = self.input.LT(1)
                    self.match(self.input, 93, self.FOLLOW_93_in_variableDeclaration1137)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_93.add(char_literal142)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:72: ( ( LT )* initialiser )?
                    alt66 = 2
                    alt66 = self.dfa66.predict(self.input)
                    if alt66 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:73: ( LT )* initialiser
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:73: ( LT )*
                        while True: #loop65
                            alt65 = 2
                            LA65_0 = self.input.LA(1)

                            if (LA65_0 == LT) :
                                alt65 = 1


                            if alt65 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT143 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1140)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT143)


                            else:
                                break #loop65


                        self.following.append(self.FOLLOW_initialiser_in_variableDeclaration1143)
                        initialiser144 = self.initialiser()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_initialiser.add(initialiser144.tree)



                    # AST Rewrite
                    # elements: initialiser, identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 202:3: -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiser )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:202:6: ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiser )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEF, "VARDEF"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:202:15: ^( ARRAY ( identifier )* )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAY, "ARRAY"), root_2)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:202:23: ( identifier )*
                        while stream_identifier.hasNext():
                            self.adaptor.addChild(root_2, stream_identifier.next())


                        stream_identifier.reset();

                        self.adaptor.addChild(root_1, root_2)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:202:36: ( initialiser )?
                        if stream_initialiser.hasNext():
                            self.adaptor.addChild(root_1, stream_initialiser.next())


                        stream_initialiser.reset();

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 23, variableDeclaration_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclaration

    class variableDeclarationNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclarationNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:205:1: variableDeclarationNoIn : ( identifier ( ( LT )* initialiserNoIn )? -> ^( VARDEF identifier ( initialiserNoIn )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? ) );
    def variableDeclarationNoIn(self, ):

        retval = self.variableDeclarationNoIn_return()
        retval.start = self.input.LT(1)
        variableDeclarationNoIn_StartIndex = self.input.index()
        root_0 = None

        LT146 = None
        char_literal148 = None
        LT149 = None
        LT151 = None
        char_literal152 = None
        LT153 = None
        LT155 = None
        char_literal156 = None
        LT157 = None
        char_literal158 = None
        LT159 = None
        identifier145 = None

        initialiserNoIn147 = None

        identifier150 = None

        identifier154 = None

        initialiserNoIn160 = None


        LT146_tree = None
        char_literal148_tree = None
        LT149_tree = None
        LT151_tree = None
        char_literal152_tree = None
        LT153_tree = None
        LT155_tree = None
        char_literal156_tree = None
        LT157_tree = None
        char_literal158_tree = None
        LT159_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_92 = RewriteRuleTokenStream(self.adaptor, "token 92")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_initialiserNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule initialiserNoIn")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 24):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:206:2: ( identifier ( ( LT )* initialiserNoIn )? -> ^( VARDEF identifier ( initialiserNoIn )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? ) )
                alt81 = 2
                LA81_0 = self.input.LA(1)

                if (LA81_0 == Identifier or (84 <= LA81_0 <= 86) or LA81_0 == 99 or (150 <= LA81_0 <= 151)) :
                    alt81 = 1
                elif (LA81_0 == 92) :
                    alt81 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("205:1: variableDeclarationNoIn : ( identifier ( ( LT )* initialiserNoIn )? -> ^( VARDEF identifier ( initialiserNoIn )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? ) );", 81, 0, self.input)

                    raise nvae

                if alt81 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:206:4: identifier ( ( LT )* initialiserNoIn )?
                    self.following.append(self.FOLLOW_identifier_in_variableDeclarationNoIn1175)
                    identifier145 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier145.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:206:15: ( ( LT )* initialiserNoIn )?
                    alt69 = 2
                    alt69 = self.dfa69.predict(self.input)
                    if alt69 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:206:16: ( LT )* initialiserNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:206:16: ( LT )*
                        while True: #loop68
                            alt68 = 2
                            LA68_0 = self.input.LA(1)

                            if (LA68_0 == LT) :
                                alt68 = 1


                            if alt68 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT146 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1178)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT146)


                            else:
                                break #loop68


                        self.following.append(self.FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1181)
                        initialiserNoIn147 = self.initialiserNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_initialiserNoIn.add(initialiserNoIn147.tree)



                    # AST Rewrite
                    # elements: initialiserNoIn, identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 207:3: -> ^( VARDEF identifier ( initialiserNoIn )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:207:6: ^( VARDEF identifier ( initialiserNoIn )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEF, "VARDEF"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:207:26: ( initialiserNoIn )?
                        if stream_initialiserNoIn.hasNext():
                            self.adaptor.addChild(root_1, stream_initialiserNoIn.next())


                        stream_initialiserNoIn.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt81 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:4: '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )?
                    char_literal148 = self.input.LT(1)
                    self.match(self.input, 92, self.FOLLOW_92_in_variableDeclarationNoIn1201)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_92.add(char_literal148)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:8: ( LT )*
                    while True: #loop70
                        alt70 = 2
                        LA70_0 = self.input.LA(1)

                        if (LA70_0 == LT) :
                            LA70_2 = self.input.LA(2)

                            if (self.synpred93()) :
                                alt70 = 1




                        if alt70 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT149 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1203)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT149)


                        else:
                            break #loop70


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:12: ( identifier )?
                    alt71 = 2
                    LA71_0 = self.input.LA(1)

                    if (LA71_0 == Identifier or (84 <= LA71_0 <= 86) or LA71_0 == 99 or (150 <= LA71_0 <= 151)) :
                        alt71 = 1
                    if alt71 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: identifier
                        self.following.append(self.FOLLOW_identifier_in_variableDeclarationNoIn1206)
                        identifier150 = self.identifier()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_identifier.add(identifier150.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:24: ( ( LT )* ',' ( ( LT )* identifier )? )*
                    while True: #loop75
                        alt75 = 2
                        alt75 = self.dfa75.predict(self.input)
                        if alt75 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:25: ( LT )* ',' ( ( LT )* identifier )?
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:25: ( LT )*
                            while True: #loop72
                                alt72 = 2
                                LA72_0 = self.input.LA(1)

                                if (LA72_0 == LT) :
                                    alt72 = 1


                                if alt72 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT151 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1210)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT151)


                                else:
                                    break #loop72


                            char_literal152 = self.input.LT(1)
                            self.match(self.input, 82, self.FOLLOW_82_in_variableDeclarationNoIn1213)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_82.add(char_literal152)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:33: ( ( LT )* identifier )?
                            alt74 = 2
                            alt74 = self.dfa74.predict(self.input)
                            if alt74 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:34: ( LT )* identifier
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:34: ( LT )*
                                while True: #loop73
                                    alt73 = 2
                                    LA73_0 = self.input.LA(1)

                                    if (LA73_0 == LT) :
                                        alt73 = 1


                                    if alt73 == 1:
                                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                        LT153 = self.input.LT(1)
                                        self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1216)
                                        if self.failed:
                                            return retval
                                        if self.backtracking == 0:
                                            stream_LT.add(LT153)


                                    else:
                                        break #loop73


                                self.following.append(self.FOLLOW_identifier_in_variableDeclarationNoIn1219)
                                identifier154 = self.identifier()
                                self.following.pop()
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_identifier.add(identifier154.tree)





                        else:
                            break #loop75


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:53: ( LT )*
                    while True: #loop76
                        alt76 = 2
                        LA76_0 = self.input.LA(1)

                        if (LA76_0 == LT) :
                            alt76 = 1


                        if alt76 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT155 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1225)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT155)


                        else:
                            break #loop76


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:57: ( ',' ( LT )* )?
                    alt78 = 2
                    LA78_0 = self.input.LA(1)

                    if (LA78_0 == 82) :
                        alt78 = 1
                    if alt78 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:58: ',' ( LT )*
                        char_literal156 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_variableDeclarationNoIn1229)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_82.add(char_literal156)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:62: ( LT )*
                        while True: #loop77
                            alt77 = 2
                            LA77_0 = self.input.LA(1)

                            if (LA77_0 == LT) :
                                alt77 = 1


                            if alt77 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT157 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1231)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT157)


                            else:
                                break #loop77





                    char_literal158 = self.input.LT(1)
                    self.match(self.input, 93, self.FOLLOW_93_in_variableDeclarationNoIn1236)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_93.add(char_literal158)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:72: ( ( LT )* initialiserNoIn )?
                    alt80 = 2
                    alt80 = self.dfa80.predict(self.input)
                    if alt80 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:73: ( LT )* initialiserNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:73: ( LT )*
                        while True: #loop79
                            alt79 = 2
                            LA79_0 = self.input.LA(1)

                            if (LA79_0 == LT) :
                                alt79 = 1


                            if alt79 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT159 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1239)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT159)


                            else:
                                break #loop79


                        self.following.append(self.FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1242)
                        initialiserNoIn160 = self.initialiserNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_initialiserNoIn.add(initialiserNoIn160.tree)



                    # AST Rewrite
                    # elements: identifier, initialiserNoIn
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 209:3: -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:209:6: ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEF, "VARDEF"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:209:15: ^( ARRAY ( identifier )* )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAY, "ARRAY"), root_2)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:209:23: ( identifier )*
                        while stream_identifier.hasNext():
                            self.adaptor.addChild(root_2, stream_identifier.next())


                        stream_identifier.reset();

                        self.adaptor.addChild(root_1, root_2)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:209:36: ( initialiserNoIn )?
                        if stream_initialiserNoIn.hasNext():
                            self.adaptor.addChild(root_1, stream_initialiserNoIn.next())


                        stream_initialiserNoIn.reset();

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 24, variableDeclarationNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclarationNoIn

    class initialiser_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start initialiser
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:212:1: initialiser : '=' ( LT )* assignmentExpression -> assignmentExpression ;
    def initialiser(self, ):

        retval = self.initialiser_return()
        retval.start = self.input.LT(1)
        initialiser_StartIndex = self.input.index()
        root_0 = None

        char_literal161 = None
        LT162 = None
        assignmentExpression163 = None


        char_literal161_tree = None
        LT162_tree = None
        stream_77 = RewriteRuleTokenStream(self.adaptor, "token 77")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 25):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:2: ( '=' ( LT )* assignmentExpression -> assignmentExpression )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:4: '=' ( LT )* assignmentExpression
                char_literal161 = self.input.LT(1)
                self.match(self.input, 77, self.FOLLOW_77_in_initialiser1274)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_77.add(char_literal161)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:8: ( LT )*
                while True: #loop82
                    alt82 = 2
                    LA82_0 = self.input.LA(1)

                    if (LA82_0 == LT) :
                        LA82_2 = self.input.LA(2)

                        if (self.synpred104()) :
                            alt82 = 1




                    if alt82 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT162 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_initialiser1276)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT162)


                    else:
                        break #loop82


                self.following.append(self.FOLLOW_assignmentExpression_in_initialiser1279)
                assignmentExpression163 = self.assignmentExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_assignmentExpression.add(assignmentExpression163.tree)
                # AST Rewrite
                # elements: assignmentExpression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 214:3: -> assignmentExpression
                    self.adaptor.addChild(root_0, stream_assignmentExpression.next())






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 25, initialiser_StartIndex)

            pass

        return retval

    # $ANTLR end initialiser

    class initialiserNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start initialiserNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:217:1: initialiserNoIn : '=' ( LT )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
    def initialiserNoIn(self, ):

        retval = self.initialiserNoIn_return()
        retval.start = self.input.LT(1)
        initialiserNoIn_StartIndex = self.input.index()
        root_0 = None

        char_literal164 = None
        LT165 = None
        assignmentExpressionNoIn166 = None


        char_literal164_tree = None
        LT165_tree = None
        stream_77 = RewriteRuleTokenStream(self.adaptor, "token 77")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_assignmentExpressionNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpressionNoIn")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 26):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:2: ( '=' ( LT )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:4: '=' ( LT )* assignmentExpressionNoIn
                char_literal164 = self.input.LT(1)
                self.match(self.input, 77, self.FOLLOW_77_in_initialiserNoIn1297)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_77.add(char_literal164)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:8: ( LT )*
                while True: #loop83
                    alt83 = 2
                    LA83_0 = self.input.LA(1)

                    if (LA83_0 == LT) :
                        LA83_2 = self.input.LA(2)

                        if (self.synpred105()) :
                            alt83 = 1




                    if alt83 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT165 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_initialiserNoIn1299)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT165)


                    else:
                        break #loop83


                self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1302)
                assignmentExpressionNoIn166 = self.assignmentExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_assignmentExpressionNoIn.add(assignmentExpressionNoIn166.tree)
                # AST Rewrite
                # elements: assignmentExpressionNoIn
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 219:3: -> assignmentExpressionNoIn
                    self.adaptor.addChild(root_0, stream_assignmentExpressionNoIn.next())






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 26, initialiserNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end initialiserNoIn

    class emptyStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start emptyStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:222:1: emptyStatement : ';' ;
    def emptyStatement(self, ):

        retval = self.emptyStatement_return()
        retval.start = self.input.LT(1)
        emptyStatement_StartIndex = self.input.index()
        root_0 = None

        char_literal167 = None

        char_literal167_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 27):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:223:2: ( ';' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:223:4: ';'
                root_0 = self.adaptor.nil()

                char_literal167 = self.input.LT(1)
                self.match(self.input, 87, self.FOLLOW_87_in_emptyStatement1320)
                if self.failed:
                    return retval



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 27, emptyStatement_StartIndex)

            pass

        return retval

    # $ANTLR end emptyStatement

    class expressionStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start expressionStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:226:1: expressionStatement : expression ( LT | ';' ) ;
    def expressionStatement(self, ):

        retval = self.expressionStatement_return()
        retval.start = self.input.LT(1)
        expressionStatement_StartIndex = self.input.index()
        root_0 = None

        set169 = None
        expression168 = None


        set169_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 28):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:227:2: ( expression ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:227:4: expression ( LT | ';' )
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_expression_in_expressionStatement1333)
                expression168 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, expression168.tree)
                set169 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 87:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_expressionStatement1335
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 28, expressionStatement_StartIndex)

            pass

        return retval

    # $ANTLR end expressionStatement

    class ifStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start ifStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:230:1: ifStatement : 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( ( LT )* 'else' ( LT )* statement )? -> ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ ) ;
    def ifStatement(self, ):

        retval = self.ifStatement_return()
        retval.start = self.input.LT(1)
        ifStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal170 = None
        LT171 = None
        char_literal172 = None
        LT173 = None
        LT175 = None
        char_literal176 = None
        LT177 = None
        LT179 = None
        string_literal180 = None
        LT181 = None
        expression174 = None

        statement178 = None

        statement182 = None


        string_literal170_tree = None
        LT171_tree = None
        char_literal172_tree = None
        LT173_tree = None
        LT175_tree = None
        char_literal176_tree = None
        LT177_tree = None
        LT179_tree = None
        string_literal180_tree = None
        LT181_tree = None
        stream_95 = RewriteRuleTokenStream(self.adaptor, "token 95")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_94 = RewriteRuleTokenStream(self.adaptor, "token 94")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 29):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:2: ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( ( LT )* 'else' ( LT )* statement )? -> ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:4: 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( ( LT )* 'else' ( LT )* statement )?
                string_literal170 = self.input.LT(1)
                self.match(self.input, 94, self.FOLLOW_94_in_ifStatement1354)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_94.add(string_literal170)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:9: ( LT )*
                while True: #loop84
                    alt84 = 2
                    LA84_0 = self.input.LA(1)

                    if (LA84_0 == LT) :
                        alt84 = 1


                    if alt84 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT171 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1356)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT171)


                    else:
                        break #loop84


                char_literal172 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_ifStatement1359)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal172)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:17: ( LT )*
                while True: #loop85
                    alt85 = 2
                    LA85_0 = self.input.LA(1)

                    if (LA85_0 == LT) :
                        LA85_2 = self.input.LA(2)

                        if (self.synpred108()) :
                            alt85 = 1




                    if alt85 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT173 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1361)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT173)


                    else:
                        break #loop85


                self.following.append(self.FOLLOW_expression_in_ifStatement1364)
                expression174 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression174.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:32: ( LT )*
                while True: #loop86
                    alt86 = 2
                    LA86_0 = self.input.LA(1)

                    if (LA86_0 == LT) :
                        alt86 = 1


                    if alt86 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT175 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1366)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT175)


                    else:
                        break #loop86


                char_literal176 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_ifStatement1369)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal176)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:40: ( LT )*
                while True: #loop87
                    alt87 = 2
                    LA87_0 = self.input.LA(1)

                    if (LA87_0 == LT) :
                        LA87_2 = self.input.LA(2)

                        if (self.synpred110()) :
                            alt87 = 1




                    if alt87 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT177 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1371)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT177)


                    else:
                        break #loop87


                self.following.append(self.FOLLOW_statement_in_ifStatement1374)
                statement178 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement178.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:54: ( ( LT )* 'else' ( LT )* statement )?
                alt90 = 2
                LA90_0 = self.input.LA(1)

                if (LA90_0 == LT) :
                    LA90_1 = self.input.LA(2)

                    if (self.synpred113()) :
                        alt90 = 1
                elif (LA90_0 == 95) :
                    LA90_2 = self.input.LA(2)

                    if (self.synpred113()) :
                        alt90 = 1
                if alt90 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:55: ( LT )* 'else' ( LT )* statement
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:55: ( LT )*
                    while True: #loop88
                        alt88 = 2
                        LA88_0 = self.input.LA(1)

                        if (LA88_0 == LT) :
                            alt88 = 1


                        if alt88 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT179 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1377)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT179)


                        else:
                            break #loop88


                    string_literal180 = self.input.LT(1)
                    self.match(self.input, 95, self.FOLLOW_95_in_ifStatement1380)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_95.add(string_literal180)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:66: ( LT )*
                    while True: #loop89
                        alt89 = 2
                        LA89_0 = self.input.LA(1)

                        if (LA89_0 == LT) :
                            LA89_2 = self.input.LA(2)

                            if (self.synpred112()) :
                                alt89 = 1




                        if alt89 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT181 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1382)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT181)


                        else:
                            break #loop89


                    self.following.append(self.FOLLOW_statement_in_ifStatement1385)
                    statement182 = self.statement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statement.add(statement182.tree)



                # AST Rewrite
                # elements: statement, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 232:3: -> ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:232:6: ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(COND, "COND"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:232:13: ^( TEST expression )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_2)

                    self.adaptor.addChild(root_2, stream_expression.next())

                    self.adaptor.addChild(root_1, root_2)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:232:32: ( ^( CODE statement ) )+
                    if not (stream_statement.hasNext()):
                        raise RewriteEarlyExitException()

                    while stream_statement.hasNext():
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:232:32: ^( CODE statement )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_2)

                        self.adaptor.addChild(root_2, stream_statement.next())

                        self.adaptor.addChild(root_1, root_2)


                    stream_statement.reset()

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 29, ifStatement_StartIndex)

            pass

        return retval

    # $ANTLR end ifStatement

    class iterationStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start iterationStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:235:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
    def iterationStatement(self, ):

        retval = self.iterationStatement_return()
        retval.start = self.input.LT(1)
        iterationStatement_StartIndex = self.input.index()
        root_0 = None

        doWhileStatement183 = None

        whileStatement184 = None

        forStatement185 = None

        forInStatement186 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 30):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:236:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
                alt91 = 4
                LA91 = self.input.LA(1)
                if LA91 == 96:
                    alt91 = 1
                elif LA91 == 97:
                    alt91 = 2
                elif LA91 == 98:
                    LA91_3 = self.input.LA(2)

                    if (self.synpred116()) :
                        alt91 = 3
                    elif (True) :
                        alt91 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("235:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );", 91, 3, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("235:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );", 91, 0, self.input)

                    raise nvae

                if alt91 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:236:4: doWhileStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_doWhileStatement_in_iterationStatement1420)
                    doWhileStatement183 = self.doWhileStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, doWhileStatement183.tree)


                elif alt91 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:237:4: whileStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_whileStatement_in_iterationStatement1425)
                    whileStatement184 = self.whileStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, whileStatement184.tree)


                elif alt91 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:238:4: forStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_forStatement_in_iterationStatement1430)
                    forStatement185 = self.forStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, forStatement185.tree)


                elif alt91 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:239:4: forInStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_forInStatement_in_iterationStatement1435)
                    forInStatement186 = self.forInStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, forInStatement186.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 30, iterationStatement_StartIndex)

            pass

        return retval

    # $ANTLR end iterationStatement

    class doWhileStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start doWhileStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:242:1: doWhileStatement : 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' ) -> ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) ) ;
    def doWhileStatement(self, ):

        retval = self.doWhileStatement_return()
        retval.start = self.input.LT(1)
        doWhileStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal187 = None
        LT188 = None
        LT190 = None
        string_literal191 = None
        LT192 = None
        char_literal193 = None
        char_literal195 = None
        LT196 = None
        char_literal197 = None
        statement189 = None

        expression194 = None


        string_literal187_tree = None
        LT188_tree = None
        LT190_tree = None
        string_literal191_tree = None
        LT192_tree = None
        char_literal193_tree = None
        char_literal195_tree = None
        LT196_tree = None
        char_literal197_tree = None
        stream_97 = RewriteRuleTokenStream(self.adaptor, "token 97")
        stream_96 = RewriteRuleTokenStream(self.adaptor, "token 96")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_87 = RewriteRuleTokenStream(self.adaptor, "token 87")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 31):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:2: ( 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' ) -> ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:4: 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' )
                string_literal187 = self.input.LT(1)
                self.match(self.input, 96, self.FOLLOW_96_in_doWhileStatement1447)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_96.add(string_literal187)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:9: ( LT )*
                while True: #loop92
                    alt92 = 2
                    LA92_0 = self.input.LA(1)

                    if (LA92_0 == LT) :
                        LA92_2 = self.input.LA(2)

                        if (self.synpred117()) :
                            alt92 = 1




                    if alt92 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT188 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1449)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT188)


                    else:
                        break #loop92


                self.following.append(self.FOLLOW_statement_in_doWhileStatement1452)
                statement189 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement189.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:23: ( LT )*
                while True: #loop93
                    alt93 = 2
                    LA93_0 = self.input.LA(1)

                    if (LA93_0 == LT) :
                        alt93 = 1


                    if alt93 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT190 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1454)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT190)


                    else:
                        break #loop93


                string_literal191 = self.input.LT(1)
                self.match(self.input, 97, self.FOLLOW_97_in_doWhileStatement1457)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_97.add(string_literal191)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:35: ( LT )*
                while True: #loop94
                    alt94 = 2
                    LA94_0 = self.input.LA(1)

                    if (LA94_0 == LT) :
                        alt94 = 1


                    if alt94 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT192 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1459)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT192)


                    else:
                        break #loop94


                char_literal193 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_doWhileStatement1462)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal193)
                self.following.append(self.FOLLOW_expression_in_doWhileStatement1464)
                expression194 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression194.tree)
                char_literal195 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_doWhileStatement1466)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal195)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:58: ( LT | ';' )
                alt95 = 2
                LA95_0 = self.input.LA(1)

                if (LA95_0 == LT) :
                    alt95 = 1
                elif (LA95_0 == 87) :
                    alt95 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("243:58: ( LT | ';' )", 95, 0, self.input)

                    raise nvae

                if alt95 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:59: LT
                    LT196 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1469)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT196)


                elif alt95 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:64: ';'
                    char_literal197 = self.input.LT(1)
                    self.match(self.input, 87, self.FOLLOW_87_in_doWhileStatement1473)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_87.add(char_literal197)



                # AST Rewrite
                # elements: statement, 91, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 244:3: -> ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:6: ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(91, "91"))
                    self.adaptor.addChild(root_1, self.adaptor.createFromType(NONE, "NONE"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:25: ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CONDLOOP, "CONDLOOP"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:36: ^( CODE statement )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                    self.adaptor.addChild(root_3, stream_statement.next())

                    self.adaptor.addChild(root_2, root_3)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:54: ^( TEST expression )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_3)

                    self.adaptor.addChild(root_3, stream_expression.next())

                    self.adaptor.addChild(root_2, root_3)

                    self.adaptor.addChild(root_1, root_2)

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 31, doWhileStatement_StartIndex)

            pass

        return retval

    # $ANTLR end doWhileStatement

    class whileStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start whileStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:247:1: whileStatement : 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( CODE expression ) statement ) ;
    def whileStatement(self, ):

        retval = self.whileStatement_return()
        retval.start = self.input.LT(1)
        whileStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal198 = None
        LT199 = None
        char_literal200 = None
        LT201 = None
        LT203 = None
        char_literal204 = None
        LT205 = None
        expression202 = None

        statement206 = None


        string_literal198_tree = None
        LT199_tree = None
        char_literal200_tree = None
        LT201_tree = None
        LT203_tree = None
        char_literal204_tree = None
        LT205_tree = None
        stream_97 = RewriteRuleTokenStream(self.adaptor, "token 97")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 32):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:2: ( 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( CODE expression ) statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:4: 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement
                string_literal198 = self.input.LT(1)
                self.match(self.input, 97, self.FOLLOW_97_in_whileStatement1514)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_97.add(string_literal198)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:12: ( LT )*
                while True: #loop96
                    alt96 = 2
                    LA96_0 = self.input.LA(1)

                    if (LA96_0 == LT) :
                        alt96 = 1


                    if alt96 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT199 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1516)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT199)


                    else:
                        break #loop96


                char_literal200 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_whileStatement1519)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal200)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:20: ( LT )*
                while True: #loop97
                    alt97 = 2
                    LA97_0 = self.input.LA(1)

                    if (LA97_0 == LT) :
                        LA97_2 = self.input.LA(2)

                        if (self.synpred122()) :
                            alt97 = 1




                    if alt97 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT201 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1521)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT201)


                    else:
                        break #loop97


                self.following.append(self.FOLLOW_expression_in_whileStatement1524)
                expression202 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression202.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:35: ( LT )*
                while True: #loop98
                    alt98 = 2
                    LA98_0 = self.input.LA(1)

                    if (LA98_0 == LT) :
                        alt98 = 1


                    if alt98 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT203 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1526)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT203)


                    else:
                        break #loop98


                char_literal204 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_whileStatement1529)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal204)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:43: ( LT )*
                while True: #loop99
                    alt99 = 2
                    LA99_0 = self.input.LA(1)

                    if (LA99_0 == LT) :
                        LA99_2 = self.input.LA(2)

                        if (self.synpred124()) :
                            alt99 = 1




                    if alt99 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT205 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1531)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT205)


                    else:
                        break #loop99


                self.following.append(self.FOLLOW_statement_in_whileStatement1534)
                statement206 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement206.tree)
                # AST Rewrite
                # elements: statement, expression, 91
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 249:3: -> ^( SCOPE 'let' ^( CODE expression ) statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:249:6: ^( SCOPE 'let' ^( CODE expression ) statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(91, "91"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:249:20: ^( CODE expression )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_2)

                    self.adaptor.addChild(root_2, stream_expression.next())

                    self.adaptor.addChild(root_1, root_2)
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 32, whileStatement_StartIndex)

            pass

        return retval

    # $ANTLR end whileStatement

    class forStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:252:1: forStatement : 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* test= expression )? ( LT )* ';' ( ( LT )* update= expression )? ( LT )* ')' ( LT )* body= statement -> ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) ) ;
    def forStatement(self, ):

        retval = self.forStatement_return()
        retval.start = self.input.LT(1)
        forStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal207 = None
        LT208 = None
        char_literal209 = None
        LT210 = None
        LT212 = None
        char_literal213 = None
        LT214 = None
        LT215 = None
        char_literal216 = None
        LT217 = None
        LT218 = None
        char_literal219 = None
        LT220 = None
        test = None

        update = None

        body = None

        forStatementInitialiserPart211 = None


        string_literal207_tree = None
        LT208_tree = None
        char_literal209_tree = None
        LT210_tree = None
        LT212_tree = None
        char_literal213_tree = None
        LT214_tree = None
        LT215_tree = None
        char_literal216_tree = None
        LT217_tree = None
        LT218_tree = None
        char_literal219_tree = None
        LT220_tree = None
        stream_98 = RewriteRuleTokenStream(self.adaptor, "token 98")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_87 = RewriteRuleTokenStream(self.adaptor, "token 87")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_forStatementInitialiserPart = RewriteRuleSubtreeStream(self.adaptor, "rule forStatementInitialiserPart")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 33):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:2: ( 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* test= expression )? ( LT )* ';' ( ( LT )* update= expression )? ( LT )* ')' ( LT )* body= statement -> ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:4: 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* test= expression )? ( LT )* ';' ( ( LT )* update= expression )? ( LT )* ')' ( LT )* body= statement
                string_literal207 = self.input.LT(1)
                self.match(self.input, 98, self.FOLLOW_98_in_forStatement1564)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_98.add(string_literal207)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:10: ( LT )*
                while True: #loop100
                    alt100 = 2
                    LA100_0 = self.input.LA(1)

                    if (LA100_0 == LT) :
                        alt100 = 1


                    if alt100 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT208 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1566)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT208)


                    else:
                        break #loop100


                char_literal209 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_forStatement1569)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal209)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:18: ( ( LT )* forStatementInitialiserPart )?
                alt102 = 2
                alt102 = self.dfa102.predict(self.input)
                if alt102 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:19: ( LT )* forStatementInitialiserPart
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:19: ( LT )*
                    while True: #loop101
                        alt101 = 2
                        LA101_0 = self.input.LA(1)

                        if (LA101_0 == LT) :
                            LA101_2 = self.input.LA(2)

                            if (self.synpred126()) :
                                alt101 = 1




                        if alt101 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT210 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1572)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT210)


                        else:
                            break #loop101


                    self.following.append(self.FOLLOW_forStatementInitialiserPart_in_forStatement1575)
                    forStatementInitialiserPart211 = self.forStatementInitialiserPart()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_forStatementInitialiserPart.add(forStatementInitialiserPart211.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:53: ( LT )*
                while True: #loop103
                    alt103 = 2
                    LA103_0 = self.input.LA(1)

                    if (LA103_0 == LT) :
                        alt103 = 1


                    if alt103 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT212 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1579)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT212)


                    else:
                        break #loop103


                char_literal213 = self.input.LT(1)
                self.match(self.input, 87, self.FOLLOW_87_in_forStatement1582)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_87.add(char_literal213)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:61: ( ( LT )* test= expression )?
                alt105 = 2
                alt105 = self.dfa105.predict(self.input)
                if alt105 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:62: ( LT )* test= expression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:62: ( LT )*
                    while True: #loop104
                        alt104 = 2
                        LA104_0 = self.input.LA(1)

                        if (LA104_0 == LT) :
                            LA104_2 = self.input.LA(2)

                            if (self.synpred129()) :
                                alt104 = 1




                        if alt104 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT214 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1585)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT214)


                        else:
                            break #loop104


                    self.following.append(self.FOLLOW_expression_in_forStatement1590)
                    test = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(test.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:84: ( LT )*
                while True: #loop106
                    alt106 = 2
                    LA106_0 = self.input.LA(1)

                    if (LA106_0 == LT) :
                        alt106 = 1


                    if alt106 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT215 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1594)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT215)


                    else:
                        break #loop106


                char_literal216 = self.input.LT(1)
                self.match(self.input, 87, self.FOLLOW_87_in_forStatement1597)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_87.add(char_literal216)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:92: ( ( LT )* update= expression )?
                alt108 = 2
                alt108 = self.dfa108.predict(self.input)
                if alt108 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:93: ( LT )* update= expression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:93: ( LT )*
                    while True: #loop107
                        alt107 = 2
                        LA107_0 = self.input.LA(1)

                        if (LA107_0 == LT) :
                            LA107_2 = self.input.LA(2)

                            if (self.synpred132()) :
                                alt107 = 1




                        if alt107 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT217 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1600)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT217)


                        else:
                            break #loop107


                    self.following.append(self.FOLLOW_expression_in_forStatement1605)
                    update = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(update.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:117: ( LT )*
                while True: #loop109
                    alt109 = 2
                    LA109_0 = self.input.LA(1)

                    if (LA109_0 == LT) :
                        alt109 = 1


                    if alt109 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT218 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1609)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT218)


                    else:
                        break #loop109


                char_literal219 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_forStatement1612)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal219)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:125: ( LT )*
                while True: #loop110
                    alt110 = 2
                    LA110_0 = self.input.LA(1)

                    if (LA110_0 == LT) :
                        LA110_2 = self.input.LA(2)

                        if (self.synpred135()) :
                            alt110 = 1




                    if alt110 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT220 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1614)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT220)


                    else:
                        break #loop110


                self.following.append(self.FOLLOW_statement_in_forStatement1619)
                body = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(body.tree)
                # AST Rewrite
                # elements: forStatementInitialiserPart, 91, body, update, test
                # token labels: 
                # rule labels: update, body, retval, test
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if update is not None:
                        stream_update = RewriteRuleSubtreeStream(self.adaptor, "token update", update.tree)
                    else:
                        stream_update = RewriteRuleSubtreeStream(self.adaptor, "token update", None)


                    if body is not None:
                        stream_body = RewriteRuleSubtreeStream(self.adaptor, "token body", body.tree)
                    else:
                        stream_body = RewriteRuleSubtreeStream(self.adaptor, "token body", None)


                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    if test is not None:
                        stream_test = RewriteRuleSubtreeStream(self.adaptor, "token test", test.tree)
                    else:
                        stream_test = RewriteRuleSubtreeStream(self.adaptor, "token test", None)


                    root_0 = self.adaptor.nil()
                    # 254:3: -> ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:6: ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(91, "91"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:20: ^( CODE ( forStatementInitialiserPart )? )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:27: ( forStatementInitialiserPart )?
                    if stream_forStatementInitialiserPart.hasNext():
                        self.adaptor.addChild(root_2, stream_forStatementInitialiserPart.next())


                    stream_forStatementInitialiserPart.reset();

                    self.adaptor.addChild(root_1, root_2)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:57: ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CONDLOOP, "CONDLOOP"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:68: ( ^( TEST $test) )?
                    if stream_test.hasNext():
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:68: ^( TEST $test)
                        root_3 = self.adaptor.nil()
                        root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_3)

                        self.adaptor.addChild(root_3, stream_test.next())

                        self.adaptor.addChild(root_2, root_3)


                    stream_test.reset();
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:83: ^( CODE $body)
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                    self.adaptor.addChild(root_3, stream_body.next())

                    self.adaptor.addChild(root_2, root_3)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:97: ( ^( CODE $update) )?
                    if stream_update.hasNext():
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:97: ^( CODE $update)
                        root_3 = self.adaptor.nil()
                        root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                        self.adaptor.addChild(root_3, stream_update.next())

                        self.adaptor.addChild(root_2, root_3)


                    stream_update.reset();

                    self.adaptor.addChild(root_1, root_2)

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 33, forStatement_StartIndex)

            pass

        return retval

    # $ANTLR end forStatement

    class forStatementInitialiserPart_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forStatementInitialiserPart
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:257:1: forStatementInitialiserPart : ( expressionNoIn | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationListNoIn -> ^( VARDEFS $mod variableDeclarationListNoIn ) );
    def forStatementInitialiserPart(self, ):

        retval = self.forStatementInitialiserPart_return()
        retval.start = self.input.LT(1)
        forStatementInitialiserPart_StartIndex = self.input.index()
        root_0 = None

        mod = None
        LT222 = None
        expressionNoIn221 = None

        variableDeclarationListNoIn223 = None


        mod_tree = None
        LT222_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_89 = RewriteRuleTokenStream(self.adaptor, "token 89")
        stream_variableDeclarationListNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationListNoIn")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 34):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:258:2: ( expressionNoIn | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationListNoIn -> ^( VARDEFS $mod variableDeclarationListNoIn ) )
                alt113 = 2
                alt113 = self.dfa113.predict(self.input)
                if alt113 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:258:4: expressionNoIn
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_expressionNoIn_in_forStatementInitialiserPart1675)
                    expressionNoIn221 = self.expressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, expressionNoIn221.tree)


                elif alt113 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:259:4: (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationListNoIn
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:259:4: (mod= 'var' | mod= 'let' )
                    alt111 = 2
                    LA111_0 = self.input.LA(1)

                    if (LA111_0 == 89) :
                        alt111 = 1
                    elif (LA111_0 == 91) :
                        alt111 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("259:4: (mod= 'var' | mod= 'let' )", 111, 0, self.input)

                        raise nvae

                    if alt111 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:259:5: mod= 'var'
                        mod = self.input.LT(1)
                        self.match(self.input, 89, self.FOLLOW_89_in_forStatementInitialiserPart1683)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_89.add(mod)


                    elif alt111 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:259:15: mod= 'let'
                        mod = self.input.LT(1)
                        self.match(self.input, 91, self.FOLLOW_91_in_forStatementInitialiserPart1687)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_91.add(mod)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:259:26: ( LT )*
                    while True: #loop112
                        alt112 = 2
                        LA112_0 = self.input.LA(1)

                        if (LA112_0 == LT) :
                            alt112 = 1


                        if alt112 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT222 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatementInitialiserPart1690)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT222)


                        else:
                            break #loop112


                    self.following.append(self.FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1693)
                    variableDeclarationListNoIn223 = self.variableDeclarationListNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationListNoIn.add(variableDeclarationListNoIn223.tree)
                    # AST Rewrite
                    # elements: mod, variableDeclarationListNoIn
                    # token labels: mod
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_mod = RewriteRuleTokenStream(self.adaptor, "token mod", mod)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 260:3: -> ^( VARDEFS $mod variableDeclarationListNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:6: ^( VARDEFS $mod variableDeclarationListNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_1)

                        self.adaptor.addChild(root_1, stream_mod.next())
                        self.adaptor.addChild(root_1, stream_variableDeclarationListNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 34, forStatementInitialiserPart_StartIndex)

            pass

        return retval

    # $ANTLR end forStatementInitialiserPart

    class forInStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forInStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:263:1: forInStatement : 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement ) ;
    def forInStatement(self, ):

        retval = self.forInStatement_return()
        retval.start = self.input.LT(1)
        forInStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal224 = None
        LT225 = None
        string_literal226 = None
        LT227 = None
        char_literal228 = None
        LT229 = None
        LT231 = None
        string_literal232 = None
        LT233 = None
        LT235 = None
        char_literal236 = None
        LT237 = None
        forInStatementInitialiserPart230 = None

        expression234 = None

        statement238 = None


        string_literal224_tree = None
        LT225_tree = None
        string_literal226_tree = None
        LT227_tree = None
        char_literal228_tree = None
        LT229_tree = None
        LT231_tree = None
        string_literal232_tree = None
        LT233_tree = None
        LT235_tree = None
        char_literal236_tree = None
        LT237_tree = None
        stream_98 = RewriteRuleTokenStream(self.adaptor, "token 98")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_99 = RewriteRuleTokenStream(self.adaptor, "token 99")
        stream_100 = RewriteRuleTokenStream(self.adaptor, "token 100")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_forInStatementInitialiserPart = RewriteRuleSubtreeStream(self.adaptor, "rule forInStatementInitialiserPart")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 35):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:2: ( 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:4: 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement
                string_literal224 = self.input.LT(1)
                self.match(self.input, 98, self.FOLLOW_98_in_forInStatement1718)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_98.add(string_literal224)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:10: ( LT )*
                while True: #loop114
                    alt114 = 2
                    LA114_0 = self.input.LA(1)

                    if (LA114_0 == LT) :
                        LA114_2 = self.input.LA(2)

                        if (self.synpred139()) :
                            alt114 = 1




                    if alt114 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT225 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1720)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT225)


                    else:
                        break #loop114


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:14: ( 'each' )?
                alt115 = 2
                LA115_0 = self.input.LA(1)

                if (LA115_0 == 99) :
                    alt115 = 1
                if alt115 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: 'each'
                    string_literal226 = self.input.LT(1)
                    self.match(self.input, 99, self.FOLLOW_99_in_forInStatement1723)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_99.add(string_literal226)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:22: ( LT )*
                while True: #loop116
                    alt116 = 2
                    LA116_0 = self.input.LA(1)

                    if (LA116_0 == LT) :
                        alt116 = 1


                    if alt116 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT227 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1726)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT227)


                    else:
                        break #loop116


                char_literal228 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_forInStatement1729)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal228)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:30: ( LT )*
                while True: #loop117
                    alt117 = 2
                    LA117_0 = self.input.LA(1)

                    if (LA117_0 == LT) :
                        LA117_2 = self.input.LA(2)

                        if (self.synpred142()) :
                            alt117 = 1




                    if alt117 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT229 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1731)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT229)


                    else:
                        break #loop117


                self.following.append(self.FOLLOW_forInStatementInitialiserPart_in_forInStatement1734)
                forInStatementInitialiserPart230 = self.forInStatementInitialiserPart()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_forInStatementInitialiserPart.add(forInStatementInitialiserPart230.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:64: ( LT )*
                while True: #loop118
                    alt118 = 2
                    LA118_0 = self.input.LA(1)

                    if (LA118_0 == LT) :
                        alt118 = 1


                    if alt118 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT231 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1736)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT231)


                    else:
                        break #loop118


                string_literal232 = self.input.LT(1)
                self.match(self.input, 100, self.FOLLOW_100_in_forInStatement1739)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_100.add(string_literal232)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:73: ( LT )*
                while True: #loop119
                    alt119 = 2
                    LA119_0 = self.input.LA(1)

                    if (LA119_0 == LT) :
                        LA119_2 = self.input.LA(2)

                        if (self.synpred144()) :
                            alt119 = 1




                    if alt119 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT233 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1741)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT233)


                    else:
                        break #loop119


                self.following.append(self.FOLLOW_expression_in_forInStatement1744)
                expression234 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression234.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:88: ( LT )*
                while True: #loop120
                    alt120 = 2
                    LA120_0 = self.input.LA(1)

                    if (LA120_0 == LT) :
                        alt120 = 1


                    if alt120 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT235 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1746)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT235)


                    else:
                        break #loop120


                char_literal236 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_forInStatement1749)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal236)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:96: ( LT )*
                while True: #loop121
                    alt121 = 2
                    LA121_0 = self.input.LA(1)

                    if (LA121_0 == LT) :
                        LA121_2 = self.input.LA(2)

                        if (self.synpred146()) :
                            alt121 = 1




                    if alt121 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT237 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1751)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT237)


                    else:
                        break #loop121


                self.following.append(self.FOLLOW_statement_in_forInStatement1754)
                statement238 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement238.tree)
                # AST Rewrite
                # elements: statement, forInStatementInitialiserPart, 91, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 265:3: -> ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:6: ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(91, "91"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:20: ^( IN forInStatementInitialiserPart expression )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(IN, "IN"), root_2)

                    self.adaptor.addChild(root_2, stream_forInStatementInitialiserPart.next())
                    self.adaptor.addChild(root_2, stream_expression.next())

                    self.adaptor.addChild(root_1, root_2)
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 35, forInStatement_StartIndex)

            pass

        return retval

    # $ANTLR end forInStatement

    class forInStatementInitialiserPart_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forInStatementInitialiserPart
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:268:1: forInStatementInitialiserPart : ( leftHandSideExpression | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationNoIn -> ^( VARDEFS $mod variableDeclarationNoIn ) );
    def forInStatementInitialiserPart(self, ):

        retval = self.forInStatementInitialiserPart_return()
        retval.start = self.input.LT(1)
        forInStatementInitialiserPart_StartIndex = self.input.index()
        root_0 = None

        mod = None
        LT240 = None
        leftHandSideExpression239 = None

        variableDeclarationNoIn241 = None


        mod_tree = None
        LT240_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_89 = RewriteRuleTokenStream(self.adaptor, "token 89")
        stream_variableDeclarationNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationNoIn")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 36):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:269:2: ( leftHandSideExpression | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationNoIn -> ^( VARDEFS $mod variableDeclarationNoIn ) )
                alt124 = 2
                LA124_0 = self.input.LA(1)

                if ((LT <= LA124_0 <= RegularExpressionHacks) or LA124_0 == 72 or LA124_0 == 74 or LA124_0 == 78 or (80 <= LA124_0 <= 81) or (84 <= LA124_0 <= 86) or LA124_0 == 92 or LA124_0 == 99 or LA124_0 == 110 or (149 <= LA124_0 <= 154)) :
                    alt124 = 1
                elif (LA124_0 == 89 or LA124_0 == 91) :
                    alt124 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("268:1: forInStatementInitialiserPart : ( leftHandSideExpression | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationNoIn -> ^( VARDEFS $mod variableDeclarationNoIn ) );", 124, 0, self.input)

                    raise nvae

                if alt124 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:269:4: leftHandSideExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1786)
                    leftHandSideExpression239 = self.leftHandSideExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, leftHandSideExpression239.tree)


                elif alt124 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:4: (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationNoIn
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:4: (mod= 'var' | mod= 'let' )
                    alt122 = 2
                    LA122_0 = self.input.LA(1)

                    if (LA122_0 == 89) :
                        alt122 = 1
                    elif (LA122_0 == 91) :
                        alt122 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("270:4: (mod= 'var' | mod= 'let' )", 122, 0, self.input)

                        raise nvae

                    if alt122 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:5: mod= 'var'
                        mod = self.input.LT(1)
                        self.match(self.input, 89, self.FOLLOW_89_in_forInStatementInitialiserPart1794)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_89.add(mod)


                    elif alt122 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:15: mod= 'let'
                        mod = self.input.LT(1)
                        self.match(self.input, 91, self.FOLLOW_91_in_forInStatementInitialiserPart1798)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_91.add(mod)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:26: ( LT )*
                    while True: #loop123
                        alt123 = 2
                        LA123_0 = self.input.LA(1)

                        if (LA123_0 == LT) :
                            alt123 = 1


                        if alt123 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT240 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forInStatementInitialiserPart1801)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT240)


                        else:
                            break #loop123


                    self.following.append(self.FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1804)
                    variableDeclarationNoIn241 = self.variableDeclarationNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationNoIn.add(variableDeclarationNoIn241.tree)
                    # AST Rewrite
                    # elements: mod, variableDeclarationNoIn
                    # token labels: mod
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_mod = RewriteRuleTokenStream(self.adaptor, "token mod", mod)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 271:3: -> ^( VARDEFS $mod variableDeclarationNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:271:6: ^( VARDEFS $mod variableDeclarationNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_1)

                        self.adaptor.addChild(root_1, stream_mod.next())
                        self.adaptor.addChild(root_1, stream_variableDeclarationNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 36, forInStatementInitialiserPart_StartIndex)

            pass

        return retval

    # $ANTLR end forInStatementInitialiserPart

    class continueStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start continueStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:274:1: continueStatement : 'continue' ( identifier )? ( LT | ';' ) ;
    def continueStatement(self, ):

        retval = self.continueStatement_return()
        retval.start = self.input.LT(1)
        continueStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal242 = None
        set244 = None
        identifier243 = None


        string_literal242_tree = None
        set244_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 37):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:275:2: ( 'continue' ( identifier )? ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:275:4: 'continue' ( identifier )? ( LT | ';' )
                root_0 = self.adaptor.nil()

                string_literal242 = self.input.LT(1)
                self.match(self.input, 101, self.FOLLOW_101_in_continueStatement1828)
                if self.failed:
                    return retval

                string_literal242_tree = self.adaptor.createWithPayload(string_literal242)
                self.adaptor.addChild(root_0, string_literal242_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:275:15: ( identifier )?
                alt125 = 2
                LA125_0 = self.input.LA(1)

                if (LA125_0 == Identifier or (84 <= LA125_0 <= 86) or LA125_0 == 99 or (150 <= LA125_0 <= 151)) :
                    alt125 = 1
                if alt125 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: identifier
                    self.following.append(self.FOLLOW_identifier_in_continueStatement1830)
                    identifier243 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier243.tree)



                set244 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 87:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_continueStatement1833
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 37, continueStatement_StartIndex)

            pass

        return retval

    # $ANTLR end continueStatement

    class breakStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start breakStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:278:1: breakStatement : 'break' ( identifier )? ( LT | ';' ) ;
    def breakStatement(self, ):

        retval = self.breakStatement_return()
        retval.start = self.input.LT(1)
        breakStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal245 = None
        set247 = None
        identifier246 = None


        string_literal245_tree = None
        set247_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 38):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:279:2: ( 'break' ( identifier )? ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:279:4: 'break' ( identifier )? ( LT | ';' )
                root_0 = self.adaptor.nil()

                string_literal245 = self.input.LT(1)
                self.match(self.input, 102, self.FOLLOW_102_in_breakStatement1851)
                if self.failed:
                    return retval

                string_literal245_tree = self.adaptor.createWithPayload(string_literal245)
                self.adaptor.addChild(root_0, string_literal245_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:279:12: ( identifier )?
                alt126 = 2
                LA126_0 = self.input.LA(1)

                if (LA126_0 == Identifier or (84 <= LA126_0 <= 86) or LA126_0 == 99 or (150 <= LA126_0 <= 151)) :
                    alt126 = 1
                if alt126 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: identifier
                    self.following.append(self.FOLLOW_identifier_in_breakStatement1853)
                    identifier246 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier246.tree)



                set247 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 87:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_breakStatement1856
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 38, breakStatement_StartIndex)

            pass

        return retval

    # $ANTLR end breakStatement

    class returnStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start returnStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:282:1: returnStatement : 'return' ( expression )? ( LT | ';' ) -> ^( RETURN ( expression )? ) ;
    def returnStatement(self, ):

        retval = self.returnStatement_return()
        retval.start = self.input.LT(1)
        returnStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal248 = None
        LT250 = None
        char_literal251 = None
        expression249 = None


        string_literal248_tree = None
        LT250_tree = None
        char_literal251_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_87 = RewriteRuleTokenStream(self.adaptor, "token 87")
        stream_88 = RewriteRuleTokenStream(self.adaptor, "token 88")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 39):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:2: ( 'return' ( expression )? ( LT | ';' ) -> ^( RETURN ( expression )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:4: 'return' ( expression )? ( LT | ';' )
                string_literal248 = self.input.LT(1)
                self.match(self.input, 88, self.FOLLOW_88_in_returnStatement1874)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_88.add(string_literal248)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:13: ( expression )?
                alt127 = 2
                LA127_0 = self.input.LA(1)

                if ((StringLiteral <= LA127_0 <= RegularExpressionHacks) or LA127_0 == 72 or LA127_0 == 74 or LA127_0 == 76 or LA127_0 == 78 or (80 <= LA127_0 <= 81) or (84 <= LA127_0 <= 86) or (91 <= LA127_0 <= 92) or LA127_0 == 99 or LA127_0 == 110 or LA127_0 == 140 or (142 <= LA127_0 <= 154)) :
                    alt127 = 1
                elif (LA127_0 == LT) :
                    LA127_2 = self.input.LA(2)

                    if (self.synpred154()) :
                        alt127 = 1
                if alt127 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: expression
                    self.following.append(self.FOLLOW_expression_in_returnStatement1876)
                    expression249 = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(expression249.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:25: ( LT | ';' )
                alt128 = 2
                LA128_0 = self.input.LA(1)

                if (LA128_0 == LT) :
                    alt128 = 1
                elif (LA128_0 == 87) :
                    alt128 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("283:25: ( LT | ';' )", 128, 0, self.input)

                    raise nvae

                if alt128 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:26: LT
                    LT250 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_returnStatement1880)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT250)


                elif alt128 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:31: ';'
                    char_literal251 = self.input.LT(1)
                    self.match(self.input, 87, self.FOLLOW_87_in_returnStatement1884)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_87.add(char_literal251)



                # AST Rewrite
                # elements: expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 284:3: -> ^( RETURN ( expression )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:284:6: ^( RETURN ( expression )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(RETURN, "RETURN"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:284:15: ( expression )?
                    if stream_expression.hasNext():
                        self.adaptor.addChild(root_1, stream_expression.next())


                    stream_expression.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 39, returnStatement_StartIndex)

            pass

        return retval

    # $ANTLR end returnStatement

    class withStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start withStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:287:1: withStatement : 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WITH expression statement ) ;
    def withStatement(self, ):

        retval = self.withStatement_return()
        retval.start = self.input.LT(1)
        withStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal252 = None
        LT253 = None
        char_literal254 = None
        LT255 = None
        LT257 = None
        char_literal258 = None
        LT259 = None
        expression256 = None

        statement260 = None


        string_literal252_tree = None
        LT253_tree = None
        char_literal254_tree = None
        LT255_tree = None
        LT257_tree = None
        char_literal258_tree = None
        LT259_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_103 = RewriteRuleTokenStream(self.adaptor, "token 103")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 40):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:2: ( 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WITH expression statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:4: 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement
                string_literal252 = self.input.LT(1)
                self.match(self.input, 103, self.FOLLOW_103_in_withStatement1908)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_103.add(string_literal252)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:11: ( LT )*
                while True: #loop129
                    alt129 = 2
                    LA129_0 = self.input.LA(1)

                    if (LA129_0 == LT) :
                        alt129 = 1


                    if alt129 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT253 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1910)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT253)


                    else:
                        break #loop129


                char_literal254 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_withStatement1913)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal254)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:19: ( LT )*
                while True: #loop130
                    alt130 = 2
                    LA130_0 = self.input.LA(1)

                    if (LA130_0 == LT) :
                        LA130_2 = self.input.LA(2)

                        if (self.synpred157()) :
                            alt130 = 1




                    if alt130 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT255 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1915)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT255)


                    else:
                        break #loop130


                self.following.append(self.FOLLOW_expression_in_withStatement1918)
                expression256 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression256.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:34: ( LT )*
                while True: #loop131
                    alt131 = 2
                    LA131_0 = self.input.LA(1)

                    if (LA131_0 == LT) :
                        alt131 = 1


                    if alt131 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT257 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1920)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT257)


                    else:
                        break #loop131


                char_literal258 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_withStatement1923)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal258)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:42: ( LT )*
                while True: #loop132
                    alt132 = 2
                    LA132_0 = self.input.LA(1)

                    if (LA132_0 == LT) :
                        LA132_2 = self.input.LA(2)

                        if (self.synpred159()) :
                            alt132 = 1




                    if alt132 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT259 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1925)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT259)


                    else:
                        break #loop132


                self.following.append(self.FOLLOW_statement_in_withStatement1928)
                statement260 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement260.tree)
                # AST Rewrite
                # elements: expression, statement
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 289:3: -> ^( WITH expression statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:289:6: ^( WITH expression statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(WITH, "WITH"), root_1)

                    self.adaptor.addChild(root_1, stream_expression.next())
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 40, withStatement_StartIndex)

            pass

        return retval

    # $ANTLR end withStatement

    class letStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start letStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:292:1: letStatement : let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* statement -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement ) ;
    def letStatement(self, ):

        retval = self.letStatement_return()
        retval.start = self.input.LT(1)
        letStatement_StartIndex = self.input.index()
        root_0 = None

        let = None
        LT261 = None
        char_literal262 = None
        LT263 = None
        LT265 = None
        char_literal266 = None
        LT267 = None
        variableDeclarationList264 = None

        statement268 = None


        let_tree = None
        LT261_tree = None
        char_literal262_tree = None
        LT263_tree = None
        LT265_tree = None
        char_literal266_tree = None
        LT267_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 41):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:2: (let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* statement -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:4: let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* statement
                let = self.input.LT(1)
                self.match(self.input, 91, self.FOLLOW_91_in_letStatement1953)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_91.add(let)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:14: ( LT )*
                while True: #loop133
                    alt133 = 2
                    LA133_0 = self.input.LA(1)

                    if (LA133_0 == LT) :
                        alt133 = 1


                    if alt133 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT261 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement1955)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT261)


                    else:
                        break #loop133


                char_literal262 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_letStatement1958)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal262)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:22: ( LT )*
                while True: #loop134
                    alt134 = 2
                    LA134_0 = self.input.LA(1)

                    if (LA134_0 == LT) :
                        alt134 = 1


                    if alt134 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT263 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement1960)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT263)


                    else:
                        break #loop134


                self.following.append(self.FOLLOW_variableDeclarationList_in_letStatement1963)
                variableDeclarationList264 = self.variableDeclarationList()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_variableDeclarationList.add(variableDeclarationList264.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:50: ( LT )*
                while True: #loop135
                    alt135 = 2
                    LA135_0 = self.input.LA(1)

                    if (LA135_0 == LT) :
                        alt135 = 1


                    if alt135 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT265 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement1965)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT265)


                    else:
                        break #loop135


                char_literal266 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_letStatement1968)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal266)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:58: ( LT )*
                while True: #loop136
                    alt136 = 2
                    LA136_0 = self.input.LA(1)

                    if (LA136_0 == LT) :
                        LA136_2 = self.input.LA(2)

                        if (self.synpred163()) :
                            alt136 = 1




                    if alt136 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT267 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement1970)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT267)


                    else:
                        break #loop136


                self.following.append(self.FOLLOW_statement_in_letStatement1973)
                statement268 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement268.tree)
                # AST Rewrite
                # elements: let, variableDeclarationList, statement, let
                # token labels: let
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0
                    stream_let = RewriteRuleTokenStream(self.adaptor, "token let", let)

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 294:3: -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:294:6: ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, stream_let.next())
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:294:19: ^( VARDEFS $let variableDeclarationList )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_2)

                    self.adaptor.addChild(root_2, stream_let.next())
                    self.adaptor.addChild(root_2, stream_variableDeclarationList.next())

                    self.adaptor.addChild(root_1, root_2)
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 41, letStatement_StartIndex)

            pass

        return retval

    # $ANTLR end letStatement

    class labelledStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start labelledStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:297:1: labelledStatement : identifier ( LT )* ':' ( LT )* statement ;
    def labelledStatement(self, ):

        retval = self.labelledStatement_return()
        retval.start = self.input.LT(1)
        labelledStatement_StartIndex = self.input.index()
        root_0 = None

        LT270 = None
        char_literal271 = None
        LT272 = None
        identifier269 = None

        statement273 = None


        LT270_tree = None
        char_literal271_tree = None
        LT272_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 42):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:298:2: ( identifier ( LT )* ':' ( LT )* statement )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:298:4: identifier ( LT )* ':' ( LT )* statement
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_identifier_in_labelledStatement2006)
                identifier269 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, identifier269.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:298:17: ( LT )*
                while True: #loop137
                    alt137 = 2
                    LA137_0 = self.input.LA(1)

                    if (LA137_0 == LT) :
                        alt137 = 1


                    if alt137 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT270 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_labelledStatement2008)
                        if self.failed:
                            return retval


                    else:
                        break #loop137


                char_literal271 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_labelledStatement2012)
                if self.failed:
                    return retval

                char_literal271_tree = self.adaptor.createWithPayload(char_literal271)
                self.adaptor.addChild(root_0, char_literal271_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:298:26: ( LT )*
                while True: #loop138
                    alt138 = 2
                    LA138_0 = self.input.LA(1)

                    if (LA138_0 == LT) :
                        LA138_2 = self.input.LA(2)

                        if (self.synpred165()) :
                            alt138 = 1




                    if alt138 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT272 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_labelledStatement2014)
                        if self.failed:
                            return retval


                    else:
                        break #loop138


                self.following.append(self.FOLLOW_statement_in_labelledStatement2018)
                statement273 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statement273.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 42, labelledStatement_StartIndex)

            pass

        return retval

    # $ANTLR end labelledStatement

    class switchStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start switchStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:302:1: switchStatement : 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock -> ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) ) ;
    def switchStatement(self, ):

        retval = self.switchStatement_return()
        retval.start = self.input.LT(1)
        switchStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal274 = None
        LT275 = None
        char_literal276 = None
        LT277 = None
        LT279 = None
        char_literal280 = None
        LT281 = None
        expression278 = None

        caseBlock282 = None


        string_literal274_tree = None
        LT275_tree = None
        char_literal276_tree = None
        LT277_tree = None
        LT279_tree = None
        char_literal280_tree = None
        LT281_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_104 = RewriteRuleTokenStream(self.adaptor, "token 104")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_caseBlock = RewriteRuleSubtreeStream(self.adaptor, "rule caseBlock")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 43):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:2: ( 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock -> ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:4: 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock
                string_literal274 = self.input.LT(1)
                self.match(self.input, 104, self.FOLLOW_104_in_switchStatement2030)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_104.add(string_literal274)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:13: ( LT )*
                while True: #loop139
                    alt139 = 2
                    LA139_0 = self.input.LA(1)

                    if (LA139_0 == LT) :
                        alt139 = 1


                    if alt139 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT275 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2032)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT275)


                    else:
                        break #loop139


                char_literal276 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_switchStatement2035)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal276)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:21: ( LT )*
                while True: #loop140
                    alt140 = 2
                    LA140_0 = self.input.LA(1)

                    if (LA140_0 == LT) :
                        LA140_2 = self.input.LA(2)

                        if (self.synpred167()) :
                            alt140 = 1




                    if alt140 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT277 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2037)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT277)


                    else:
                        break #loop140


                self.following.append(self.FOLLOW_expression_in_switchStatement2040)
                expression278 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression278.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:36: ( LT )*
                while True: #loop141
                    alt141 = 2
                    LA141_0 = self.input.LA(1)

                    if (LA141_0 == LT) :
                        alt141 = 1


                    if alt141 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT279 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2042)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT279)


                    else:
                        break #loop141


                char_literal280 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_switchStatement2045)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal280)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:44: ( LT )*
                while True: #loop142
                    alt142 = 2
                    LA142_0 = self.input.LA(1)

                    if (LA142_0 == LT) :
                        alt142 = 1


                    if alt142 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT281 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2047)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT281)


                    else:
                        break #loop142


                self.following.append(self.FOLLOW_caseBlock_in_switchStatement2050)
                caseBlock282 = self.caseBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_caseBlock.add(caseBlock282.tree)
                # AST Rewrite
                # elements: caseBlock, 91, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 304:3: -> ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:304:6: ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(91, "91"))
                    self.adaptor.addChild(root_1, self.adaptor.createFromType(NONE, "NONE"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:304:25: ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(TESTVAL, "TESTVAL"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:304:35: ^( CODE expression )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                    self.adaptor.addChild(root_3, stream_expression.next())

                    self.adaptor.addChild(root_2, root_3)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:304:54: ^( COND caseBlock )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(COND, "COND"), root_3)

                    self.adaptor.addChild(root_3, stream_caseBlock.next())

                    self.adaptor.addChild(root_2, root_3)

                    self.adaptor.addChild(root_1, root_2)

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 43, switchStatement_StartIndex)

            pass

        return retval

    # $ANTLR end switchStatement

    class caseBlock_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start caseBlock
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:308:1: caseBlock : '{' ( ( LT )* caseClause )* ( ( LT )* defaultClause ( ( LT )* caseClause )* )? ( LT )* '}' -> ( caseClause )+ ( defaultClause )? ;
    def caseBlock(self, ):

        retval = self.caseBlock_return()
        retval.start = self.input.LT(1)
        caseBlock_StartIndex = self.input.index()
        root_0 = None

        char_literal283 = None
        LT284 = None
        LT286 = None
        LT288 = None
        LT290 = None
        char_literal291 = None
        caseClause285 = None

        defaultClause287 = None

        caseClause289 = None


        char_literal283_tree = None
        LT284_tree = None
        LT286_tree = None
        LT288_tree = None
        LT290_tree = None
        char_literal291_tree = None
        stream_79 = RewriteRuleTokenStream(self.adaptor, "token 79")
        stream_78 = RewriteRuleTokenStream(self.adaptor, "token 78")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_caseClause = RewriteRuleSubtreeStream(self.adaptor, "rule caseClause")
        stream_defaultClause = RewriteRuleSubtreeStream(self.adaptor, "rule defaultClause")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 44):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:2: ( '{' ( ( LT )* caseClause )* ( ( LT )* defaultClause ( ( LT )* caseClause )* )? ( LT )* '}' -> ( caseClause )+ ( defaultClause )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:4: '{' ( ( LT )* caseClause )* ( ( LT )* defaultClause ( ( LT )* caseClause )* )? ( LT )* '}'
                char_literal283 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_caseBlock2090)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_78.add(char_literal283)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:8: ( ( LT )* caseClause )*
                while True: #loop144
                    alt144 = 2
                    alt144 = self.dfa144.predict(self.input)
                    if alt144 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:9: ( LT )* caseClause
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:9: ( LT )*
                        while True: #loop143
                            alt143 = 2
                            LA143_0 = self.input.LA(1)

                            if (LA143_0 == LT) :
                                alt143 = 1


                            if alt143 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT284 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2093)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT284)


                            else:
                                break #loop143


                        self.following.append(self.FOLLOW_caseClause_in_caseBlock2096)
                        caseClause285 = self.caseClause()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_caseClause.add(caseClause285.tree)


                    else:
                        break #loop144


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:26: ( ( LT )* defaultClause ( ( LT )* caseClause )* )?
                alt148 = 2
                alt148 = self.dfa148.predict(self.input)
                if alt148 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:27: ( LT )* defaultClause ( ( LT )* caseClause )*
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:27: ( LT )*
                    while True: #loop145
                        alt145 = 2
                        LA145_0 = self.input.LA(1)

                        if (LA145_0 == LT) :
                            alt145 = 1


                        if alt145 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT286 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2101)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT286)


                        else:
                            break #loop145


                    self.following.append(self.FOLLOW_defaultClause_in_caseBlock2104)
                    defaultClause287 = self.defaultClause()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_defaultClause.add(defaultClause287.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:45: ( ( LT )* caseClause )*
                    while True: #loop147
                        alt147 = 2
                        alt147 = self.dfa147.predict(self.input)
                        if alt147 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:46: ( LT )* caseClause
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:46: ( LT )*
                            while True: #loop146
                                alt146 = 2
                                LA146_0 = self.input.LA(1)

                                if (LA146_0 == LT) :
                                    alt146 = 1


                                if alt146 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT288 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2107)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT288)


                                else:
                                    break #loop146


                            self.following.append(self.FOLLOW_caseClause_in_caseBlock2110)
                            caseClause289 = self.caseClause()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_caseClause.add(caseClause289.tree)


                        else:
                            break #loop147





                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:65: ( LT )*
                while True: #loop149
                    alt149 = 2
                    LA149_0 = self.input.LA(1)

                    if (LA149_0 == LT) :
                        alt149 = 1


                    if alt149 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT290 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2116)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT290)


                    else:
                        break #loop149


                char_literal291 = self.input.LT(1)
                self.match(self.input, 79, self.FOLLOW_79_in_caseBlock2119)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_79.add(char_literal291)
                # AST Rewrite
                # elements: defaultClause, caseClause
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 310:3: -> ( caseClause )+ ( defaultClause )?
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:6: ( caseClause )+
                    if not (stream_caseClause.hasNext()):
                        raise RewriteEarlyExitException()

                    while stream_caseClause.hasNext():
                        self.adaptor.addChild(root_0, stream_caseClause.next())


                    stream_caseClause.reset()
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:18: ( defaultClause )?
                    if stream_defaultClause.hasNext():
                        self.adaptor.addChild(root_0, stream_defaultClause.next())


                    stream_defaultClause.reset();






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 44, caseBlock_StartIndex)

            pass

        return retval

    # $ANTLR end caseBlock

    class caseClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start caseClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:314:1: caseClause : 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )? -> ^( TEST expression ) ^( CODE ( statementList )? ) ;
    def caseClause(self, ):

        retval = self.caseClause_return()
        retval.start = self.input.LT(1)
        caseClause_StartIndex = self.input.index()
        root_0 = None

        string_literal292 = None
        LT293 = None
        LT295 = None
        char_literal296 = None
        LT297 = None
        expression294 = None

        statementList298 = None


        string_literal292_tree = None
        LT293_tree = None
        LT295_tree = None
        char_literal296_tree = None
        LT297_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_105 = RewriteRuleTokenStream(self.adaptor, "token 105")
        stream_75 = RewriteRuleTokenStream(self.adaptor, "token 75")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statementList = RewriteRuleSubtreeStream(self.adaptor, "rule statementList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 45):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:2: ( 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )? -> ^( TEST expression ) ^( CODE ( statementList )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:4: 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )?
                string_literal292 = self.input.LT(1)
                self.match(self.input, 105, self.FOLLOW_105_in_caseClause2141)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_105.add(string_literal292)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:11: ( LT )*
                while True: #loop150
                    alt150 = 2
                    LA150_0 = self.input.LA(1)

                    if (LA150_0 == LT) :
                        LA150_2 = self.input.LA(2)

                        if (self.synpred177()) :
                            alt150 = 1




                    if alt150 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT293 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseClause2143)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT293)


                    else:
                        break #loop150


                self.following.append(self.FOLLOW_expression_in_caseClause2146)
                expression294 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression294.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:26: ( LT )*
                while True: #loop151
                    alt151 = 2
                    LA151_0 = self.input.LA(1)

                    if (LA151_0 == LT) :
                        alt151 = 1


                    if alt151 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT295 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseClause2148)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT295)


                    else:
                        break #loop151


                char_literal296 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_caseClause2151)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_75.add(char_literal296)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:34: ( LT )*
                while True: #loop152
                    alt152 = 2
                    LA152_0 = self.input.LA(1)

                    if (LA152_0 == LT) :
                        LA152_2 = self.input.LA(2)

                        if (self.synpred179()) :
                            alt152 = 1




                    if alt152 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT297 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseClause2153)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT297)


                    else:
                        break #loop152


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:38: ( statementList )?
                alt153 = 2
                LA153 = self.input.LA(1)
                if LA153 == StringLiteral or LA153 == XMLComment or LA153 == NumericLiteral or LA153 == Identifier or LA153 == RegularExpressionHacks or LA153 == 72 or LA153 == 74 or LA153 == 76 or LA153 == 78 or LA153 == 80 or LA153 == 81 or LA153 == 85 or LA153 == 86 or LA153 == 87 or LA153 == 88 or LA153 == 89 or LA153 == 90 or LA153 == 91 or LA153 == 92 or LA153 == 94 or LA153 == 96 or LA153 == 97 or LA153 == 98 or LA153 == 99 or LA153 == 101 or LA153 == 102 or LA153 == 103 or LA153 == 104 or LA153 == 106 or LA153 == 107 or LA153 == 110 or LA153 == 140 or LA153 == 142 or LA153 == 143 or LA153 == 144 or LA153 == 145 or LA153 == 146 or LA153 == 147 or LA153 == 148 or LA153 == 149 or LA153 == 150 or LA153 == 151 or LA153 == 152 or LA153 == 153 or LA153 == 154:
                    alt153 = 1
                elif LA153 == LT:
                    LA153_7 = self.input.LA(2)

                    if (self.synpred180()) :
                        alt153 = 1
                elif LA153 == 84:
                    LA153_10 = self.input.LA(2)

                    if (self.synpred180()) :
                        alt153 = 1
                if alt153 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
                    self.following.append(self.FOLLOW_statementList_in_caseClause2156)
                    statementList298 = self.statementList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementList.add(statementList298.tree)



                # AST Rewrite
                # elements: statementList, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 316:3: -> ^( TEST expression ) ^( CODE ( statementList )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:316:6: ^( TEST expression )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_1)

                    self.adaptor.addChild(root_1, stream_expression.next())

                    self.adaptor.addChild(root_0, root_1)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:316:25: ^( CODE ( statementList )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:316:32: ( statementList )?
                    if stream_statementList.hasNext():
                        self.adaptor.addChild(root_1, stream_statementList.next())


                    stream_statementList.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 45, caseClause_StartIndex)

            pass

        return retval

    # $ANTLR end caseClause

    class defaultClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start defaultClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:320:1: defaultClause : 'default' ( LT )* ':' ( LT )* ( statementList )? -> ^( CODE ( statementList )? ) ;
    def defaultClause(self, ):

        retval = self.defaultClause_return()
        retval.start = self.input.LT(1)
        defaultClause_StartIndex = self.input.index()
        root_0 = None

        string_literal299 = None
        LT300 = None
        char_literal301 = None
        LT302 = None
        statementList303 = None


        string_literal299_tree = None
        LT300_tree = None
        char_literal301_tree = None
        LT302_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_75 = RewriteRuleTokenStream(self.adaptor, "token 75")
        stream_statementList = RewriteRuleSubtreeStream(self.adaptor, "rule statementList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 46):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:2: ( 'default' ( LT )* ':' ( LT )* ( statementList )? -> ^( CODE ( statementList )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:4: 'default' ( LT )* ':' ( LT )* ( statementList )?
                string_literal299 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_defaultClause2187)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(string_literal299)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:14: ( LT )*
                while True: #loop154
                    alt154 = 2
                    LA154_0 = self.input.LA(1)

                    if (LA154_0 == LT) :
                        alt154 = 1


                    if alt154 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT300 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultClause2189)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT300)


                    else:
                        break #loop154


                char_literal301 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_defaultClause2192)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_75.add(char_literal301)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:22: ( LT )*
                while True: #loop155
                    alt155 = 2
                    LA155_0 = self.input.LA(1)

                    if (LA155_0 == LT) :
                        LA155_2 = self.input.LA(2)

                        if (self.synpred182()) :
                            alt155 = 1




                    if alt155 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT302 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultClause2194)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT302)


                    else:
                        break #loop155


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:26: ( statementList )?
                alt156 = 2
                alt156 = self.dfa156.predict(self.input)
                if alt156 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
                    self.following.append(self.FOLLOW_statementList_in_defaultClause2197)
                    statementList303 = self.statementList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementList.add(statementList303.tree)



                # AST Rewrite
                # elements: statementList
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 322:3: -> ^( CODE ( statementList )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:322:6: ^( CODE ( statementList )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:322:13: ( statementList )?
                    if stream_statementList.hasNext():
                        self.adaptor.addChild(root_1, stream_statementList.next())


                    stream_statementList.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 46, defaultClause_StartIndex)

            pass

        return retval

    # $ANTLR end defaultClause

    class throwStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start throwStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:325:1: throwStatement : 'throw' expression ( LT | ';' ) ;
    def throwStatement(self, ):

        retval = self.throwStatement_return()
        retval.start = self.input.LT(1)
        throwStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal304 = None
        set306 = None
        expression305 = None


        string_literal304_tree = None
        set306_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 47):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:326:2: ( 'throw' expression ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:326:4: 'throw' expression ( LT | ';' )
                root_0 = self.adaptor.nil()

                string_literal304 = self.input.LT(1)
                self.match(self.input, 106, self.FOLLOW_106_in_throwStatement2221)
                if self.failed:
                    return retval

                string_literal304_tree = self.adaptor.createWithPayload(string_literal304)
                self.adaptor.addChild(root_0, string_literal304_tree)

                self.following.append(self.FOLLOW_expression_in_throwStatement2223)
                expression305 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, expression305.tree)
                set306 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 87:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_throwStatement2225
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 47, throwStatement_StartIndex)

            pass

        return retval

    # $ANTLR end throwStatement

    class tryStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start tryStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:329:1: tryStatement : 'try' ( LT )* statementBlock ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? ) ;
    def tryStatement(self, ):

        retval = self.tryStatement_return()
        retval.start = self.input.LT(1)
        tryStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal307 = None
        LT308 = None
        LT310 = None
        LT313 = None
        statementBlock309 = None

        finallyClause311 = None

        catchClause312 = None

        finallyClause314 = None


        string_literal307_tree = None
        LT308_tree = None
        LT310_tree = None
        LT313_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 48):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:2: ( 'try' ( LT )* statementBlock ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:4: 'try' ( LT )* statementBlock ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? )
                root_0 = self.adaptor.nil()

                string_literal307 = self.input.LT(1)
                self.match(self.input, 107, self.FOLLOW_107_in_tryStatement2243)
                if self.failed:
                    return retval

                string_literal307_tree = self.adaptor.createWithPayload(string_literal307)
                self.adaptor.addChild(root_0, string_literal307_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:12: ( LT )*
                while True: #loop157
                    alt157 = 2
                    LA157_0 = self.input.LA(1)

                    if (LA157_0 == LT) :
                        alt157 = 1


                    if alt157 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT308 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_tryStatement2245)
                        if self.failed:
                            return retval


                    else:
                        break #loop157


                self.following.append(self.FOLLOW_statementBlock_in_tryStatement2249)
                statementBlock309 = self.statementBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statementBlock309.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:32: ( LT )*
                while True: #loop158
                    alt158 = 2
                    LA158_0 = self.input.LA(1)

                    if (LA158_0 == LT) :
                        alt158 = 1


                    if alt158 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT310 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_tryStatement2251)
                        if self.failed:
                            return retval


                    else:
                        break #loop158


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:35: ( finallyClause | catchClause ( ( LT )* finallyClause )? )
                alt161 = 2
                LA161_0 = self.input.LA(1)

                if (LA161_0 == 109) :
                    alt161 = 1
                elif (LA161_0 == 108) :
                    alt161 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("330:35: ( finallyClause | catchClause ( ( LT )* finallyClause )? )", 161, 0, self.input)

                    raise nvae

                if alt161 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:36: finallyClause
                    self.following.append(self.FOLLOW_finallyClause_in_tryStatement2256)
                    finallyClause311 = self.finallyClause()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, finallyClause311.tree)


                elif alt161 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:52: catchClause ( ( LT )* finallyClause )?
                    self.following.append(self.FOLLOW_catchClause_in_tryStatement2260)
                    catchClause312 = self.catchClause()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, catchClause312.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:64: ( ( LT )* finallyClause )?
                    alt160 = 2
                    alt160 = self.dfa160.predict(self.input)
                    if alt160 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:65: ( LT )* finallyClause
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:330:67: ( LT )*
                        while True: #loop159
                            alt159 = 2
                            LA159_0 = self.input.LA(1)

                            if (LA159_0 == LT) :
                                alt159 = 1


                            if alt159 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT313 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_tryStatement2263)
                                if self.failed:
                                    return retval


                            else:
                                break #loop159


                        self.following.append(self.FOLLOW_finallyClause_in_tryStatement2267)
                        finallyClause314 = self.finallyClause()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, finallyClause314.tree)









                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 48, tryStatement_StartIndex)

            pass

        return retval

    # $ANTLR end tryStatement

    class catchClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start catchClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:1: catchClause : 'catch' ( LT )* '(' ( LT )* identifier ( LT )* ')' ( LT )* statementBlock ;
    def catchClause(self, ):

        retval = self.catchClause_return()
        retval.start = self.input.LT(1)
        catchClause_StartIndex = self.input.index()
        root_0 = None

        string_literal315 = None
        LT316 = None
        char_literal317 = None
        LT318 = None
        LT320 = None
        char_literal321 = None
        LT322 = None
        identifier319 = None

        statementBlock323 = None


        string_literal315_tree = None
        LT316_tree = None
        char_literal317_tree = None
        LT318_tree = None
        LT320_tree = None
        char_literal321_tree = None
        LT322_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 49):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:2: ( 'catch' ( LT )* '(' ( LT )* identifier ( LT )* ')' ( LT )* statementBlock )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:4: 'catch' ( LT )* '(' ( LT )* identifier ( LT )* ')' ( LT )* statementBlock
                root_0 = self.adaptor.nil()

                string_literal315 = self.input.LT(1)
                self.match(self.input, 108, self.FOLLOW_108_in_catchClause2288)
                if self.failed:
                    return retval

                string_literal315_tree = self.adaptor.createWithPayload(string_literal315)
                self.adaptor.addChild(root_0, string_literal315_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:14: ( LT )*
                while True: #loop162
                    alt162 = 2
                    LA162_0 = self.input.LA(1)

                    if (LA162_0 == LT) :
                        alt162 = 1


                    if alt162 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT316 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2290)
                        if self.failed:
                            return retval


                    else:
                        break #loop162


                char_literal317 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_catchClause2294)
                if self.failed:
                    return retval

                char_literal317_tree = self.adaptor.createWithPayload(char_literal317)
                self.adaptor.addChild(root_0, char_literal317_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:23: ( LT )*
                while True: #loop163
                    alt163 = 2
                    LA163_0 = self.input.LA(1)

                    if (LA163_0 == LT) :
                        alt163 = 1


                    if alt163 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT318 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2296)
                        if self.failed:
                            return retval


                    else:
                        break #loop163


                self.following.append(self.FOLLOW_identifier_in_catchClause2300)
                identifier319 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, identifier319.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:39: ( LT )*
                while True: #loop164
                    alt164 = 2
                    LA164_0 = self.input.LA(1)

                    if (LA164_0 == LT) :
                        alt164 = 1


                    if alt164 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT320 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2302)
                        if self.failed:
                            return retval


                    else:
                        break #loop164


                char_literal321 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_catchClause2306)
                if self.failed:
                    return retval

                char_literal321_tree = self.adaptor.createWithPayload(char_literal321)
                self.adaptor.addChild(root_0, char_literal321_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:48: ( LT )*
                while True: #loop165
                    alt165 = 2
                    LA165_0 = self.input.LA(1)

                    if (LA165_0 == LT) :
                        alt165 = 1


                    if alt165 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT322 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2308)
                        if self.failed:
                            return retval


                    else:
                        break #loop165


                self.following.append(self.FOLLOW_statementBlock_in_catchClause2312)
                statementBlock323 = self.statementBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statementBlock323.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 49, catchClause_StartIndex)

            pass

        return retval

    # $ANTLR end catchClause

    class finallyClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start finallyClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:337:1: finallyClause : 'finally' ( LT )* statementBlock ;
    def finallyClause(self, ):

        retval = self.finallyClause_return()
        retval.start = self.input.LT(1)
        finallyClause_StartIndex = self.input.index()
        root_0 = None

        string_literal324 = None
        LT325 = None
        statementBlock326 = None


        string_literal324_tree = None
        LT325_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 50):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:338:2: ( 'finally' ( LT )* statementBlock )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:338:4: 'finally' ( LT )* statementBlock
                root_0 = self.adaptor.nil()

                string_literal324 = self.input.LT(1)
                self.match(self.input, 109, self.FOLLOW_109_in_finallyClause2324)
                if self.failed:
                    return retval

                string_literal324_tree = self.adaptor.createWithPayload(string_literal324)
                self.adaptor.addChild(root_0, string_literal324_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:338:16: ( LT )*
                while True: #loop166
                    alt166 = 2
                    LA166_0 = self.input.LA(1)

                    if (LA166_0 == LT) :
                        alt166 = 1


                    if alt166 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT325 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_finallyClause2326)
                        if self.failed:
                            return retval


                    else:
                        break #loop166


                self.following.append(self.FOLLOW_statementBlock_in_finallyClause2330)
                statementBlock326 = self.statementBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statementBlock326.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 50, finallyClause_StartIndex)

            pass

        return retval

    # $ANTLR end finallyClause

    class expression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start expression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:1: expression : assignmentExpression ( ( LT )* ',' ( LT )* assignmentExpression )* ;
    def expression(self, ):

        retval = self.expression_return()
        retval.start = self.input.LT(1)
        expression_StartIndex = self.input.index()
        root_0 = None

        LT328 = None
        char_literal329 = None
        LT330 = None
        assignmentExpression327 = None

        assignmentExpression331 = None


        LT328_tree = None
        char_literal329_tree = None
        LT330_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 51):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:2: ( assignmentExpression ( ( LT )* ',' ( LT )* assignmentExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:4: assignmentExpression ( ( LT )* ',' ( LT )* assignmentExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_assignmentExpression_in_expression2342)
                assignmentExpression327 = self.assignmentExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, assignmentExpression327.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:25: ( ( LT )* ',' ( LT )* assignmentExpression )*
                while True: #loop169
                    alt169 = 2
                    alt169 = self.dfa169.predict(self.input)
                    if alt169 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:26: ( LT )* ',' ( LT )* assignmentExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:28: ( LT )*
                        while True: #loop167
                            alt167 = 2
                            LA167_0 = self.input.LA(1)

                            if (LA167_0 == LT) :
                                alt167 = 1


                            if alt167 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT328 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expression2345)
                                if self.failed:
                                    return retval


                            else:
                                break #loop167


                        char_literal329 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_expression2349)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:38: ( LT )*
                        while True: #loop168
                            alt168 = 2
                            LA168_0 = self.input.LA(1)

                            if (LA168_0 == LT) :
                                LA168_2 = self.input.LA(2)

                                if (self.synpred196()) :
                                    alt168 = 1




                            if alt168 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT330 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expression2352)
                                if self.failed:
                                    return retval


                            else:
                                break #loop168


                        self.following.append(self.FOLLOW_assignmentExpression_in_expression2356)
                        assignmentExpression331 = self.assignmentExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, assignmentExpression331.tree)


                    else:
                        break #loop169





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 51, expression_StartIndex)

            pass

        return retval

    # $ANTLR end expression

    class expressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start expressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:346:1: expressionNoIn : assignmentExpressionNoIn ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )* ;
    def expressionNoIn(self, ):

        retval = self.expressionNoIn_return()
        retval.start = self.input.LT(1)
        expressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT333 = None
        char_literal334 = None
        LT335 = None
        assignmentExpressionNoIn332 = None

        assignmentExpressionNoIn336 = None


        LT333_tree = None
        char_literal334_tree = None
        LT335_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 52):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:2: ( assignmentExpressionNoIn ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:4: assignmentExpressionNoIn ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2370)
                assignmentExpressionNoIn332 = self.assignmentExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, assignmentExpressionNoIn332.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:29: ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )*
                while True: #loop172
                    alt172 = 2
                    alt172 = self.dfa172.predict(self.input)
                    if alt172 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:30: ( LT )* ',' ( LT )* assignmentExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:32: ( LT )*
                        while True: #loop170
                            alt170 = 2
                            LA170_0 = self.input.LA(1)

                            if (LA170_0 == LT) :
                                alt170 = 1


                            if alt170 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT333 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expressionNoIn2373)
                                if self.failed:
                                    return retval


                            else:
                                break #loop170


                        char_literal334 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_expressionNoIn2377)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:42: ( LT )*
                        while True: #loop171
                            alt171 = 2
                            LA171_0 = self.input.LA(1)

                            if (LA171_0 == LT) :
                                LA171_2 = self.input.LA(2)

                                if (self.synpred199()) :
                                    alt171 = 1




                            if alt171 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT335 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expressionNoIn2380)
                                if self.failed:
                                    return retval


                            else:
                                break #loop171


                        self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2384)
                        assignmentExpressionNoIn336 = self.assignmentExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, assignmentExpressionNoIn336.tree)


                    else:
                        break #loop172





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 52, expressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end expressionNoIn

    class assignmentExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start assignmentExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );
    def assignmentExpression(self, ):

        retval = self.assignmentExpression_return()
        retval.start = self.input.LT(1)
        assignmentExpression_StartIndex = self.input.index()
        root_0 = None

        let = None
        LT338 = None
        LT340 = None
        LT342 = None
        char_literal343 = None
        LT344 = None
        LT346 = None
        char_literal347 = None
        LT348 = None
        leftHandSideExpression337 = None

        assignmentOperator339 = None

        assignmentExpression341 = None

        variableDeclarationList345 = None

        assignmentExpression349 = None

        conditionalExpression350 = None


        let_tree = None
        LT338_tree = None
        LT340_tree = None
        LT342_tree = None
        char_literal343_tree = None
        LT344_tree = None
        LT346_tree = None
        char_literal347_tree = None
        LT348_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_assignmentOperator = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentOperator")
        stream_leftHandSideExpression = RewriteRuleSubtreeStream(self.adaptor, "rule leftHandSideExpression")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 53):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:2: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression )
                alt179 = 3
                LA179 = self.input.LA(1)
                if LA179 == 149:
                    LA179_1 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 1, self.input)

                        raise nvae

                elif LA179 == LT:
                    LA179_2 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 2, self.input)

                        raise nvae

                elif LA179 == 72:
                    LA179_3 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 3, self.input)

                        raise nvae

                elif LA179 == 78:
                    LA179_4 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 4, self.input)

                        raise nvae

                elif LA179 == XMLComment:
                    LA179_5 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 5, self.input)

                        raise nvae

                elif LA179 == Identifier or LA179 == 84 or LA179 == 85 or LA179 == 86 or LA179 == 99 or LA179 == 150 or LA179 == 151:
                    LA179_6 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 6, self.input)

                        raise nvae

                elif LA179 == 152:
                    LA179_7 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 7, self.input)

                        raise nvae

                elif LA179 == 153:
                    LA179_8 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 8, self.input)

                        raise nvae

                elif LA179 == 154:
                    LA179_9 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 9, self.input)

                        raise nvae

                elif LA179 == StringLiteral:
                    LA179_10 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 10, self.input)

                        raise nvae

                elif LA179 == NumericLiteral:
                    LA179_11 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 11, self.input)

                        raise nvae

                elif LA179 == 74:
                    LA179_12 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 12, self.input)

                        raise nvae

                elif LA179 == RegularExpressionHacks:
                    LA179_13 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 13, self.input)

                        raise nvae

                elif LA179 == 92:
                    LA179_14 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 14, self.input)

                        raise nvae

                elif LA179 == 81:
                    LA179_15 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 15, self.input)

                        raise nvae

                elif LA179 == 80:
                    LA179_16 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 16, self.input)

                        raise nvae

                elif LA179 == 110:
                    LA179_17 = self.input.LA(2)

                    if (self.synpred203()) :
                        alt179 = 1
                    elif (True) :
                        alt179 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 17, self.input)

                        raise nvae

                elif LA179 == 91:
                    alt179 = 2
                elif LA179 == 76 or LA179 == 140 or LA179 == 142 or LA179 == 143 or LA179 == 144 or LA179 == 145 or LA179 == 146 or LA179 == 147 or LA179 == 148:
                    alt179 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("350:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression );", 179, 0, self.input)

                    raise nvae

                if alt179 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression
                    self.following.append(self.FOLLOW_leftHandSideExpression_in_assignmentExpression2398)
                    leftHandSideExpression337 = self.leftHandSideExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_leftHandSideExpression.add(leftHandSideExpression337.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:27: ( LT )*
                    while True: #loop173
                        alt173 = 2
                        LA173_0 = self.input.LA(1)

                        if (LA173_0 == LT) :
                            alt173 = 1


                        if alt173 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT338 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2400)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT338)


                        else:
                            break #loop173


                    self.following.append(self.FOLLOW_assignmentOperator_in_assignmentExpression2403)
                    assignmentOperator339 = self.assignmentOperator()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentOperator.add(assignmentOperator339.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:50: ( LT )*
                    while True: #loop174
                        alt174 = 2
                        LA174_0 = self.input.LA(1)

                        if (LA174_0 == LT) :
                            LA174_2 = self.input.LA(2)

                            if (self.synpred202()) :
                                alt174 = 1




                        if alt174 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT340 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2405)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT340)


                        else:
                            break #loop174


                    self.following.append(self.FOLLOW_assignmentExpression_in_assignmentExpression2408)
                    assignmentExpression341 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression341.tree)
                    # AST Rewrite
                    # elements: assignmentExpression, assignmentOperator, leftHandSideExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 352:3: -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:352:6: ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ASSIGN, "ASSIGN"), root_1)

                        self.adaptor.addChild(root_1, stream_leftHandSideExpression.next())
                        self.adaptor.addChild(root_1, stream_assignmentOperator.next())
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt179 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:353:4: let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression
                    let = self.input.LT(1)
                    self.match(self.input, 91, self.FOLLOW_91_in_assignmentExpression2429)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_91.add(let)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:353:14: ( LT )*
                    while True: #loop175
                        alt175 = 2
                        LA175_0 = self.input.LA(1)

                        if (LA175_0 == LT) :
                            alt175 = 1


                        if alt175 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT342 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2431)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT342)


                        else:
                            break #loop175


                    char_literal343 = self.input.LT(1)
                    self.match(self.input, 81, self.FOLLOW_81_in_assignmentExpression2434)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_81.add(char_literal343)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:353:22: ( LT )*
                    while True: #loop176
                        alt176 = 2
                        LA176_0 = self.input.LA(1)

                        if (LA176_0 == LT) :
                            alt176 = 1


                        if alt176 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT344 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2436)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT344)


                        else:
                            break #loop176


                    self.following.append(self.FOLLOW_variableDeclarationList_in_assignmentExpression2439)
                    variableDeclarationList345 = self.variableDeclarationList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationList.add(variableDeclarationList345.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:353:50: ( LT )*
                    while True: #loop177
                        alt177 = 2
                        LA177_0 = self.input.LA(1)

                        if (LA177_0 == LT) :
                            alt177 = 1


                        if alt177 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT346 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2441)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT346)


                        else:
                            break #loop177


                    char_literal347 = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_assignmentExpression2444)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_83.add(char_literal347)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:353:58: ( LT )*
                    while True: #loop178
                        alt178 = 2
                        LA178_0 = self.input.LA(1)

                        if (LA178_0 == LT) :
                            LA178_2 = self.input.LA(2)

                            if (self.synpred207()) :
                                alt178 = 1




                        if alt178 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT348 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2446)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT348)


                        else:
                            break #loop178


                    self.following.append(self.FOLLOW_assignmentExpression_in_assignmentExpression2449)
                    assignmentExpression349 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression349.tree)
                    # AST Rewrite
                    # elements: let, variableDeclarationList, let, assignmentExpression
                    # token labels: let
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_let = RewriteRuleTokenStream(self.adaptor, "token let", let)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 354:3: -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:354:6: ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, stream_let.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:354:19: ^( VARDEFS $let variableDeclarationList )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_2)

                        self.adaptor.addChild(root_2, stream_let.next())
                        self.adaptor.addChild(root_2, stream_variableDeclarationList.next())

                        self.adaptor.addChild(root_1, root_2)
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt179 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:355:4: conditionalExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_conditionalExpression_in_assignmentExpression2476)
                    conditionalExpression350 = self.conditionalExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, conditionalExpression350.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 53, assignmentExpression_StartIndex)

            pass

        return retval

    # $ANTLR end assignmentExpression

    class assignmentExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start assignmentExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );
    def assignmentExpressionNoIn(self, ):

        retval = self.assignmentExpressionNoIn_return()
        retval.start = self.input.LT(1)
        assignmentExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        let = None
        LT352 = None
        LT354 = None
        LT356 = None
        char_literal357 = None
        LT358 = None
        LT360 = None
        char_literal361 = None
        LT362 = None
        leftHandSideExpression351 = None

        assignmentOperator353 = None

        assignmentExpressionNoIn355 = None

        variableDeclarationList359 = None

        assignmentExpressionNoIn363 = None

        conditionalExpressionNoIn364 = None


        let_tree = None
        LT352_tree = None
        LT354_tree = None
        LT356_tree = None
        char_literal357_tree = None
        LT358_tree = None
        LT360_tree = None
        char_literal361_tree = None
        LT362_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_assignmentOperator = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentOperator")
        stream_assignmentExpressionNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpressionNoIn")
        stream_leftHandSideExpression = RewriteRuleSubtreeStream(self.adaptor, "rule leftHandSideExpression")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 54):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:2: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn )
                alt186 = 3
                LA186 = self.input.LA(1)
                if LA186 == 149:
                    LA186_1 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 1, self.input)

                        raise nvae

                elif LA186 == LT:
                    LA186_2 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 2, self.input)

                        raise nvae

                elif LA186 == 72:
                    LA186_3 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 3, self.input)

                        raise nvae

                elif LA186 == 78:
                    LA186_4 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 4, self.input)

                        raise nvae

                elif LA186 == XMLComment:
                    LA186_5 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 5, self.input)

                        raise nvae

                elif LA186 == Identifier or LA186 == 84 or LA186 == 85 or LA186 == 86 or LA186 == 99 or LA186 == 150 or LA186 == 151:
                    LA186_6 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 6, self.input)

                        raise nvae

                elif LA186 == 152:
                    LA186_7 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 7, self.input)

                        raise nvae

                elif LA186 == 153:
                    LA186_8 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 8, self.input)

                        raise nvae

                elif LA186 == 154:
                    LA186_9 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 9, self.input)

                        raise nvae

                elif LA186 == StringLiteral:
                    LA186_10 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 10, self.input)

                        raise nvae

                elif LA186 == NumericLiteral:
                    LA186_11 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 11, self.input)

                        raise nvae

                elif LA186 == 74:
                    LA186_12 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 12, self.input)

                        raise nvae

                elif LA186 == RegularExpressionHacks:
                    LA186_13 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 13, self.input)

                        raise nvae

                elif LA186 == 92:
                    LA186_14 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 14, self.input)

                        raise nvae

                elif LA186 == 81:
                    LA186_15 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 15, self.input)

                        raise nvae

                elif LA186 == 80:
                    LA186_16 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 16, self.input)

                        raise nvae

                elif LA186 == 110:
                    LA186_17 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt186 = 1
                    elif (True) :
                        alt186 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 17, self.input)

                        raise nvae

                elif LA186 == 91:
                    alt186 = 2
                elif LA186 == 76 or LA186 == 140 or LA186 == 142 or LA186 == 143 or LA186 == 144 or LA186 == 145 or LA186 == 146 or LA186 == 147 or LA186 == 148:
                    alt186 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("358:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 186, 0, self.input)

                    raise nvae

                if alt186 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn
                    self.following.append(self.FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2488)
                    leftHandSideExpression351 = self.leftHandSideExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_leftHandSideExpression.add(leftHandSideExpression351.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:27: ( LT )*
                    while True: #loop180
                        alt180 = 2
                        LA180_0 = self.input.LA(1)

                        if (LA180_0 == LT) :
                            alt180 = 1


                        if alt180 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT352 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2490)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT352)


                        else:
                            break #loop180


                    self.following.append(self.FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2493)
                    assignmentOperator353 = self.assignmentOperator()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentOperator.add(assignmentOperator353.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:50: ( LT )*
                    while True: #loop181
                        alt181 = 2
                        LA181_0 = self.input.LA(1)

                        if (LA181_0 == LT) :
                            LA181_2 = self.input.LA(2)

                            if (self.synpred210()) :
                                alt181 = 1




                        if alt181 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT354 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2495)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT354)


                        else:
                            break #loop181


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2498)
                    assignmentExpressionNoIn355 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpressionNoIn.add(assignmentExpressionNoIn355.tree)
                    # AST Rewrite
                    # elements: leftHandSideExpression, assignmentExpressionNoIn, assignmentOperator
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 360:3: -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:6: ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ASSIGN, "ASSIGN"), root_1)

                        self.adaptor.addChild(root_1, stream_leftHandSideExpression.next())
                        self.adaptor.addChild(root_1, stream_assignmentOperator.next())
                        self.adaptor.addChild(root_1, stream_assignmentExpressionNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt186 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:361:4: let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn
                    let = self.input.LT(1)
                    self.match(self.input, 91, self.FOLLOW_91_in_assignmentExpressionNoIn2519)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_91.add(let)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:361:14: ( LT )*
                    while True: #loop182
                        alt182 = 2
                        LA182_0 = self.input.LA(1)

                        if (LA182_0 == LT) :
                            alt182 = 1


                        if alt182 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT356 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2521)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT356)


                        else:
                            break #loop182


                    char_literal357 = self.input.LT(1)
                    self.match(self.input, 81, self.FOLLOW_81_in_assignmentExpressionNoIn2524)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_81.add(char_literal357)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:361:22: ( LT )*
                    while True: #loop183
                        alt183 = 2
                        LA183_0 = self.input.LA(1)

                        if (LA183_0 == LT) :
                            alt183 = 1


                        if alt183 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT358 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2526)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT358)


                        else:
                            break #loop183


                    self.following.append(self.FOLLOW_variableDeclarationList_in_assignmentExpressionNoIn2529)
                    variableDeclarationList359 = self.variableDeclarationList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationList.add(variableDeclarationList359.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:361:50: ( LT )*
                    while True: #loop184
                        alt184 = 2
                        LA184_0 = self.input.LA(1)

                        if (LA184_0 == LT) :
                            alt184 = 1


                        if alt184 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT360 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2531)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT360)


                        else:
                            break #loop184


                    char_literal361 = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_assignmentExpressionNoIn2534)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_83.add(char_literal361)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:361:58: ( LT )*
                    while True: #loop185
                        alt185 = 2
                        LA185_0 = self.input.LA(1)

                        if (LA185_0 == LT) :
                            LA185_2 = self.input.LA(2)

                            if (self.synpred215()) :
                                alt185 = 1




                        if alt185 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT362 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2536)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT362)


                        else:
                            break #loop185


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2539)
                    assignmentExpressionNoIn363 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpressionNoIn.add(assignmentExpressionNoIn363.tree)
                    # AST Rewrite
                    # elements: variableDeclarationList, assignmentExpressionNoIn, let, let
                    # token labels: let
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_let = RewriteRuleTokenStream(self.adaptor, "token let", let)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 362:3: -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:362:6: ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, stream_let.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:362:19: ^( VARDEFS $let variableDeclarationList )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_2)

                        self.adaptor.addChild(root_2, stream_let.next())
                        self.adaptor.addChild(root_2, stream_variableDeclarationList.next())

                        self.adaptor.addChild(root_1, root_2)
                        self.adaptor.addChild(root_1, stream_assignmentExpressionNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt186 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:363:4: conditionalExpressionNoIn
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2566)
                    conditionalExpressionNoIn364 = self.conditionalExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, conditionalExpressionNoIn364.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 54, assignmentExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end assignmentExpressionNoIn

    class leftHandSideExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start leftHandSideExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:366:1: leftHandSideExpression : ( callExpression | newExpression );
    def leftHandSideExpression(self, ):

        retval = self.leftHandSideExpression_return()
        retval.start = self.input.LT(1)
        leftHandSideExpression_StartIndex = self.input.index()
        root_0 = None

        callExpression365 = None

        newExpression366 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 55):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:367:2: ( callExpression | newExpression )
                alt187 = 2
                LA187 = self.input.LA(1)
                if LA187 == 149:
                    LA187_1 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 1, self.input)

                        raise nvae

                elif LA187 == LT:
                    LA187_2 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 2, self.input)

                        raise nvae

                elif LA187 == 72:
                    LA187_3 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 3, self.input)

                        raise nvae

                elif LA187 == 78:
                    LA187_4 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 4, self.input)

                        raise nvae

                elif LA187 == XMLComment:
                    LA187_5 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 5, self.input)

                        raise nvae

                elif LA187 == Identifier or LA187 == 84 or LA187 == 85 or LA187 == 86 or LA187 == 99 or LA187 == 150 or LA187 == 151:
                    LA187_6 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 6, self.input)

                        raise nvae

                elif LA187 == 152:
                    LA187_7 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 7, self.input)

                        raise nvae

                elif LA187 == 153:
                    LA187_8 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 8, self.input)

                        raise nvae

                elif LA187 == 154:
                    LA187_9 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 9, self.input)

                        raise nvae

                elif LA187 == StringLiteral:
                    LA187_10 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 10, self.input)

                        raise nvae

                elif LA187 == NumericLiteral:
                    LA187_11 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 11, self.input)

                        raise nvae

                elif LA187 == 74:
                    LA187_12 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 12, self.input)

                        raise nvae

                elif LA187 == RegularExpressionHacks:
                    LA187_13 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 13, self.input)

                        raise nvae

                elif LA187 == 92:
                    LA187_14 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 14, self.input)

                        raise nvae

                elif LA187 == 81:
                    LA187_15 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 15, self.input)

                        raise nvae

                elif LA187 == 80:
                    LA187_16 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 16, self.input)

                        raise nvae

                elif LA187 == 110:
                    LA187_17 = self.input.LA(2)

                    if (self.synpred217()) :
                        alt187 = 1
                    elif (True) :
                        alt187 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 17, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("366:1: leftHandSideExpression : ( callExpression | newExpression );", 187, 0, self.input)

                    raise nvae

                if alt187 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:367:4: callExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_callExpression_in_leftHandSideExpression2578)
                    callExpression365 = self.callExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, callExpression365.tree)


                elif alt187 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:4: newExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_newExpression_in_leftHandSideExpression2583)
                    newExpression366 = self.newExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, newExpression366.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 55, leftHandSideExpression_StartIndex)

            pass

        return retval

    # $ANTLR end leftHandSideExpression

    class newExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start newExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:371:1: newExpression : ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) );
    def newExpression(self, ):

        retval = self.newExpression_return()
        retval.start = self.input.LT(1)
        newExpression_StartIndex = self.input.index()
        root_0 = None

        string_literal368 = None
        LT369 = None
        memberExpression367 = None

        newExpression370 = None


        string_literal368_tree = None
        LT369_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_110 = RewriteRuleTokenStream(self.adaptor, "token 110")
        stream_newExpression = RewriteRuleSubtreeStream(self.adaptor, "rule newExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 56):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:372:2: ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) )
                alt189 = 2
                LA189_0 = self.input.LA(1)

                if ((LT <= LA189_0 <= RegularExpressionHacks) or LA189_0 == 72 or LA189_0 == 74 or LA189_0 == 78 or (80 <= LA189_0 <= 81) or (84 <= LA189_0 <= 86) or LA189_0 == 92 or LA189_0 == 99 or (149 <= LA189_0 <= 154)) :
                    alt189 = 1
                elif (LA189_0 == 110) :
                    LA189_17 = self.input.LA(2)

                    if (self.synpred218()) :
                        alt189 = 1
                    elif (True) :
                        alt189 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("371:1: newExpression : ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) );", 189, 17, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("371:1: newExpression : ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) );", 189, 0, self.input)

                    raise nvae

                if alt189 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:372:4: memberExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_memberExpression_in_newExpression2595)
                    memberExpression367 = self.memberExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, memberExpression367.tree)


                elif alt189 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:4: 'new' ( LT )* newExpression
                    string_literal368 = self.input.LT(1)
                    self.match(self.input, 110, self.FOLLOW_110_in_newExpression2600)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_110.add(string_literal368)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:10: ( LT )*
                    while True: #loop188
                        alt188 = 2
                        LA188_0 = self.input.LA(1)

                        if (LA188_0 == LT) :
                            LA188_2 = self.input.LA(2)

                            if (self.synpred219()) :
                                alt188 = 1




                        if alt188 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT369 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_newExpression2602)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT369)


                        else:
                            break #loop188


                    self.following.append(self.FOLLOW_newExpression_in_newExpression2605)
                    newExpression370 = self.newExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_newExpression.add(newExpression370.tree)
                    # AST Rewrite
                    # elements: newExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 374:3: -> ^( NEW newExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:374:6: ^( NEW newExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(NEW, "NEW"), root_1)

                        self.adaptor.addChild(root_1, stream_newExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 56, newExpression_StartIndex)

            pass

        return retval

    # $ANTLR end newExpression

    class memberExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start memberExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:377:1: memberExpression : ( primaryExpression ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* ) | functionExpression ( ( LT )* memberExpressionSuffix )* | 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* ) );
    def memberExpression(self, ):

        retval = self.memberExpression_return()
        retval.start = self.input.LT(1)
        memberExpression_StartIndex = self.input.index()
        root_0 = None

        LT372 = None
        LT375 = None
        string_literal377 = None
        LT378 = None
        LT380 = None
        LT382 = None
        primaryExpression371 = None

        memberExpressionSuffix373 = None

        functionExpression374 = None

        memberExpressionSuffix376 = None

        memberExpression379 = None

        arguments381 = None

        memberExpressionSuffix383 = None


        LT372_tree = None
        LT375_tree = None
        string_literal377_tree = None
        LT378_tree = None
        LT380_tree = None
        LT382_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_110 = RewriteRuleTokenStream(self.adaptor, "token 110")
        stream_memberExpression = RewriteRuleSubtreeStream(self.adaptor, "rule memberExpression")
        stream_arguments = RewriteRuleSubtreeStream(self.adaptor, "rule arguments")
        stream_primaryExpression = RewriteRuleSubtreeStream(self.adaptor, "rule primaryExpression")
        stream_memberExpressionSuffix = RewriteRuleSubtreeStream(self.adaptor, "rule memberExpressionSuffix")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 57):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:2: ( primaryExpression ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* ) | functionExpression ( ( LT )* memberExpressionSuffix )* | 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* ) )
                alt198 = 3
                LA198 = self.input.LA(1)
                if LA198 == LT or LA198 == StringLiteral or LA198 == XMLComment or LA198 == NumericLiteral or LA198 == Identifier or LA198 == RegularExpressionHacks or LA198 == 72 or LA198 == 74 or LA198 == 78 or LA198 == 81 or LA198 == 84 or LA198 == 85 or LA198 == 86 or LA198 == 92 or LA198 == 99 or LA198 == 149 or LA198 == 150 or LA198 == 151 or LA198 == 152 or LA198 == 153 or LA198 == 154:
                    alt198 = 1
                elif LA198 == 80:
                    alt198 = 2
                elif LA198 == 110:
                    alt198 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("377:1: memberExpression : ( primaryExpression ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* ) | functionExpression ( ( LT )* memberExpressionSuffix )* | 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* ) );", 198, 0, self.input)

                    raise nvae

                if alt198 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:4: primaryExpression ( ( LT )* memberExpressionSuffix )*
                    self.following.append(self.FOLLOW_primaryExpression_in_memberExpression2627)
                    primaryExpression371 = self.primaryExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_primaryExpression.add(primaryExpression371.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:22: ( ( LT )* memberExpressionSuffix )*
                    while True: #loop191
                        alt191 = 2
                        LA191 = self.input.LA(1)
                        if LA191 == LT:
                            LA191_1 = self.input.LA(2)

                            if (self.synpred221()) :
                                alt191 = 1


                        elif LA191 == 92:
                            LA191_16 = self.input.LA(2)

                            if (self.synpred221()) :
                                alt191 = 1


                        elif LA191 == 111:
                            LA191_17 = self.input.LA(2)

                            if (self.synpred221()) :
                                alt191 = 1


                        elif LA191 == 75:
                            LA191_18 = self.input.LA(2)

                            if (self.synpred221()) :
                                alt191 = 1



                        if alt191 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:23: ( LT )* memberExpressionSuffix
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:23: ( LT )*
                            while True: #loop190
                                alt190 = 2
                                LA190_0 = self.input.LA(1)

                                if (LA190_0 == LT) :
                                    alt190 = 1


                                if alt190 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT372 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2630)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT372)


                                else:
                                    break #loop190


                            self.following.append(self.FOLLOW_memberExpressionSuffix_in_memberExpression2633)
                            memberExpressionSuffix373 = self.memberExpressionSuffix()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_memberExpressionSuffix.add(memberExpressionSuffix373.tree)


                        else:
                            break #loop191


                    # AST Rewrite
                    # elements: primaryExpression, memberExpressionSuffix
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 379:3: -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:6: ^( VEXPR primaryExpression ( memberExpressionSuffix )* )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VEXPR, "VEXPR"), root_1)

                        self.adaptor.addChild(root_1, stream_primaryExpression.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:32: ( memberExpressionSuffix )*
                        while stream_memberExpressionSuffix.hasNext():
                            self.adaptor.addChild(root_1, stream_memberExpressionSuffix.next())


                        stream_memberExpressionSuffix.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt198 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:4: functionExpression ( ( LT )* memberExpressionSuffix )*
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_functionExpression_in_memberExpression2653)
                    functionExpression374 = self.functionExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, functionExpression374.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:23: ( ( LT )* memberExpressionSuffix )*
                    while True: #loop193
                        alt193 = 2
                        LA193 = self.input.LA(1)
                        if LA193 == LT:
                            LA193_1 = self.input.LA(2)

                            if (self.synpred224()) :
                                alt193 = 1


                        elif LA193 == 92:
                            LA193_3 = self.input.LA(2)

                            if (self.synpred224()) :
                                alt193 = 1


                        elif LA193 == 111:
                            LA193_4 = self.input.LA(2)

                            if (self.synpred224()) :
                                alt193 = 1


                        elif LA193 == 75:
                            LA193_5 = self.input.LA(2)

                            if (self.synpred224()) :
                                alt193 = 1



                        if alt193 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:24: ( LT )* memberExpressionSuffix
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:26: ( LT )*
                            while True: #loop192
                                alt192 = 2
                                LA192_0 = self.input.LA(1)

                                if (LA192_0 == LT) :
                                    alt192 = 1


                                if alt192 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT375 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2656)
                                    if self.failed:
                                        return retval


                                else:
                                    break #loop192


                            self.following.append(self.FOLLOW_memberExpressionSuffix_in_memberExpression2660)
                            memberExpressionSuffix376 = self.memberExpressionSuffix()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, memberExpressionSuffix376.tree)


                        else:
                            break #loop193




                elif alt198 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:4: 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )*
                    string_literal377 = self.input.LT(1)
                    self.match(self.input, 110, self.FOLLOW_110_in_memberExpression2667)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_110.add(string_literal377)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:10: ( LT )*
                    while True: #loop194
                        alt194 = 2
                        LA194_0 = self.input.LA(1)

                        if (LA194_0 == LT) :
                            LA194_2 = self.input.LA(2)

                            if (self.synpred226()) :
                                alt194 = 1




                        if alt194 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT378 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2669)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT378)


                        else:
                            break #loop194


                    self.following.append(self.FOLLOW_memberExpression_in_memberExpression2672)
                    memberExpression379 = self.memberExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_memberExpression.add(memberExpression379.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:31: ( LT )*
                    while True: #loop195
                        alt195 = 2
                        LA195_0 = self.input.LA(1)

                        if (LA195_0 == LT) :
                            alt195 = 1


                        if alt195 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT380 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2674)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT380)


                        else:
                            break #loop195


                    self.following.append(self.FOLLOW_arguments_in_memberExpression2677)
                    arguments381 = self.arguments()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_arguments.add(arguments381.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:45: ( ( LT )* memberExpressionSuffix )*
                    while True: #loop197
                        alt197 = 2
                        LA197 = self.input.LA(1)
                        if LA197 == LT:
                            LA197_1 = self.input.LA(2)

                            if (self.synpred229()) :
                                alt197 = 1


                        elif LA197 == 92:
                            LA197_16 = self.input.LA(2)

                            if (self.synpred229()) :
                                alt197 = 1


                        elif LA197 == 111:
                            LA197_17 = self.input.LA(2)

                            if (self.synpred229()) :
                                alt197 = 1


                        elif LA197 == 75:
                            LA197_18 = self.input.LA(2)

                            if (self.synpred229()) :
                                alt197 = 1



                        if alt197 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:46: ( LT )* memberExpressionSuffix
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:46: ( LT )*
                            while True: #loop196
                                alt196 = 2
                                LA196_0 = self.input.LA(1)

                                if (LA196_0 == LT) :
                                    alt196 = 1


                                if alt196 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT382 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2680)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT382)


                                else:
                                    break #loop196


                            self.following.append(self.FOLLOW_memberExpressionSuffix_in_memberExpression2683)
                            memberExpressionSuffix383 = self.memberExpressionSuffix()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_memberExpressionSuffix.add(memberExpressionSuffix383.tree)


                        else:
                            break #loop197


                    # AST Rewrite
                    # elements: memberExpressionSuffix, arguments, memberExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 382:3: -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:382:6: ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VEXPR, "VEXPR"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:382:14: ^( NEW ^( CALL memberExpression arguments ) )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(NEW, "NEW"), root_2)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:382:20: ^( CALL memberExpression arguments )
                        root_3 = self.adaptor.nil()
                        root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CALL, "CALL"), root_3)

                        self.adaptor.addChild(root_3, stream_memberExpression.next())
                        self.adaptor.addChild(root_3, stream_arguments.next())

                        self.adaptor.addChild(root_2, root_3)

                        self.adaptor.addChild(root_1, root_2)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:382:56: ( memberExpressionSuffix )*
                        while stream_memberExpressionSuffix.hasNext():
                            self.adaptor.addChild(root_1, stream_memberExpressionSuffix.next())


                        stream_memberExpressionSuffix.reset();

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 57, memberExpression_StartIndex)

            pass

        return retval

    # $ANTLR end memberExpression

    class memberExpressionSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start memberExpressionSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:385:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );
    def memberExpressionSuffix(self, ):

        retval = self.memberExpressionSuffix_return()
        retval.start = self.input.LT(1)
        memberExpressionSuffix_StartIndex = self.input.index()
        root_0 = None

        indexSuffix384 = None

        propertyReferenceSuffix385 = None

        descendentSuffix386 = None

        namespaceSuffix387 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 58):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:386:2: ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix )
                alt199 = 4
                LA199 = self.input.LA(1)
                if LA199 == 92:
                    alt199 = 1
                elif LA199 == 111:
                    LA199_2 = self.input.LA(2)

                    if (LA199_2 == 111) :
                        alt199 = 3
                    elif (LA199_2 == LT or LA199_2 == Identifier or (84 <= LA199_2 <= 86) or LA199_2 == 99 or LA199_2 == 112 or (150 <= LA199_2 <= 151)) :
                        alt199 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("385:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 199, 2, self.input)

                        raise nvae

                elif LA199 == 75:
                    alt199 = 4
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("385:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 199, 0, self.input)

                    raise nvae

                if alt199 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:386:4: indexSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_indexSuffix_in_memberExpressionSuffix2720)
                    indexSuffix384 = self.indexSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, indexSuffix384.tree)


                elif alt199 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:387:4: propertyReferenceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2725)
                    propertyReferenceSuffix385 = self.propertyReferenceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, propertyReferenceSuffix385.tree)


                elif alt199 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:388:4: descendentSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_descendentSuffix_in_memberExpressionSuffix2730)
                    descendentSuffix386 = self.descendentSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, descendentSuffix386.tree)


                elif alt199 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:389:4: namespaceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_namespaceSuffix_in_memberExpressionSuffix2736)
                    namespaceSuffix387 = self.namespaceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, namespaceSuffix387.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 58, memberExpressionSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end memberExpressionSuffix

    class callExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start callExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:395:1: callExpression : memberExpression ( LT )* ( '.' )? ( LT )* arguments ( ( LT )* callExpressionSuffix )* -> ^( CALL memberExpression arguments ( callExpressionSuffix )* ) ;
    def callExpression(self, ):

        retval = self.callExpression_return()
        retval.start = self.input.LT(1)
        callExpression_StartIndex = self.input.index()
        root_0 = None

        LT389 = None
        char_literal390 = None
        LT391 = None
        LT393 = None
        memberExpression388 = None

        arguments392 = None

        callExpressionSuffix394 = None


        LT389_tree = None
        char_literal390_tree = None
        LT391_tree = None
        LT393_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_111 = RewriteRuleTokenStream(self.adaptor, "token 111")
        stream_memberExpression = RewriteRuleSubtreeStream(self.adaptor, "rule memberExpression")
        stream_arguments = RewriteRuleSubtreeStream(self.adaptor, "rule arguments")
        stream_callExpressionSuffix = RewriteRuleSubtreeStream(self.adaptor, "rule callExpressionSuffix")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 59):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:2: ( memberExpression ( LT )* ( '.' )? ( LT )* arguments ( ( LT )* callExpressionSuffix )* -> ^( CALL memberExpression arguments ( callExpressionSuffix )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:4: memberExpression ( LT )* ( '.' )? ( LT )* arguments ( ( LT )* callExpressionSuffix )*
                self.following.append(self.FOLLOW_memberExpression_in_callExpression2751)
                memberExpression388 = self.memberExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_memberExpression.add(memberExpression388.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:21: ( LT )*
                while True: #loop200
                    alt200 = 2
                    LA200_0 = self.input.LA(1)

                    if (LA200_0 == LT) :
                        LA200_2 = self.input.LA(2)

                        if (self.synpred233()) :
                            alt200 = 1




                    if alt200 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT389 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_callExpression2753)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT389)


                    else:
                        break #loop200


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:25: ( '.' )?
                alt201 = 2
                LA201_0 = self.input.LA(1)

                if (LA201_0 == 111) :
                    alt201 = 1
                if alt201 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: '.'
                    char_literal390 = self.input.LT(1)
                    self.match(self.input, 111, self.FOLLOW_111_in_callExpression2756)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_111.add(char_literal390)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:30: ( LT )*
                while True: #loop202
                    alt202 = 2
                    LA202_0 = self.input.LA(1)

                    if (LA202_0 == LT) :
                        alt202 = 1


                    if alt202 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT391 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_callExpression2759)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT391)


                    else:
                        break #loop202


                self.following.append(self.FOLLOW_arguments_in_callExpression2762)
                arguments392 = self.arguments()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_arguments.add(arguments392.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:44: ( ( LT )* callExpressionSuffix )*
                while True: #loop204
                    alt204 = 2
                    LA204 = self.input.LA(1)
                    if LA204 == LT:
                        LA204_1 = self.input.LA(2)

                        if (self.synpred237()) :
                            alt204 = 1


                    elif LA204 == 92:
                        LA204_16 = self.input.LA(2)

                        if (self.synpred237()) :
                            alt204 = 1


                    elif LA204 == 111:
                        LA204_17 = self.input.LA(2)

                        if (self.synpred237()) :
                            alt204 = 1


                    elif LA204 == 75:
                        LA204_18 = self.input.LA(2)

                        if (self.synpred237()) :
                            alt204 = 1


                    elif LA204 == 81:
                        LA204_19 = self.input.LA(2)

                        if (self.synpred237()) :
                            alt204 = 1



                    if alt204 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:45: ( LT )* callExpressionSuffix
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:45: ( LT )*
                        while True: #loop203
                            alt203 = 2
                            LA203_0 = self.input.LA(1)

                            if (LA203_0 == LT) :
                                alt203 = 1


                            if alt203 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT393 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_callExpression2765)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT393)


                            else:
                                break #loop203


                        self.following.append(self.FOLLOW_callExpressionSuffix_in_callExpression2768)
                        callExpressionSuffix394 = self.callExpressionSuffix()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_callExpressionSuffix.add(callExpressionSuffix394.tree)


                    else:
                        break #loop204


                # AST Rewrite
                # elements: callExpressionSuffix, memberExpression, arguments
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 397:3: -> ^( CALL memberExpression arguments ( callExpressionSuffix )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:397:6: ^( CALL memberExpression arguments ( callExpressionSuffix )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(CALL, "CALL"), root_1)

                    self.adaptor.addChild(root_1, stream_memberExpression.next())
                    self.adaptor.addChild(root_1, stream_arguments.next())
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:397:40: ( callExpressionSuffix )*
                    while stream_callExpressionSuffix.hasNext():
                        self.adaptor.addChild(root_1, stream_callExpressionSuffix.next())


                    stream_callExpressionSuffix.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 59, callExpression_StartIndex)

            pass

        return retval

    # $ANTLR end callExpression

    class callExpressionSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start callExpressionSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );
    def callExpressionSuffix(self, ):

        retval = self.callExpressionSuffix_return()
        retval.start = self.input.LT(1)
        callExpressionSuffix_StartIndex = self.input.index()
        root_0 = None

        arguments395 = None

        indexSuffix396 = None

        propertyReferenceSuffix397 = None

        descendentSuffix398 = None

        namespaceSuffix399 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 60):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:2: ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix )
                alt205 = 5
                LA205 = self.input.LA(1)
                if LA205 == 81:
                    alt205 = 1
                elif LA205 == 92:
                    alt205 = 2
                elif LA205 == 111:
                    LA205_3 = self.input.LA(2)

                    if (LA205_3 == 111) :
                        alt205 = 4
                    elif (LA205_3 == LT or LA205_3 == Identifier or (84 <= LA205_3 <= 86) or LA205_3 == 99 or LA205_3 == 112 or (150 <= LA205_3 <= 151)) :
                        alt205 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("400:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 205, 3, self.input)

                        raise nvae

                elif LA205 == 75:
                    alt205 = 5
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("400:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 205, 0, self.input)

                    raise nvae

                if alt205 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:4: arguments
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_arguments_in_callExpressionSuffix2797)
                    arguments395 = self.arguments()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, arguments395.tree)


                elif alt205 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:402:4: indexSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_indexSuffix_in_callExpressionSuffix2802)
                    indexSuffix396 = self.indexSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, indexSuffix396.tree)


                elif alt205 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:403:4: propertyReferenceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2807)
                    propertyReferenceSuffix397 = self.propertyReferenceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, propertyReferenceSuffix397.tree)


                elif alt205 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:404:4: descendentSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_descendentSuffix_in_callExpressionSuffix2812)
                    descendentSuffix398 = self.descendentSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, descendentSuffix398.tree)


                elif alt205 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:405:4: namespaceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_namespaceSuffix_in_callExpressionSuffix2818)
                    namespaceSuffix399 = self.namespaceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, namespaceSuffix399.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 60, callExpressionSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end callExpressionSuffix

    class arguments_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start arguments
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:411:1: arguments : '(' ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )? ( LT )* ')' -> ^( ARGS ( assignmentExpression )* ) ;
    def arguments(self, ):

        retval = self.arguments_return()
        retval.start = self.input.LT(1)
        arguments_StartIndex = self.input.index()
        root_0 = None

        char_literal400 = None
        LT401 = None
        LT403 = None
        char_literal404 = None
        LT405 = None
        LT407 = None
        LT408 = None
        char_literal409 = None
        assignmentExpression402 = None

        assignmentExpression406 = None


        char_literal400_tree = None
        LT401_tree = None
        LT403_tree = None
        char_literal404_tree = None
        LT405_tree = None
        LT407_tree = None
        LT408_tree = None
        char_literal409_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 61):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:2: ( '(' ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )? ( LT )* ')' -> ^( ARGS ( assignmentExpression )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:4: '(' ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )? ( LT )* ')'
                char_literal400 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_arguments2833)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal400)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:8: ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )?
                alt211 = 2
                alt211 = self.dfa211.predict(self.input)
                if alt211 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:9: ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )*
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:9: ( LT )*
                    while True: #loop206
                        alt206 = 2
                        LA206_0 = self.input.LA(1)

                        if (LA206_0 == LT) :
                            LA206_2 = self.input.LA(2)

                            if (self.synpred242()) :
                                alt206 = 1




                        if alt206 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT401 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arguments2836)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT401)


                        else:
                            break #loop206


                    self.following.append(self.FOLLOW_assignmentExpression_in_arguments2839)
                    assignmentExpression402 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression402.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:34: ( LT )*
                    while True: #loop207
                        alt207 = 2
                        LA207_0 = self.input.LA(1)

                        if (LA207_0 == LT) :
                            LA207_2 = self.input.LA(2)

                            if (self.synpred243()) :
                                alt207 = 1




                        if alt207 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT403 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arguments2841)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT403)


                        else:
                            break #loop207


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:38: ( ',' ( LT )* assignmentExpression ( LT )* )*
                    while True: #loop210
                        alt210 = 2
                        LA210_0 = self.input.LA(1)

                        if (LA210_0 == 82) :
                            alt210 = 1


                        if alt210 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:39: ',' ( LT )* assignmentExpression ( LT )*
                            char_literal404 = self.input.LT(1)
                            self.match(self.input, 82, self.FOLLOW_82_in_arguments2845)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_82.add(char_literal404)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:43: ( LT )*
                            while True: #loop208
                                alt208 = 2
                                LA208_0 = self.input.LA(1)

                                if (LA208_0 == LT) :
                                    LA208_2 = self.input.LA(2)

                                    if (self.synpred244()) :
                                        alt208 = 1




                                if alt208 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT405 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_arguments2847)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT405)


                                else:
                                    break #loop208


                            self.following.append(self.FOLLOW_assignmentExpression_in_arguments2850)
                            assignmentExpression406 = self.assignmentExpression()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_assignmentExpression.add(assignmentExpression406.tree)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:68: ( LT )*
                            while True: #loop209
                                alt209 = 2
                                LA209_0 = self.input.LA(1)

                                if (LA209_0 == LT) :
                                    LA209_1 = self.input.LA(2)

                                    if (self.synpred245()) :
                                        alt209 = 1




                                if alt209 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT407 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_arguments2852)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT407)


                                else:
                                    break #loop209




                        else:
                            break #loop210





                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:76: ( LT )*
                while True: #loop212
                    alt212 = 2
                    LA212_0 = self.input.LA(1)

                    if (LA212_0 == LT) :
                        alt212 = 1


                    if alt212 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT408 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_arguments2859)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT408)


                    else:
                        break #loop212


                char_literal409 = self.input.LT(1)
                self.match(self.input, 83, self.FOLLOW_83_in_arguments2862)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_83.add(char_literal409)
                # AST Rewrite
                # elements: assignmentExpression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 413:3: -> ^( ARGS ( assignmentExpression )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:413:6: ^( ARGS ( assignmentExpression )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARGS, "ARGS"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:413:13: ( assignmentExpression )*
                    while stream_assignmentExpression.hasNext():
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())


                    stream_assignmentExpression.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 61, arguments_StartIndex)

            pass

        return retval

    # $ANTLR end arguments

    class indexSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start indexSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:1: indexSuffix : '[' ( LT )* expression ( LT )* ']' -> ^( INDEXREF expression ) ;
    def indexSuffix(self, ):

        retval = self.indexSuffix_return()
        retval.start = self.input.LT(1)
        indexSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal410 = None
        LT411 = None
        LT413 = None
        char_literal414 = None
        expression412 = None


        char_literal410_tree = None
        LT411_tree = None
        LT413_tree = None
        char_literal414_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_92 = RewriteRuleTokenStream(self.adaptor, "token 92")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 62):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:2: ( '[' ( LT )* expression ( LT )* ']' -> ^( INDEXREF expression ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:4: '[' ( LT )* expression ( LT )* ']'
                char_literal410 = self.input.LT(1)
                self.match(self.input, 92, self.FOLLOW_92_in_indexSuffix2885)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_92.add(char_literal410)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:8: ( LT )*
                while True: #loop213
                    alt213 = 2
                    LA213_0 = self.input.LA(1)

                    if (LA213_0 == LT) :
                        LA213_2 = self.input.LA(2)

                        if (self.synpred249()) :
                            alt213 = 1




                    if alt213 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT411 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_indexSuffix2887)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT411)


                    else:
                        break #loop213


                self.following.append(self.FOLLOW_expression_in_indexSuffix2890)
                expression412 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression412.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:23: ( LT )*
                while True: #loop214
                    alt214 = 2
                    LA214_0 = self.input.LA(1)

                    if (LA214_0 == LT) :
                        alt214 = 1


                    if alt214 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT413 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_indexSuffix2892)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT413)


                    else:
                        break #loop214


                char_literal414 = self.input.LT(1)
                self.match(self.input, 93, self.FOLLOW_93_in_indexSuffix2895)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_93.add(char_literal414)
                # AST Rewrite
                # elements: expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 418:3: -> ^( INDEXREF expression )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:418:6: ^( INDEXREF expression )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(INDEXREF, "INDEXREF"), root_1)

                    self.adaptor.addChild(root_1, stream_expression.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 62, indexSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end indexSuffix

    class propertyReferenceSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start propertyReferenceSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:421:1: propertyReferenceSuffix : '.' ( LT )* e4xIdentifier -> ^( PROPREF e4xIdentifier ) ;
    def propertyReferenceSuffix(self, ):

        retval = self.propertyReferenceSuffix_return()
        retval.start = self.input.LT(1)
        propertyReferenceSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal415 = None
        LT416 = None
        e4xIdentifier417 = None


        char_literal415_tree = None
        LT416_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_111 = RewriteRuleTokenStream(self.adaptor, "token 111")
        stream_e4xIdentifier = RewriteRuleSubtreeStream(self.adaptor, "rule e4xIdentifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 63):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:422:2: ( '.' ( LT )* e4xIdentifier -> ^( PROPREF e4xIdentifier ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:422:4: '.' ( LT )* e4xIdentifier
                char_literal415 = self.input.LT(1)
                self.match(self.input, 111, self.FOLLOW_111_in_propertyReferenceSuffix2918)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_111.add(char_literal415)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:422:8: ( LT )*
                while True: #loop215
                    alt215 = 2
                    LA215_0 = self.input.LA(1)

                    if (LA215_0 == LT) :
                        alt215 = 1


                    if alt215 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT416 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_propertyReferenceSuffix2920)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT416)


                    else:
                        break #loop215


                self.following.append(self.FOLLOW_e4xIdentifier_in_propertyReferenceSuffix2923)
                e4xIdentifier417 = self.e4xIdentifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_e4xIdentifier.add(e4xIdentifier417.tree)
                # AST Rewrite
                # elements: e4xIdentifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 423:3: -> ^( PROPREF e4xIdentifier )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:423:6: ^( PROPREF e4xIdentifier )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROPREF, "PROPREF"), root_1)

                    self.adaptor.addChild(root_1, stream_e4xIdentifier.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 63, propertyReferenceSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end propertyReferenceSuffix

    class descendentSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start descendentSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:426:1: descendentSuffix : '.' '.' ( LT )* e4xIdentifier -> ^( DESCREF e4xIdentifier ) ;
    def descendentSuffix(self, ):

        retval = self.descendentSuffix_return()
        retval.start = self.input.LT(1)
        descendentSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal418 = None
        char_literal419 = None
        LT420 = None
        e4xIdentifier421 = None


        char_literal418_tree = None
        char_literal419_tree = None
        LT420_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_111 = RewriteRuleTokenStream(self.adaptor, "token 111")
        stream_e4xIdentifier = RewriteRuleSubtreeStream(self.adaptor, "rule e4xIdentifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 64):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:427:2: ( '.' '.' ( LT )* e4xIdentifier -> ^( DESCREF e4xIdentifier ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:427:4: '.' '.' ( LT )* e4xIdentifier
                char_literal418 = self.input.LT(1)
                self.match(self.input, 111, self.FOLLOW_111_in_descendentSuffix2944)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_111.add(char_literal418)
                char_literal419 = self.input.LT(1)
                self.match(self.input, 111, self.FOLLOW_111_in_descendentSuffix2946)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_111.add(char_literal419)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:427:12: ( LT )*
                while True: #loop216
                    alt216 = 2
                    LA216_0 = self.input.LA(1)

                    if (LA216_0 == LT) :
                        alt216 = 1


                    if alt216 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT420 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_descendentSuffix2948)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT420)


                    else:
                        break #loop216


                self.following.append(self.FOLLOW_e4xIdentifier_in_descendentSuffix2951)
                e4xIdentifier421 = self.e4xIdentifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_e4xIdentifier.add(e4xIdentifier421.tree)
                # AST Rewrite
                # elements: e4xIdentifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 428:3: -> ^( DESCREF e4xIdentifier )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:428:6: ^( DESCREF e4xIdentifier )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(DESCREF, "DESCREF"), root_1)

                    self.adaptor.addChild(root_1, stream_e4xIdentifier.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 64, descendentSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end descendentSuffix

    class namespaceSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start namespaceSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:431:1: namespaceSuffix : ':' ':' ( LT )* ( e4xIdentifier )? -> ^( NSREF ( e4xIdentifier )? ) ;
    def namespaceSuffix(self, ):

        retval = self.namespaceSuffix_return()
        retval.start = self.input.LT(1)
        namespaceSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal422 = None
        char_literal423 = None
        LT424 = None
        e4xIdentifier425 = None


        char_literal422_tree = None
        char_literal423_tree = None
        LT424_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_75 = RewriteRuleTokenStream(self.adaptor, "token 75")
        stream_e4xIdentifier = RewriteRuleSubtreeStream(self.adaptor, "rule e4xIdentifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 65):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:2: ( ':' ':' ( LT )* ( e4xIdentifier )? -> ^( NSREF ( e4xIdentifier )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:4: ':' ':' ( LT )* ( e4xIdentifier )?
                char_literal422 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_namespaceSuffix2972)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_75.add(char_literal422)
                char_literal423 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_namespaceSuffix2974)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_75.add(char_literal423)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:12: ( LT )*
                while True: #loop217
                    alt217 = 2
                    LA217_0 = self.input.LA(1)

                    if (LA217_0 == LT) :
                        LA217_2 = self.input.LA(2)

                        if (self.synpred253()) :
                            alt217 = 1




                    if alt217 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT424 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_namespaceSuffix2976)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT424)


                    else:
                        break #loop217


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:16: ( e4xIdentifier )?
                alt218 = 2
                LA218_0 = self.input.LA(1)

                if (LA218_0 == Identifier or (84 <= LA218_0 <= 86) or LA218_0 == 99 or (150 <= LA218_0 <= 151)) :
                    alt218 = 1
                elif (LA218_0 == 112) :
                    LA218_2 = self.input.LA(2)

                    if (self.synpred254()) :
                        alt218 = 1
                if alt218 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: e4xIdentifier
                    self.following.append(self.FOLLOW_e4xIdentifier_in_namespaceSuffix2979)
                    e4xIdentifier425 = self.e4xIdentifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_e4xIdentifier.add(e4xIdentifier425.tree)



                # AST Rewrite
                # elements: e4xIdentifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 433:3: -> ^( NSREF ( e4xIdentifier )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:433:6: ^( NSREF ( e4xIdentifier )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(NSREF, "NSREF"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:433:14: ( e4xIdentifier )?
                    if stream_e4xIdentifier.hasNext():
                        self.adaptor.addChild(root_1, stream_e4xIdentifier.next())


                    stream_e4xIdentifier.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 65, namespaceSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end namespaceSuffix

    class e4xIdentifier_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start e4xIdentifier
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:436:1: e4xIdentifier : ( identifier | '*' );
    def e4xIdentifier(self, ):

        retval = self.e4xIdentifier_return()
        retval.start = self.input.LT(1)
        e4xIdentifier_StartIndex = self.input.index()
        root_0 = None

        char_literal427 = None
        identifier426 = None


        char_literal427_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 66):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:2: ( identifier | '*' )
                alt219 = 2
                LA219_0 = self.input.LA(1)

                if (LA219_0 == Identifier or (84 <= LA219_0 <= 86) or LA219_0 == 99 or (150 <= LA219_0 <= 151)) :
                    alt219 = 1
                elif (LA219_0 == 112) :
                    alt219 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("436:1: e4xIdentifier : ( identifier | '*' );", 219, 0, self.input)

                    raise nvae

                if alt219 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:4: identifier
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_identifier_in_e4xIdentifier3002)
                    identifier426 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier426.tree)


                elif alt219 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:438:4: '*'
                    root_0 = self.adaptor.nil()

                    char_literal427 = self.input.LT(1)
                    self.match(self.input, 112, self.FOLLOW_112_in_e4xIdentifier3007)
                    if self.failed:
                        return retval

                    char_literal427_tree = self.adaptor.createWithPayload(char_literal427)
                    self.adaptor.addChild(root_0, char_literal427_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 66, e4xIdentifier_StartIndex)

            pass

        return retval

    # $ANTLR end e4xIdentifier

    class assignmentOperator_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start assignmentOperator
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:441:1: assignmentOperator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' );
    def assignmentOperator(self, ):

        retval = self.assignmentOperator_return()
        retval.start = self.input.LT(1)
        assignmentOperator_StartIndex = self.input.index()
        root_0 = None

        set428 = None

        set428_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 67):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:442:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                root_0 = self.adaptor.nil()

                set428 = self.input.LT(1)
                if self.input.LA(1) == 77 or (113 <= self.input.LA(1) <= 123):
                    self.input.consume();
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set428))
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_assignmentOperator0
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 67, assignmentOperator_StartIndex)

            pass

        return retval

    # $ANTLR end assignmentOperator

    class conditionalExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start conditionalExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:445:1: conditionalExpression : logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )? ;
    def conditionalExpression(self, ):

        retval = self.conditionalExpression_return()
        retval.start = self.input.LT(1)
        conditionalExpression_StartIndex = self.input.index()
        root_0 = None

        LT430 = None
        char_literal431 = None
        LT432 = None
        LT434 = None
        char_literal435 = None
        LT436 = None
        logicalORExpression429 = None

        assignmentExpression433 = None

        assignmentExpression437 = None


        LT430_tree = None
        char_literal431_tree = None
        LT432_tree = None
        LT434_tree = None
        char_literal435_tree = None
        LT436_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 68):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:2: ( logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:4: logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )?
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalORExpression_in_conditionalExpression3074)
                logicalORExpression429 = self.logicalORExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalORExpression429.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:24: ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )?
                alt224 = 2
                LA224_0 = self.input.LA(1)

                if (LA224_0 == LT) :
                    LA224_1 = self.input.LA(2)

                    if (self.synpred271()) :
                        alt224 = 1
                elif (LA224_0 == 124) :
                    LA224_2 = self.input.LA(2)

                    if (self.synpred271()) :
                        alt224 = 1
                if alt224 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:25: ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:27: ( LT )*
                    while True: #loop220
                        alt220 = 2
                        LA220_0 = self.input.LA(1)

                        if (LA220_0 == LT) :
                            alt220 = 1


                        if alt220 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT430 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3077)
                            if self.failed:
                                return retval


                        else:
                            break #loop220


                    char_literal431 = self.input.LT(1)
                    self.match(self.input, 124, self.FOLLOW_124_in_conditionalExpression3081)
                    if self.failed:
                        return retval

                    char_literal431_tree = self.adaptor.createWithPayload(char_literal431)
                    self.adaptor.addChild(root_0, char_literal431_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:36: ( LT )*
                    while True: #loop221
                        alt221 = 2
                        LA221_0 = self.input.LA(1)

                        if (LA221_0 == LT) :
                            LA221_2 = self.input.LA(2)

                            if (self.synpred268()) :
                                alt221 = 1




                        if alt221 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT432 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3083)
                            if self.failed:
                                return retval


                        else:
                            break #loop221


                    self.following.append(self.FOLLOW_assignmentExpression_in_conditionalExpression3087)
                    assignmentExpression433 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpression433.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:62: ( LT )*
                    while True: #loop222
                        alt222 = 2
                        LA222_0 = self.input.LA(1)

                        if (LA222_0 == LT) :
                            alt222 = 1


                        if alt222 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT434 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3089)
                            if self.failed:
                                return retval


                        else:
                            break #loop222


                    char_literal435 = self.input.LT(1)
                    self.match(self.input, 75, self.FOLLOW_75_in_conditionalExpression3093)
                    if self.failed:
                        return retval

                    char_literal435_tree = self.adaptor.createWithPayload(char_literal435)
                    self.adaptor.addChild(root_0, char_literal435_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:71: ( LT )*
                    while True: #loop223
                        alt223 = 2
                        LA223_0 = self.input.LA(1)

                        if (LA223_0 == LT) :
                            LA223_2 = self.input.LA(2)

                            if (self.synpred270()) :
                                alt223 = 1




                        if alt223 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT436 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3095)
                            if self.failed:
                                return retval


                        else:
                            break #loop223


                    self.following.append(self.FOLLOW_assignmentExpression_in_conditionalExpression3099)
                    assignmentExpression437 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpression437.tree)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 68, conditionalExpression_StartIndex)

            pass

        return retval

    # $ANTLR end conditionalExpression

    class conditionalExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start conditionalExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:449:1: conditionalExpressionNoIn : logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )? ;
    def conditionalExpressionNoIn(self, ):

        retval = self.conditionalExpressionNoIn_return()
        retval.start = self.input.LT(1)
        conditionalExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT439 = None
        char_literal440 = None
        LT441 = None
        LT443 = None
        char_literal444 = None
        LT445 = None
        logicalORExpressionNoIn438 = None

        assignmentExpressionNoIn442 = None

        assignmentExpressionNoIn446 = None


        LT439_tree = None
        char_literal440_tree = None
        LT441_tree = None
        LT443_tree = None
        char_literal444_tree = None
        LT445_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 69):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:2: ( logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:4: logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )?
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3112)
                logicalORExpressionNoIn438 = self.logicalORExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalORExpressionNoIn438.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:28: ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )?
                alt229 = 2
                alt229 = self.dfa229.predict(self.input)
                if alt229 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:29: ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:31: ( LT )*
                    while True: #loop225
                        alt225 = 2
                        LA225_0 = self.input.LA(1)

                        if (LA225_0 == LT) :
                            alt225 = 1


                        if alt225 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT439 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3115)
                            if self.failed:
                                return retval


                        else:
                            break #loop225


                    char_literal440 = self.input.LT(1)
                    self.match(self.input, 124, self.FOLLOW_124_in_conditionalExpressionNoIn3119)
                    if self.failed:
                        return retval

                    char_literal440_tree = self.adaptor.createWithPayload(char_literal440)
                    self.adaptor.addChild(root_0, char_literal440_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:40: ( LT )*
                    while True: #loop226
                        alt226 = 2
                        LA226_0 = self.input.LA(1)

                        if (LA226_0 == LT) :
                            LA226_2 = self.input.LA(2)

                            if (self.synpred273()) :
                                alt226 = 1




                        if alt226 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT441 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3121)
                            if self.failed:
                                return retval


                        else:
                            break #loop226


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3125)
                    assignmentExpressionNoIn442 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpressionNoIn442.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:70: ( LT )*
                    while True: #loop227
                        alt227 = 2
                        LA227_0 = self.input.LA(1)

                        if (LA227_0 == LT) :
                            alt227 = 1


                        if alt227 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT443 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3127)
                            if self.failed:
                                return retval


                        else:
                            break #loop227


                    char_literal444 = self.input.LT(1)
                    self.match(self.input, 75, self.FOLLOW_75_in_conditionalExpressionNoIn3131)
                    if self.failed:
                        return retval

                    char_literal444_tree = self.adaptor.createWithPayload(char_literal444)
                    self.adaptor.addChild(root_0, char_literal444_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:79: ( LT )*
                    while True: #loop228
                        alt228 = 2
                        LA228_0 = self.input.LA(1)

                        if (LA228_0 == LT) :
                            LA228_2 = self.input.LA(2)

                            if (self.synpred275()) :
                                alt228 = 1




                        if alt228 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT445 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3133)
                            if self.failed:
                                return retval


                        else:
                            break #loop228


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3137)
                    assignmentExpressionNoIn446 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpressionNoIn446.tree)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 69, conditionalExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end conditionalExpressionNoIn

    class logicalORExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalORExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:453:1: logicalORExpression : logicalANDExpression ( ( LT )* '||' ( LT )* logicalANDExpression )* ;
    def logicalORExpression(self, ):

        retval = self.logicalORExpression_return()
        retval.start = self.input.LT(1)
        logicalORExpression_StartIndex = self.input.index()
        root_0 = None

        LT448 = None
        string_literal449 = None
        LT450 = None
        logicalANDExpression447 = None

        logicalANDExpression451 = None


        LT448_tree = None
        string_literal449_tree = None
        LT450_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 70):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:2: ( logicalANDExpression ( ( LT )* '||' ( LT )* logicalANDExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:4: logicalANDExpression ( ( LT )* '||' ( LT )* logicalANDExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalANDExpression_in_logicalORExpression3150)
                logicalANDExpression447 = self.logicalANDExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalANDExpression447.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:25: ( ( LT )* '||' ( LT )* logicalANDExpression )*
                while True: #loop232
                    alt232 = 2
                    LA232_0 = self.input.LA(1)

                    if (LA232_0 == LT) :
                        LA232_1 = self.input.LA(2)

                        if (self.synpred279()) :
                            alt232 = 1


                    elif (LA232_0 == 125) :
                        LA232_3 = self.input.LA(2)

                        if (self.synpred279()) :
                            alt232 = 1




                    if alt232 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:26: ( LT )* '||' ( LT )* logicalANDExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:28: ( LT )*
                        while True: #loop230
                            alt230 = 2
                            LA230_0 = self.input.LA(1)

                            if (LA230_0 == LT) :
                                alt230 = 1


                            if alt230 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT448 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpression3153)
                                if self.failed:
                                    return retval


                            else:
                                break #loop230


                        string_literal449 = self.input.LT(1)
                        self.match(self.input, 125, self.FOLLOW_125_in_logicalORExpression3157)
                        if self.failed:
                            return retval

                        string_literal449_tree = self.adaptor.createWithPayload(string_literal449)
                        self.adaptor.addChild(root_0, string_literal449_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:38: ( LT )*
                        while True: #loop231
                            alt231 = 2
                            LA231_0 = self.input.LA(1)

                            if (LA231_0 == LT) :
                                LA231_2 = self.input.LA(2)

                                if (self.synpred278()) :
                                    alt231 = 1




                            if alt231 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT450 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpression3159)
                                if self.failed:
                                    return retval


                            else:
                                break #loop231


                        self.following.append(self.FOLLOW_logicalANDExpression_in_logicalORExpression3163)
                        logicalANDExpression451 = self.logicalANDExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, logicalANDExpression451.tree)


                    else:
                        break #loop232





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 70, logicalORExpression_StartIndex)

            pass

        return retval

    # $ANTLR end logicalORExpression

    class logicalORExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalORExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:457:1: logicalORExpressionNoIn : logicalANDExpressionNoIn ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )* ;
    def logicalORExpressionNoIn(self, ):

        retval = self.logicalORExpressionNoIn_return()
        retval.start = self.input.LT(1)
        logicalORExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT453 = None
        string_literal454 = None
        LT455 = None
        logicalANDExpressionNoIn452 = None

        logicalANDExpressionNoIn456 = None


        LT453_tree = None
        string_literal454_tree = None
        LT455_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 71):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:2: ( logicalANDExpressionNoIn ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:4: logicalANDExpressionNoIn ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3177)
                logicalANDExpressionNoIn452 = self.logicalANDExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalANDExpressionNoIn452.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:29: ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )*
                while True: #loop235
                    alt235 = 2
                    alt235 = self.dfa235.predict(self.input)
                    if alt235 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:30: ( LT )* '||' ( LT )* logicalANDExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:32: ( LT )*
                        while True: #loop233
                            alt233 = 2
                            LA233_0 = self.input.LA(1)

                            if (LA233_0 == LT) :
                                alt233 = 1


                            if alt233 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT453 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpressionNoIn3180)
                                if self.failed:
                                    return retval


                            else:
                                break #loop233


                        string_literal454 = self.input.LT(1)
                        self.match(self.input, 125, self.FOLLOW_125_in_logicalORExpressionNoIn3184)
                        if self.failed:
                            return retval

                        string_literal454_tree = self.adaptor.createWithPayload(string_literal454)
                        self.adaptor.addChild(root_0, string_literal454_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:42: ( LT )*
                        while True: #loop234
                            alt234 = 2
                            LA234_0 = self.input.LA(1)

                            if (LA234_0 == LT) :
                                LA234_2 = self.input.LA(2)

                                if (self.synpred281()) :
                                    alt234 = 1




                            if alt234 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT455 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpressionNoIn3186)
                                if self.failed:
                                    return retval


                            else:
                                break #loop234


                        self.following.append(self.FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3190)
                        logicalANDExpressionNoIn456 = self.logicalANDExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, logicalANDExpressionNoIn456.tree)


                    else:
                        break #loop235





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 71, logicalORExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end logicalORExpressionNoIn

    class logicalANDExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalANDExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:461:1: logicalANDExpression : bitwiseORExpression ( ( LT )* '&&' ( LT )* bitwiseORExpression )* ;
    def logicalANDExpression(self, ):

        retval = self.logicalANDExpression_return()
        retval.start = self.input.LT(1)
        logicalANDExpression_StartIndex = self.input.index()
        root_0 = None

        LT458 = None
        string_literal459 = None
        LT460 = None
        bitwiseORExpression457 = None

        bitwiseORExpression461 = None


        LT458_tree = None
        string_literal459_tree = None
        LT460_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 72):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:2: ( bitwiseORExpression ( ( LT )* '&&' ( LT )* bitwiseORExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:4: bitwiseORExpression ( ( LT )* '&&' ( LT )* bitwiseORExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseORExpression_in_logicalANDExpression3204)
                bitwiseORExpression457 = self.bitwiseORExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseORExpression457.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:24: ( ( LT )* '&&' ( LT )* bitwiseORExpression )*
                while True: #loop238
                    alt238 = 2
                    LA238_0 = self.input.LA(1)

                    if (LA238_0 == LT) :
                        LA238_1 = self.input.LA(2)

                        if (self.synpred285()) :
                            alt238 = 1


                    elif (LA238_0 == 126) :
                        LA238_3 = self.input.LA(2)

                        if (self.synpred285()) :
                            alt238 = 1




                    if alt238 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:25: ( LT )* '&&' ( LT )* bitwiseORExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:27: ( LT )*
                        while True: #loop236
                            alt236 = 2
                            LA236_0 = self.input.LA(1)

                            if (LA236_0 == LT) :
                                alt236 = 1


                            if alt236 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT458 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpression3207)
                                if self.failed:
                                    return retval


                            else:
                                break #loop236


                        string_literal459 = self.input.LT(1)
                        self.match(self.input, 126, self.FOLLOW_126_in_logicalANDExpression3211)
                        if self.failed:
                            return retval

                        string_literal459_tree = self.adaptor.createWithPayload(string_literal459)
                        self.adaptor.addChild(root_0, string_literal459_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:37: ( LT )*
                        while True: #loop237
                            alt237 = 2
                            LA237_0 = self.input.LA(1)

                            if (LA237_0 == LT) :
                                LA237_2 = self.input.LA(2)

                                if (self.synpred284()) :
                                    alt237 = 1




                            if alt237 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT460 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpression3213)
                                if self.failed:
                                    return retval


                            else:
                                break #loop237


                        self.following.append(self.FOLLOW_bitwiseORExpression_in_logicalANDExpression3217)
                        bitwiseORExpression461 = self.bitwiseORExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseORExpression461.tree)


                    else:
                        break #loop238





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 72, logicalANDExpression_StartIndex)

            pass

        return retval

    # $ANTLR end logicalANDExpression

    class logicalANDExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalANDExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:465:1: logicalANDExpressionNoIn : bitwiseORExpressionNoIn ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )* ;
    def logicalANDExpressionNoIn(self, ):

        retval = self.logicalANDExpressionNoIn_return()
        retval.start = self.input.LT(1)
        logicalANDExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT463 = None
        string_literal464 = None
        LT465 = None
        bitwiseORExpressionNoIn462 = None

        bitwiseORExpressionNoIn466 = None


        LT463_tree = None
        string_literal464_tree = None
        LT465_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 73):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:2: ( bitwiseORExpressionNoIn ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:4: bitwiseORExpressionNoIn ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3231)
                bitwiseORExpressionNoIn462 = self.bitwiseORExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseORExpressionNoIn462.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:28: ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )*
                while True: #loop241
                    alt241 = 2
                    alt241 = self.dfa241.predict(self.input)
                    if alt241 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:29: ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:31: ( LT )*
                        while True: #loop239
                            alt239 = 2
                            LA239_0 = self.input.LA(1)

                            if (LA239_0 == LT) :
                                alt239 = 1


                            if alt239 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT463 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpressionNoIn3234)
                                if self.failed:
                                    return retval


                            else:
                                break #loop239


                        string_literal464 = self.input.LT(1)
                        self.match(self.input, 126, self.FOLLOW_126_in_logicalANDExpressionNoIn3238)
                        if self.failed:
                            return retval

                        string_literal464_tree = self.adaptor.createWithPayload(string_literal464)
                        self.adaptor.addChild(root_0, string_literal464_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:41: ( LT )*
                        while True: #loop240
                            alt240 = 2
                            LA240_0 = self.input.LA(1)

                            if (LA240_0 == LT) :
                                LA240_2 = self.input.LA(2)

                                if (self.synpred287()) :
                                    alt240 = 1




                            if alt240 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT465 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpressionNoIn3240)
                                if self.failed:
                                    return retval


                            else:
                                break #loop240


                        self.following.append(self.FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3244)
                        bitwiseORExpressionNoIn466 = self.bitwiseORExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseORExpressionNoIn466.tree)


                    else:
                        break #loop241





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 73, logicalANDExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end logicalANDExpressionNoIn

    class bitwiseORExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseORExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:469:1: bitwiseORExpression : bitwiseXORExpression ( ( LT )* '|' ( LT )* bitwiseXORExpression )* ;
    def bitwiseORExpression(self, ):

        retval = self.bitwiseORExpression_return()
        retval.start = self.input.LT(1)
        bitwiseORExpression_StartIndex = self.input.index()
        root_0 = None

        LT468 = None
        char_literal469 = None
        LT470 = None
        bitwiseXORExpression467 = None

        bitwiseXORExpression471 = None


        LT468_tree = None
        char_literal469_tree = None
        LT470_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 74):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:2: ( bitwiseXORExpression ( ( LT )* '|' ( LT )* bitwiseXORExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:4: bitwiseXORExpression ( ( LT )* '|' ( LT )* bitwiseXORExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3258)
                bitwiseXORExpression467 = self.bitwiseXORExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseXORExpression467.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:25: ( ( LT )* '|' ( LT )* bitwiseXORExpression )*
                while True: #loop244
                    alt244 = 2
                    LA244_0 = self.input.LA(1)

                    if (LA244_0 == LT) :
                        LA244_1 = self.input.LA(2)

                        if (self.synpred291()) :
                            alt244 = 1


                    elif (LA244_0 == 127) :
                        LA244_3 = self.input.LA(2)

                        if (self.synpred291()) :
                            alt244 = 1




                    if alt244 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:26: ( LT )* '|' ( LT )* bitwiseXORExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:28: ( LT )*
                        while True: #loop242
                            alt242 = 2
                            LA242_0 = self.input.LA(1)

                            if (LA242_0 == LT) :
                                alt242 = 1


                            if alt242 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT468 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpression3261)
                                if self.failed:
                                    return retval


                            else:
                                break #loop242


                        char_literal469 = self.input.LT(1)
                        self.match(self.input, 127, self.FOLLOW_127_in_bitwiseORExpression3265)
                        if self.failed:
                            return retval

                        char_literal469_tree = self.adaptor.createWithPayload(char_literal469)
                        self.adaptor.addChild(root_0, char_literal469_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:37: ( LT )*
                        while True: #loop243
                            alt243 = 2
                            LA243_0 = self.input.LA(1)

                            if (LA243_0 == LT) :
                                LA243_2 = self.input.LA(2)

                                if (self.synpred290()) :
                                    alt243 = 1




                            if alt243 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT470 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpression3267)
                                if self.failed:
                                    return retval


                            else:
                                break #loop243


                        self.following.append(self.FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3271)
                        bitwiseXORExpression471 = self.bitwiseXORExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseXORExpression471.tree)


                    else:
                        break #loop244





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 74, bitwiseORExpression_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseORExpression

    class bitwiseORExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseORExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:473:1: bitwiseORExpressionNoIn : bitwiseXORExpressionNoIn ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )* ;
    def bitwiseORExpressionNoIn(self, ):

        retval = self.bitwiseORExpressionNoIn_return()
        retval.start = self.input.LT(1)
        bitwiseORExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT473 = None
        char_literal474 = None
        LT475 = None
        bitwiseXORExpressionNoIn472 = None

        bitwiseXORExpressionNoIn476 = None


        LT473_tree = None
        char_literal474_tree = None
        LT475_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 75):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:2: ( bitwiseXORExpressionNoIn ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:4: bitwiseXORExpressionNoIn ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3285)
                bitwiseXORExpressionNoIn472 = self.bitwiseXORExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseXORExpressionNoIn472.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:29: ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )*
                while True: #loop247
                    alt247 = 2
                    alt247 = self.dfa247.predict(self.input)
                    if alt247 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:30: ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:32: ( LT )*
                        while True: #loop245
                            alt245 = 2
                            LA245_0 = self.input.LA(1)

                            if (LA245_0 == LT) :
                                alt245 = 1


                            if alt245 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT473 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpressionNoIn3288)
                                if self.failed:
                                    return retval


                            else:
                                break #loop245


                        char_literal474 = self.input.LT(1)
                        self.match(self.input, 127, self.FOLLOW_127_in_bitwiseORExpressionNoIn3292)
                        if self.failed:
                            return retval

                        char_literal474_tree = self.adaptor.createWithPayload(char_literal474)
                        self.adaptor.addChild(root_0, char_literal474_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:41: ( LT )*
                        while True: #loop246
                            alt246 = 2
                            LA246_0 = self.input.LA(1)

                            if (LA246_0 == LT) :
                                LA246_2 = self.input.LA(2)

                                if (self.synpred293()) :
                                    alt246 = 1




                            if alt246 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT475 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpressionNoIn3294)
                                if self.failed:
                                    return retval


                            else:
                                break #loop246


                        self.following.append(self.FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3298)
                        bitwiseXORExpressionNoIn476 = self.bitwiseXORExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseXORExpressionNoIn476.tree)


                    else:
                        break #loop247





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 75, bitwiseORExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseORExpressionNoIn

    class bitwiseXORExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseXORExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:477:1: bitwiseXORExpression : bitwiseANDExpression ( ( LT )* '^' ( LT )* bitwiseANDExpression )* ;
    def bitwiseXORExpression(self, ):

        retval = self.bitwiseXORExpression_return()
        retval.start = self.input.LT(1)
        bitwiseXORExpression_StartIndex = self.input.index()
        root_0 = None

        LT478 = None
        char_literal479 = None
        LT480 = None
        bitwiseANDExpression477 = None

        bitwiseANDExpression481 = None


        LT478_tree = None
        char_literal479_tree = None
        LT480_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 76):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:2: ( bitwiseANDExpression ( ( LT )* '^' ( LT )* bitwiseANDExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:4: bitwiseANDExpression ( ( LT )* '^' ( LT )* bitwiseANDExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3312)
                bitwiseANDExpression477 = self.bitwiseANDExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseANDExpression477.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:25: ( ( LT )* '^' ( LT )* bitwiseANDExpression )*
                while True: #loop250
                    alt250 = 2
                    LA250_0 = self.input.LA(1)

                    if (LA250_0 == LT) :
                        LA250_1 = self.input.LA(2)

                        if (self.synpred297()) :
                            alt250 = 1


                    elif (LA250_0 == 128) :
                        LA250_3 = self.input.LA(2)

                        if (self.synpred297()) :
                            alt250 = 1




                    if alt250 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:26: ( LT )* '^' ( LT )* bitwiseANDExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:28: ( LT )*
                        while True: #loop248
                            alt248 = 2
                            LA248_0 = self.input.LA(1)

                            if (LA248_0 == LT) :
                                alt248 = 1


                            if alt248 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT478 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpression3315)
                                if self.failed:
                                    return retval


                            else:
                                break #loop248


                        char_literal479 = self.input.LT(1)
                        self.match(self.input, 128, self.FOLLOW_128_in_bitwiseXORExpression3319)
                        if self.failed:
                            return retval

                        char_literal479_tree = self.adaptor.createWithPayload(char_literal479)
                        self.adaptor.addChild(root_0, char_literal479_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:37: ( LT )*
                        while True: #loop249
                            alt249 = 2
                            LA249_0 = self.input.LA(1)

                            if (LA249_0 == LT) :
                                LA249_2 = self.input.LA(2)

                                if (self.synpred296()) :
                                    alt249 = 1




                            if alt249 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT480 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpression3321)
                                if self.failed:
                                    return retval


                            else:
                                break #loop249


                        self.following.append(self.FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3325)
                        bitwiseANDExpression481 = self.bitwiseANDExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseANDExpression481.tree)


                    else:
                        break #loop250





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 76, bitwiseXORExpression_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseXORExpression

    class bitwiseXORExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseXORExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:481:1: bitwiseXORExpressionNoIn : bitwiseANDExpressionNoIn ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )* ;
    def bitwiseXORExpressionNoIn(self, ):

        retval = self.bitwiseXORExpressionNoIn_return()
        retval.start = self.input.LT(1)
        bitwiseXORExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT483 = None
        char_literal484 = None
        LT485 = None
        bitwiseANDExpressionNoIn482 = None

        bitwiseANDExpressionNoIn486 = None


        LT483_tree = None
        char_literal484_tree = None
        LT485_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 77):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:2: ( bitwiseANDExpressionNoIn ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:4: bitwiseANDExpressionNoIn ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3339)
                bitwiseANDExpressionNoIn482 = self.bitwiseANDExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseANDExpressionNoIn482.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:29: ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )*
                while True: #loop253
                    alt253 = 2
                    alt253 = self.dfa253.predict(self.input)
                    if alt253 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:30: ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:32: ( LT )*
                        while True: #loop251
                            alt251 = 2
                            LA251_0 = self.input.LA(1)

                            if (LA251_0 == LT) :
                                alt251 = 1


                            if alt251 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT483 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpressionNoIn3342)
                                if self.failed:
                                    return retval


                            else:
                                break #loop251


                        char_literal484 = self.input.LT(1)
                        self.match(self.input, 128, self.FOLLOW_128_in_bitwiseXORExpressionNoIn3346)
                        if self.failed:
                            return retval

                        char_literal484_tree = self.adaptor.createWithPayload(char_literal484)
                        self.adaptor.addChild(root_0, char_literal484_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:41: ( LT )*
                        while True: #loop252
                            alt252 = 2
                            LA252_0 = self.input.LA(1)

                            if (LA252_0 == LT) :
                                LA252_2 = self.input.LA(2)

                                if (self.synpred299()) :
                                    alt252 = 1




                            if alt252 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT485 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpressionNoIn3348)
                                if self.failed:
                                    return retval


                            else:
                                break #loop252


                        self.following.append(self.FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3352)
                        bitwiseANDExpressionNoIn486 = self.bitwiseANDExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseANDExpressionNoIn486.tree)


                    else:
                        break #loop253





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 77, bitwiseXORExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseXORExpressionNoIn

    class bitwiseANDExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseANDExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:485:1: bitwiseANDExpression : equalityExpression ( ( LT )* '&' ( LT )* equalityExpression )* ;
    def bitwiseANDExpression(self, ):

        retval = self.bitwiseANDExpression_return()
        retval.start = self.input.LT(1)
        bitwiseANDExpression_StartIndex = self.input.index()
        root_0 = None

        LT488 = None
        char_literal489 = None
        LT490 = None
        equalityExpression487 = None

        equalityExpression491 = None


        LT488_tree = None
        char_literal489_tree = None
        LT490_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 78):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:2: ( equalityExpression ( ( LT )* '&' ( LT )* equalityExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:4: equalityExpression ( ( LT )* '&' ( LT )* equalityExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_equalityExpression_in_bitwiseANDExpression3366)
                equalityExpression487 = self.equalityExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, equalityExpression487.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:23: ( ( LT )* '&' ( LT )* equalityExpression )*
                while True: #loop256
                    alt256 = 2
                    LA256_0 = self.input.LA(1)

                    if (LA256_0 == LT) :
                        LA256_1 = self.input.LA(2)

                        if (self.synpred303()) :
                            alt256 = 1


                    elif (LA256_0 == 129) :
                        LA256_3 = self.input.LA(2)

                        if (self.synpred303()) :
                            alt256 = 1




                    if alt256 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:24: ( LT )* '&' ( LT )* equalityExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:26: ( LT )*
                        while True: #loop254
                            alt254 = 2
                            LA254_0 = self.input.LA(1)

                            if (LA254_0 == LT) :
                                alt254 = 1


                            if alt254 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT488 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpression3369)
                                if self.failed:
                                    return retval


                            else:
                                break #loop254


                        char_literal489 = self.input.LT(1)
                        self.match(self.input, 129, self.FOLLOW_129_in_bitwiseANDExpression3373)
                        if self.failed:
                            return retval

                        char_literal489_tree = self.adaptor.createWithPayload(char_literal489)
                        self.adaptor.addChild(root_0, char_literal489_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:35: ( LT )*
                        while True: #loop255
                            alt255 = 2
                            LA255_0 = self.input.LA(1)

                            if (LA255_0 == LT) :
                                LA255_2 = self.input.LA(2)

                                if (self.synpred302()) :
                                    alt255 = 1




                            if alt255 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT490 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpression3375)
                                if self.failed:
                                    return retval


                            else:
                                break #loop255


                        self.following.append(self.FOLLOW_equalityExpression_in_bitwiseANDExpression3379)
                        equalityExpression491 = self.equalityExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, equalityExpression491.tree)


                    else:
                        break #loop256





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 78, bitwiseANDExpression_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseANDExpression

    class bitwiseANDExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseANDExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:489:1: bitwiseANDExpressionNoIn : equalityExpressionNoIn ( ( LT )* '&' ( LT )* equalityExpressionNoIn )* ;
    def bitwiseANDExpressionNoIn(self, ):

        retval = self.bitwiseANDExpressionNoIn_return()
        retval.start = self.input.LT(1)
        bitwiseANDExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT493 = None
        char_literal494 = None
        LT495 = None
        equalityExpressionNoIn492 = None

        equalityExpressionNoIn496 = None


        LT493_tree = None
        char_literal494_tree = None
        LT495_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 79):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:2: ( equalityExpressionNoIn ( ( LT )* '&' ( LT )* equalityExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:4: equalityExpressionNoIn ( ( LT )* '&' ( LT )* equalityExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3393)
                equalityExpressionNoIn492 = self.equalityExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, equalityExpressionNoIn492.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:27: ( ( LT )* '&' ( LT )* equalityExpressionNoIn )*
                while True: #loop259
                    alt259 = 2
                    alt259 = self.dfa259.predict(self.input)
                    if alt259 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:28: ( LT )* '&' ( LT )* equalityExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:30: ( LT )*
                        while True: #loop257
                            alt257 = 2
                            LA257_0 = self.input.LA(1)

                            if (LA257_0 == LT) :
                                alt257 = 1


                            if alt257 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT493 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpressionNoIn3396)
                                if self.failed:
                                    return retval


                            else:
                                break #loop257


                        char_literal494 = self.input.LT(1)
                        self.match(self.input, 129, self.FOLLOW_129_in_bitwiseANDExpressionNoIn3400)
                        if self.failed:
                            return retval

                        char_literal494_tree = self.adaptor.createWithPayload(char_literal494)
                        self.adaptor.addChild(root_0, char_literal494_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:39: ( LT )*
                        while True: #loop258
                            alt258 = 2
                            LA258_0 = self.input.LA(1)

                            if (LA258_0 == LT) :
                                LA258_2 = self.input.LA(2)

                                if (self.synpred305()) :
                                    alt258 = 1




                            if alt258 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT495 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpressionNoIn3402)
                                if self.failed:
                                    return retval


                            else:
                                break #loop258


                        self.following.append(self.FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3406)
                        equalityExpressionNoIn496 = self.equalityExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, equalityExpressionNoIn496.tree)


                    else:
                        break #loop259





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 79, bitwiseANDExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseANDExpressionNoIn

    class equalityExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start equalityExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:493:1: equalityExpression : relationalExpression ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )* ;
    def equalityExpression(self, ):

        retval = self.equalityExpression_return()
        retval.start = self.input.LT(1)
        equalityExpression_StartIndex = self.input.index()
        root_0 = None

        LT498 = None
        set499 = None
        LT500 = None
        relationalExpression497 = None

        relationalExpression501 = None


        LT498_tree = None
        set499_tree = None
        LT500_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 80):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:2: ( relationalExpression ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:4: relationalExpression ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_relationalExpression_in_equalityExpression3420)
                relationalExpression497 = self.relationalExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, relationalExpression497.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:25: ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )*
                while True: #loop262
                    alt262 = 2
                    LA262_0 = self.input.LA(1)

                    if (LA262_0 == LT) :
                        LA262_1 = self.input.LA(2)

                        if (self.synpred312()) :
                            alt262 = 1


                    elif ((130 <= LA262_0 <= 133)) :
                        LA262_3 = self.input.LA(2)

                        if (self.synpred312()) :
                            alt262 = 1




                    if alt262 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:26: ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:28: ( LT )*
                        while True: #loop260
                            alt260 = 2
                            LA260_0 = self.input.LA(1)

                            if (LA260_0 == LT) :
                                alt260 = 1


                            if alt260 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT498 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpression3423)
                                if self.failed:
                                    return retval


                            else:
                                break #loop260


                        set499 = self.input.LT(1)
                        if (130 <= self.input.LA(1) <= 133):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set499))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_equalityExpression3427
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:63: ( LT )*
                        while True: #loop261
                            alt261 = 2
                            LA261_0 = self.input.LA(1)

                            if (LA261_0 == LT) :
                                LA261_2 = self.input.LA(2)

                                if (self.synpred311()) :
                                    alt261 = 1




                            if alt261 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT500 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpression3443)
                                if self.failed:
                                    return retval


                            else:
                                break #loop261


                        self.following.append(self.FOLLOW_relationalExpression_in_equalityExpression3447)
                        relationalExpression501 = self.relationalExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, relationalExpression501.tree)


                    else:
                        break #loop262





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 80, equalityExpression_StartIndex)

            pass

        return retval

    # $ANTLR end equalityExpression

    class equalityExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start equalityExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:497:1: equalityExpressionNoIn : relationalExpressionNoIn ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )* ;
    def equalityExpressionNoIn(self, ):

        retval = self.equalityExpressionNoIn_return()
        retval.start = self.input.LT(1)
        equalityExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT503 = None
        set504 = None
        LT505 = None
        relationalExpressionNoIn502 = None

        relationalExpressionNoIn506 = None


        LT503_tree = None
        set504_tree = None
        LT505_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 81):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:2: ( relationalExpressionNoIn ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:4: relationalExpressionNoIn ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3460)
                relationalExpressionNoIn502 = self.relationalExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, relationalExpressionNoIn502.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:29: ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )*
                while True: #loop265
                    alt265 = 2
                    alt265 = self.dfa265.predict(self.input)
                    if alt265 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:30: ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:32: ( LT )*
                        while True: #loop263
                            alt263 = 2
                            LA263_0 = self.input.LA(1)

                            if (LA263_0 == LT) :
                                alt263 = 1


                            if alt263 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT503 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpressionNoIn3463)
                                if self.failed:
                                    return retval


                            else:
                                break #loop263


                        set504 = self.input.LT(1)
                        if (130 <= self.input.LA(1) <= 133):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set504))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_equalityExpressionNoIn3467
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:67: ( LT )*
                        while True: #loop264
                            alt264 = 2
                            LA264_0 = self.input.LA(1)

                            if (LA264_0 == LT) :
                                LA264_2 = self.input.LA(2)

                                if (self.synpred317()) :
                                    alt264 = 1




                            if alt264 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT505 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpressionNoIn3483)
                                if self.failed:
                                    return retval


                            else:
                                break #loop264


                        self.following.append(self.FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3487)
                        relationalExpressionNoIn506 = self.relationalExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, relationalExpressionNoIn506.tree)


                    else:
                        break #loop265





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 81, equalityExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end equalityExpressionNoIn

    class relationalExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start relationalExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:501:1: relationalExpression : shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )* ;
    def relationalExpression(self, ):

        retval = self.relationalExpression_return()
        retval.start = self.input.LT(1)
        relationalExpression_StartIndex = self.input.index()
        root_0 = None

        LT508 = None
        set509 = None
        LT510 = None
        shiftExpression507 = None

        shiftExpression511 = None


        LT508_tree = None
        set509_tree = None
        LT510_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 82):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:2: ( shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:4: shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_shiftExpression_in_relationalExpression3501)
                shiftExpression507 = self.shiftExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, shiftExpression507.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:20: ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )*
                while True: #loop268
                    alt268 = 2
                    LA268 = self.input.LA(1)
                    if LA268 == LT:
                        LA268_1 = self.input.LA(2)

                        if (self.synpred326()) :
                            alt268 = 1


                    elif LA268 == 100:
                        LA268_3 = self.input.LA(2)

                        if (self.synpred326()) :
                            alt268 = 1


                    elif LA268 == 72 or LA268 == 73 or LA268 == 134 or LA268 == 135 or LA268 == 136:
                        LA268_4 = self.input.LA(2)

                        if (self.synpred326()) :
                            alt268 = 1



                    if alt268 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:21: ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:23: ( LT )*
                        while True: #loop266
                            alt266 = 2
                            LA266_0 = self.input.LA(1)

                            if (LA266_0 == LT) :
                                alt266 = 1


                            if alt266 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT508 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpression3504)
                                if self.failed:
                                    return retval


                            else:
                                break #loop266


                        set509 = self.input.LT(1)
                        if (72 <= self.input.LA(1) <= 73) or self.input.LA(1) == 100 or (134 <= self.input.LA(1) <= 136):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set509))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_relationalExpression3508
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:76: ( LT )*
                        while True: #loop267
                            alt267 = 2
                            LA267_0 = self.input.LA(1)

                            if (LA267_0 == LT) :
                                LA267_2 = self.input.LA(2)

                                if (self.synpred325()) :
                                    alt267 = 1




                            if alt267 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT510 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpression3532)
                                if self.failed:
                                    return retval


                            else:
                                break #loop267


                        self.following.append(self.FOLLOW_shiftExpression_in_relationalExpression3536)
                        shiftExpression511 = self.shiftExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, shiftExpression511.tree)


                    else:
                        break #loop268





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 82, relationalExpression_StartIndex)

            pass

        return retval

    # $ANTLR end relationalExpression

    class relationalExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start relationalExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:505:1: relationalExpressionNoIn : shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )* ;
    def relationalExpressionNoIn(self, ):

        retval = self.relationalExpressionNoIn_return()
        retval.start = self.input.LT(1)
        relationalExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT513 = None
        set514 = None
        LT515 = None
        shiftExpression512 = None

        shiftExpression516 = None


        LT513_tree = None
        set514_tree = None
        LT515_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 83):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:2: ( shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:4: shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_shiftExpression_in_relationalExpressionNoIn3549)
                shiftExpression512 = self.shiftExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, shiftExpression512.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:20: ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )*
                while True: #loop271
                    alt271 = 2
                    alt271 = self.dfa271.predict(self.input)
                    if alt271 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:21: ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:23: ( LT )*
                        while True: #loop269
                            alt269 = 2
                            LA269_0 = self.input.LA(1)

                            if (LA269_0 == LT) :
                                alt269 = 1


                            if alt269 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT513 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpressionNoIn3552)
                                if self.failed:
                                    return retval


                            else:
                                break #loop269


                        set514 = self.input.LT(1)
                        if (72 <= self.input.LA(1) <= 73) or (134 <= self.input.LA(1) <= 136):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set514))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_relationalExpressionNoIn3556
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:69: ( LT )*
                        while True: #loop270
                            alt270 = 2
                            LA270_0 = self.input.LA(1)

                            if (LA270_0 == LT) :
                                LA270_2 = self.input.LA(2)

                                if (self.synpred332()) :
                                    alt270 = 1




                            if alt270 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT515 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpressionNoIn3576)
                                if self.failed:
                                    return retval


                            else:
                                break #loop270


                        self.following.append(self.FOLLOW_shiftExpression_in_relationalExpressionNoIn3580)
                        shiftExpression516 = self.shiftExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, shiftExpression516.tree)


                    else:
                        break #loop271





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 83, relationalExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end relationalExpressionNoIn

    class shiftExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start shiftExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:509:1: shiftExpression : additiveExpression ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )* ;
    def shiftExpression(self, ):

        retval = self.shiftExpression_return()
        retval.start = self.input.LT(1)
        shiftExpression_StartIndex = self.input.index()
        root_0 = None

        LT518 = None
        set519 = None
        LT520 = None
        additiveExpression517 = None

        additiveExpression521 = None


        LT518_tree = None
        set519_tree = None
        LT520_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 84):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:2: ( additiveExpression ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:4: additiveExpression ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_additiveExpression_in_shiftExpression3593)
                additiveExpression517 = self.additiveExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, additiveExpression517.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:23: ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )*
                while True: #loop274
                    alt274 = 2
                    LA274_0 = self.input.LA(1)

                    if (LA274_0 == LT) :
                        LA274_1 = self.input.LA(2)

                        if (self.synpred338()) :
                            alt274 = 1


                    elif ((137 <= LA274_0 <= 139)) :
                        LA274_3 = self.input.LA(2)

                        if (self.synpred338()) :
                            alt274 = 1




                    if alt274 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:24: ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:26: ( LT )*
                        while True: #loop272
                            alt272 = 2
                            LA272_0 = self.input.LA(1)

                            if (LA272_0 == LT) :
                                alt272 = 1


                            if alt272 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT518 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_shiftExpression3596)
                                if self.failed:
                                    return retval


                            else:
                                break #loop272


                        set519 = self.input.LT(1)
                        if (137 <= self.input.LA(1) <= 139):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set519))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_shiftExpression3600
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:53: ( LT )*
                        while True: #loop273
                            alt273 = 2
                            LA273_0 = self.input.LA(1)

                            if (LA273_0 == LT) :
                                LA273_2 = self.input.LA(2)

                                if (self.synpred337()) :
                                    alt273 = 1




                            if alt273 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT520 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_shiftExpression3612)
                                if self.failed:
                                    return retval


                            else:
                                break #loop273


                        self.following.append(self.FOLLOW_additiveExpression_in_shiftExpression3616)
                        additiveExpression521 = self.additiveExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, additiveExpression521.tree)


                    else:
                        break #loop274





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 84, shiftExpression_StartIndex)

            pass

        return retval

    # $ANTLR end shiftExpression

    class additiveExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start additiveExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:513:1: additiveExpression : multiplicativeExpression ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )* ;
    def additiveExpression(self, ):

        retval = self.additiveExpression_return()
        retval.start = self.input.LT(1)
        additiveExpression_StartIndex = self.input.index()
        root_0 = None

        LT523 = None
        set524 = None
        LT525 = None
        multiplicativeExpression522 = None

        multiplicativeExpression526 = None


        LT523_tree = None
        set524_tree = None
        LT525_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 85):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:2: ( multiplicativeExpression ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:4: multiplicativeExpression ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_multiplicativeExpression_in_additiveExpression3629)
                multiplicativeExpression522 = self.multiplicativeExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, multiplicativeExpression522.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:29: ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )*
                while True: #loop277
                    alt277 = 2
                    LA277_0 = self.input.LA(1)

                    if (LA277_0 == LT) :
                        LA277_1 = self.input.LA(2)

                        if (self.synpred342()) :
                            alt277 = 1


                    elif (LA277_0 == 76 or LA277_0 == 140) :
                        LA277_3 = self.input.LA(2)

                        if (self.synpred342()) :
                            alt277 = 1




                    if alt277 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:30: ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:32: ( LT )*
                        while True: #loop275
                            alt275 = 2
                            LA275_0 = self.input.LA(1)

                            if (LA275_0 == LT) :
                                alt275 = 1


                            if alt275 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT523 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_additiveExpression3632)
                                if self.failed:
                                    return retval


                            else:
                                break #loop275


                        set524 = self.input.LT(1)
                        if self.input.LA(1) == 76 or self.input.LA(1) == 140:
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set524))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_additiveExpression3636
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:49: ( LT )*
                        while True: #loop276
                            alt276 = 2
                            LA276_0 = self.input.LA(1)

                            if (LA276_0 == LT) :
                                LA276_2 = self.input.LA(2)

                                if (self.synpred341()) :
                                    alt276 = 1




                            if alt276 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT525 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_additiveExpression3644)
                                if self.failed:
                                    return retval


                            else:
                                break #loop276


                        self.following.append(self.FOLLOW_multiplicativeExpression_in_additiveExpression3648)
                        multiplicativeExpression526 = self.multiplicativeExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, multiplicativeExpression526.tree)


                    else:
                        break #loop277





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 85, additiveExpression_StartIndex)

            pass

        return retval

    # $ANTLR end additiveExpression

    class multiplicativeExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start multiplicativeExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:517:1: multiplicativeExpression : unaryExpression ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )* ;
    def multiplicativeExpression(self, ):

        retval = self.multiplicativeExpression_return()
        retval.start = self.input.LT(1)
        multiplicativeExpression_StartIndex = self.input.index()
        root_0 = None

        LT528 = None
        set529 = None
        LT530 = None
        unaryExpression527 = None

        unaryExpression531 = None


        LT528_tree = None
        set529_tree = None
        LT530_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 86):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:2: ( unaryExpression ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:4: unaryExpression ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_unaryExpression_in_multiplicativeExpression3661)
                unaryExpression527 = self.unaryExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, unaryExpression527.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:20: ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )*
                while True: #loop280
                    alt280 = 2
                    LA280_0 = self.input.LA(1)

                    if (LA280_0 == LT) :
                        LA280_1 = self.input.LA(2)

                        if (self.synpred347()) :
                            alt280 = 1


                    elif (LA280_0 == 74 or LA280_0 == 112 or LA280_0 == 141) :
                        LA280_3 = self.input.LA(2)

                        if (self.synpred347()) :
                            alt280 = 1




                    if alt280 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:21: ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:23: ( LT )*
                        while True: #loop278
                            alt278 = 2
                            LA278_0 = self.input.LA(1)

                            if (LA278_0 == LT) :
                                alt278 = 1


                            if alt278 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT528 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_multiplicativeExpression3664)
                                if self.failed:
                                    return retval


                            else:
                                break #loop278


                        set529 = self.input.LT(1)
                        if self.input.LA(1) == 74 or self.input.LA(1) == 112 or self.input.LA(1) == 141:
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set529))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_multiplicativeExpression3668
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:46: ( LT )*
                        while True: #loop279
                            alt279 = 2
                            LA279_0 = self.input.LA(1)

                            if (LA279_0 == LT) :
                                LA279_2 = self.input.LA(2)

                                if (self.synpred346()) :
                                    alt279 = 1




                            if alt279 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT530 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_multiplicativeExpression3680)
                                if self.failed:
                                    return retval


                            else:
                                break #loop279


                        self.following.append(self.FOLLOW_unaryExpression_in_multiplicativeExpression3684)
                        unaryExpression531 = self.unaryExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, unaryExpression531.tree)


                    else:
                        break #loop280





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 86, multiplicativeExpression_StartIndex)

            pass

        return retval

    # $ANTLR end multiplicativeExpression

    class unaryExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start unaryExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:521:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );
    def unaryExpression(self, ):

        retval = self.unaryExpression_return()
        retval.start = self.input.LT(1)
        unaryExpression_StartIndex = self.input.index()
        root_0 = None

        set533 = None
        postfixExpression532 = None

        unaryExpression534 = None


        set533_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 87):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:2: ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression )
                alt281 = 2
                LA281_0 = self.input.LA(1)

                if ((LT <= LA281_0 <= RegularExpressionHacks) or LA281_0 == 72 or LA281_0 == 74 or LA281_0 == 78 or (80 <= LA281_0 <= 81) or (84 <= LA281_0 <= 86) or LA281_0 == 92 or LA281_0 == 99 or LA281_0 == 110 or (149 <= LA281_0 <= 154)) :
                    alt281 = 1
                elif (LA281_0 == 76 or LA281_0 == 140 or (142 <= LA281_0 <= 148)) :
                    alt281 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("521:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );", 281, 0, self.input)

                    raise nvae

                if alt281 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:4: postfixExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_postfixExpression_in_unaryExpression3697)
                    postfixExpression532 = self.postfixExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, postfixExpression532.tree)


                elif alt281 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:523:4: ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression
                    root_0 = self.adaptor.nil()

                    set533 = self.input.LT(1)
                    if self.input.LA(1) == 76 or self.input.LA(1) == 140 or (142 <= self.input.LA(1) <= 148):
                        self.input.consume();
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set533))
                        self.errorRecovery = False
                        self.failed = False

                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        mse = MismatchedSetException(None, self.input)
                        self.recoverFromMismatchedSet(
                            self.input, mse, self.FOLLOW_set_in_unaryExpression3702
                            )
                        raise mse


                    self.following.append(self.FOLLOW_unaryExpression_in_unaryExpression3738)
                    unaryExpression534 = self.unaryExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, unaryExpression534.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 87, unaryExpression_StartIndex)

            pass

        return retval

    # $ANTLR end unaryExpression

    class postfixExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start postfixExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:1: postfixExpression : leftHandSideExpression ( '++' | '--' )? ;
    def postfixExpression(self, ):

        retval = self.postfixExpression_return()
        retval.start = self.input.LT(1)
        postfixExpression_StartIndex = self.input.index()
        root_0 = None

        set536 = None
        leftHandSideExpression535 = None


        set536_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 88):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:527:2: ( leftHandSideExpression ( '++' | '--' )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:527:4: leftHandSideExpression ( '++' | '--' )?
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_leftHandSideExpression_in_postfixExpression3750)
                leftHandSideExpression535 = self.leftHandSideExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, leftHandSideExpression535.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:527:27: ( '++' | '--' )?
                alt282 = 2
                LA282_0 = self.input.LA(1)

                if ((145 <= LA282_0 <= 146)) :
                    alt282 = 1
                if alt282 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                    set536 = self.input.LT(1)
                    if (145 <= self.input.LA(1) <= 146):
                        self.input.consume();
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set536))
                        self.errorRecovery = False
                        self.failed = False

                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        mse = MismatchedSetException(None, self.input)
                        self.recoverFromMismatchedSet(
                            self.input, mse, self.FOLLOW_set_in_postfixExpression3752
                            )
                        raise mse








                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 88, postfixExpression_StartIndex)

            pass

        return retval

    # $ANTLR end postfixExpression

    class primaryExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start primaryExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:1: primaryExpression : ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' );
    def primaryExpression(self, ):

        retval = self.primaryExpression_return()
        retval.start = self.input.LT(1)
        primaryExpression_StartIndex = self.input.index()
        root_0 = None

        string_literal537 = None
        char_literal543 = None
        LT544 = None
        LT546 = None
        char_literal547 = None
        xmlLiteral538 = None

        identifier539 = None

        literal540 = None

        arrayLiteral541 = None

        objectLiteral542 = None

        expression545 = None


        string_literal537_tree = None
        char_literal543_tree = None
        LT544_tree = None
        LT546_tree = None
        char_literal547_tree = None
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 89):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:531:2: ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' )
                alt285 = 7
                LA285_0 = self.input.LA(1)

                if (LA285_0 == 149) :
                    alt285 = 1
                elif (LA285_0 == LT) and (self.synpred362()):
                    alt285 = 2
                elif (LA285_0 == 72) and (self.synpred362()):
                    alt285 = 2
                elif (LA285_0 == 78) :
                    LA285_4 = self.input.LA(2)

                    if (self.synpred362()) :
                        alt285 = 2
                    elif (self.synpred366()) :
                        alt285 = 6
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("530:1: primaryExpression : ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' );", 285, 4, self.input)

                        raise nvae

                elif (LA285_0 == XMLComment) and (self.synpred362()):
                    alt285 = 2
                elif (LA285_0 == Identifier or (84 <= LA285_0 <= 86) or LA285_0 == 99 or (150 <= LA285_0 <= 151)) :
                    alt285 = 3
                elif (LA285_0 == StringLiteral or LA285_0 == NumericLiteral or LA285_0 == RegularExpressionHacks or LA285_0 == 74 or (152 <= LA285_0 <= 154)) :
                    alt285 = 4
                elif (LA285_0 == 92) :
                    alt285 = 5
                elif (LA285_0 == 81) :
                    alt285 = 7
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("530:1: primaryExpression : ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' );", 285, 0, self.input)

                    raise nvae

                if alt285 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:531:4: 'this'
                    root_0 = self.adaptor.nil()

                    string_literal537 = self.input.LT(1)
                    self.match(self.input, 149, self.FOLLOW_149_in_primaryExpression3770)
                    if self.failed:
                        return retval

                    string_literal537_tree = self.adaptor.createWithPayload(string_literal537)
                    self.adaptor.addChild(root_0, string_literal537_tree)



                elif alt285 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:532:4: ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlLiteral_in_primaryExpression3787)
                    xmlLiteral538 = self.xmlLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlLiteral538.tree)


                elif alt285 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:533:4: identifier
                    self.following.append(self.FOLLOW_identifier_in_primaryExpression3792)
                    identifier539 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier539.tree)
                    # AST Rewrite
                    # elements: identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 534:3: -> ^( VARREF identifier )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:6: ^( VARREF identifier )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARREF, "VARREF"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt285 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:535:4: literal
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_literal_in_primaryExpression3807)
                    literal540 = self.literal()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, literal540.tree)


                elif alt285 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:536:4: arrayLiteral
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_arrayLiteral_in_primaryExpression3812)
                    arrayLiteral541 = self.arrayLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, arrayLiteral541.tree)


                elif alt285 == 6:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:537:4: objectLiteral
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_objectLiteral_in_primaryExpression3817)
                    objectLiteral542 = self.objectLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, objectLiteral542.tree)


                elif alt285 == 7:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:4: '(' ( LT )* expression ( LT )* ')'
                    root_0 = self.adaptor.nil()

                    char_literal543 = self.input.LT(1)
                    self.match(self.input, 81, self.FOLLOW_81_in_primaryExpression3822)
                    if self.failed:
                        return retval

                    char_literal543_tree = self.adaptor.createWithPayload(char_literal543)
                    self.adaptor.addChild(root_0, char_literal543_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:10: ( LT )*
                    while True: #loop283
                        alt283 = 2
                        LA283_0 = self.input.LA(1)

                        if (LA283_0 == LT) :
                            LA283_2 = self.input.LA(2)

                            if (self.synpred367()) :
                                alt283 = 1




                        if alt283 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT544 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_primaryExpression3824)
                            if self.failed:
                                return retval


                        else:
                            break #loop283


                    self.following.append(self.FOLLOW_expression_in_primaryExpression3828)
                    expression545 = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, expression545.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:26: ( LT )*
                    while True: #loop284
                        alt284 = 2
                        LA284_0 = self.input.LA(1)

                        if (LA284_0 == LT) :
                            alt284 = 1


                        if alt284 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT546 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_primaryExpression3830)
                            if self.failed:
                                return retval


                        else:
                            break #loop284


                    char_literal547 = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_primaryExpression3834)
                    if self.failed:
                        return retval

                    char_literal547_tree = self.adaptor.createWithPayload(char_literal547)
                    self.adaptor.addChild(root_0, char_literal547_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 89, primaryExpression_StartIndex)

            pass

        return retval

    # $ANTLR end primaryExpression

    class arrayLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start arrayLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:542:1: arrayLiteral : ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) );
    def arrayLiteral(self, ):

        retval = self.arrayLiteral_return()
        retval.start = self.input.LT(1)
        arrayLiteral_StartIndex = self.input.index()
        root_0 = None

        char_literal548 = None
        LT549 = None
        LT551 = None
        char_literal552 = None
        LT553 = None
        LT555 = None
        char_literal556 = None
        LT557 = None
        char_literal558 = None
        char_literal559 = None
        LT560 = None
        LT561 = None
        string_literal562 = None
        LT563 = None
        string_literal564 = None
        LT565 = None
        char_literal566 = None
        LT567 = None
        LT568 = None
        string_literal569 = None
        LT570 = None
        LT571 = None
        char_literal572 = None
        LT573 = None
        char_literal574 = None
        evalexpr = None

        init = None

        genexpr = None

        assignmentExpression550 = None

        assignmentExpression554 = None


        char_literal548_tree = None
        LT549_tree = None
        LT551_tree = None
        char_literal552_tree = None
        LT553_tree = None
        LT555_tree = None
        char_literal556_tree = None
        LT557_tree = None
        char_literal558_tree = None
        char_literal559_tree = None
        LT560_tree = None
        LT561_tree = None
        string_literal562_tree = None
        LT563_tree = None
        string_literal564_tree = None
        LT565_tree = None
        char_literal566_tree = None
        LT567_tree = None
        LT568_tree = None
        string_literal569_tree = None
        LT570_tree = None
        LT571_tree = None
        char_literal572_tree = None
        LT573_tree = None
        char_literal574_tree = None
        stream_98 = RewriteRuleTokenStream(self.adaptor, "token 98")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_92 = RewriteRuleTokenStream(self.adaptor, "token 92")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_99 = RewriteRuleTokenStream(self.adaptor, "token 99")
        stream_100 = RewriteRuleTokenStream(self.adaptor, "token 100")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_forInStatementInitialiserPart = RewriteRuleSubtreeStream(self.adaptor, "rule forInStatementInitialiserPart")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 90):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:2: ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) )
                alt305 = 2
                LA305_0 = self.input.LA(1)

                if (LA305_0 == 92) :
                    LA305_1 = self.input.LA(2)

                    if (self.synpred378()) :
                        alt305 = 1
                    elif (True) :
                        alt305 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("542:1: arrayLiteral : ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) );", 305, 1, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("542:1: arrayLiteral : ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) );", 305, 0, self.input)

                    raise nvae

                if alt305 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:4: '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']'
                    char_literal548 = self.input.LT(1)
                    self.match(self.input, 92, self.FOLLOW_92_in_arrayLiteral3847)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_92.add(char_literal548)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:8: ( LT )*
                    while True: #loop286
                        alt286 = 2
                        LA286_0 = self.input.LA(1)

                        if (LA286_0 == LT) :
                            LA286_2 = self.input.LA(2)

                            if (self.synpred369()) :
                                alt286 = 1




                        if alt286 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT549 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3849)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT549)


                        else:
                            break #loop286


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:12: ( assignmentExpression )?
                    alt287 = 2
                    alt287 = self.dfa287.predict(self.input)
                    if alt287 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: assignmentExpression
                        self.following.append(self.FOLLOW_assignmentExpression_in_arrayLiteral3852)
                        assignmentExpression550 = self.assignmentExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_assignmentExpression.add(assignmentExpression550.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:34: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )*
                    while True: #loop291
                        alt291 = 2
                        alt291 = self.dfa291.predict(self.input)
                        if alt291 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:35: ( LT )* ',' ( ( LT )* assignmentExpression )?
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:35: ( LT )*
                            while True: #loop288
                                alt288 = 2
                                LA288_0 = self.input.LA(1)

                                if (LA288_0 == LT) :
                                    alt288 = 1


                                if alt288 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT551 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3856)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT551)


                                else:
                                    break #loop288


                            char_literal552 = self.input.LT(1)
                            self.match(self.input, 82, self.FOLLOW_82_in_arrayLiteral3859)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_82.add(char_literal552)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:43: ( ( LT )* assignmentExpression )?
                            alt290 = 2
                            alt290 = self.dfa290.predict(self.input)
                            if alt290 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: ( LT )* assignmentExpression
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: ( LT )*
                                while True: #loop289
                                    alt289 = 2
                                    LA289_0 = self.input.LA(1)

                                    if (LA289_0 == LT) :
                                        LA289_2 = self.input.LA(2)

                                        if (self.synpred372()) :
                                            alt289 = 1




                                    if alt289 == 1:
                                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                        LT553 = self.input.LT(1)
                                        self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3862)
                                        if self.failed:
                                            return retval
                                        if self.backtracking == 0:
                                            stream_LT.add(LT553)


                                    else:
                                        break #loop289


                                self.following.append(self.FOLLOW_assignmentExpression_in_arrayLiteral3865)
                                assignmentExpression554 = self.assignmentExpression()
                                self.following.pop()
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_assignmentExpression.add(assignmentExpression554.tree)





                        else:
                            break #loop291


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:73: ( LT )*
                    while True: #loop292
                        alt292 = 2
                        LA292_0 = self.input.LA(1)

                        if (LA292_0 == LT) :
                            alt292 = 1


                        if alt292 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT555 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3871)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT555)


                        else:
                            break #loop292


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:77: ( ',' ( LT )* )?
                    alt294 = 2
                    LA294_0 = self.input.LA(1)

                    if (LA294_0 == 82) :
                        alt294 = 1
                    if alt294 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:78: ',' ( LT )*
                        char_literal556 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_arrayLiteral3875)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_82.add(char_literal556)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:82: ( LT )*
                        while True: #loop293
                            alt293 = 2
                            LA293_0 = self.input.LA(1)

                            if (LA293_0 == LT) :
                                alt293 = 1


                            if alt293 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT557 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3877)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT557)


                            else:
                                break #loop293





                    char_literal558 = self.input.LT(1)
                    self.match(self.input, 93, self.FOLLOW_93_in_arrayLiteral3882)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_93.add(char_literal558)
                    # AST Rewrite
                    # elements: assignmentExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 544:3: -> ^( ARRAY ( assignmentExpression )* )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:544:6: ^( ARRAY ( assignmentExpression )* )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAY, "ARRAY"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:544:14: ( assignmentExpression )*
                        while stream_assignmentExpression.hasNext():
                            self.adaptor.addChild(root_1, stream_assignmentExpression.next())


                        stream_assignmentExpression.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt305 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:4: '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']'
                    char_literal559 = self.input.LT(1)
                    self.match(self.input, 92, self.FOLLOW_92_in_arrayLiteral3898)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_92.add(char_literal559)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:8: ( LT )*
                    while True: #loop295
                        alt295 = 2
                        LA295_0 = self.input.LA(1)

                        if (LA295_0 == LT) :
                            LA295_2 = self.input.LA(2)

                            if (self.synpred379()) :
                                alt295 = 1




                        if alt295 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT560 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3900)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT560)


                        else:
                            break #loop295


                    self.following.append(self.FOLLOW_expression_in_arrayLiteral3905)
                    evalexpr = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(evalexpr.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:32: ( LT )*
                    while True: #loop296
                        alt296 = 2
                        LA296_0 = self.input.LA(1)

                        if (LA296_0 == LT) :
                            alt296 = 1


                        if alt296 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT561 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3907)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT561)


                        else:
                            break #loop296


                    string_literal562 = self.input.LT(1)
                    self.match(self.input, 98, self.FOLLOW_98_in_arrayLiteral3910)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_98.add(string_literal562)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:42: ( LT )*
                    while True: #loop297
                        alt297 = 2
                        LA297_0 = self.input.LA(1)

                        if (LA297_0 == LT) :
                            LA297_2 = self.input.LA(2)

                            if (self.synpred381()) :
                                alt297 = 1




                        if alt297 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT563 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3912)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT563)


                        else:
                            break #loop297


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:46: ( 'each' )?
                    alt298 = 2
                    LA298_0 = self.input.LA(1)

                    if (LA298_0 == 99) :
                        alt298 = 1
                    if alt298 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: 'each'
                        string_literal564 = self.input.LT(1)
                        self.match(self.input, 99, self.FOLLOW_99_in_arrayLiteral3915)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_99.add(string_literal564)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:54: ( LT )*
                    while True: #loop299
                        alt299 = 2
                        LA299_0 = self.input.LA(1)

                        if (LA299_0 == LT) :
                            alt299 = 1


                        if alt299 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT565 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3918)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT565)


                        else:
                            break #loop299


                    char_literal566 = self.input.LT(1)
                    self.match(self.input, 81, self.FOLLOW_81_in_arrayLiteral3921)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_81.add(char_literal566)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:62: ( LT )*
                    while True: #loop300
                        alt300 = 2
                        LA300_0 = self.input.LA(1)

                        if (LA300_0 == LT) :
                            LA300_2 = self.input.LA(2)

                            if (self.synpred384()) :
                                alt300 = 1




                        if alt300 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT567 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3923)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT567)


                        else:
                            break #loop300


                    self.following.append(self.FOLLOW_forInStatementInitialiserPart_in_arrayLiteral3928)
                    init = self.forInStatementInitialiserPart()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_forInStatementInitialiserPart.add(init.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:101: ( LT )*
                    while True: #loop301
                        alt301 = 2
                        LA301_0 = self.input.LA(1)

                        if (LA301_0 == LT) :
                            alt301 = 1


                        if alt301 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT568 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3930)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT568)


                        else:
                            break #loop301


                    string_literal569 = self.input.LT(1)
                    self.match(self.input, 100, self.FOLLOW_100_in_arrayLiteral3933)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_100.add(string_literal569)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:110: ( LT )*
                    while True: #loop302
                        alt302 = 2
                        LA302_0 = self.input.LA(1)

                        if (LA302_0 == LT) :
                            LA302_2 = self.input.LA(2)

                            if (self.synpred386()) :
                                alt302 = 1




                        if alt302 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT570 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3935)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT570)


                        else:
                            break #loop302


                    self.following.append(self.FOLLOW_expression_in_arrayLiteral3940)
                    genexpr = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(genexpr.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:133: ( LT )*
                    while True: #loop303
                        alt303 = 2
                        LA303_0 = self.input.LA(1)

                        if (LA303_0 == LT) :
                            alt303 = 1


                        if alt303 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT571 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3942)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT571)


                        else:
                            break #loop303


                    char_literal572 = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_arrayLiteral3945)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_83.add(char_literal572)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:141: ( LT )*
                    while True: #loop304
                        alt304 = 2
                        LA304_0 = self.input.LA(1)

                        if (LA304_0 == LT) :
                            alt304 = 1


                        if alt304 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT573 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral3947)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT573)


                        else:
                            break #loop304


                    char_literal574 = self.input.LT(1)
                    self.match(self.input, 93, self.FOLLOW_93_in_arrayLiteral3950)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_93.add(char_literal574)
                    # AST Rewrite
                    # elements: genexpr, init, evalexpr
                    # token labels: 
                    # rule labels: retval, evalexpr, genexpr, init
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        if evalexpr is not None:
                            stream_evalexpr = RewriteRuleSubtreeStream(self.adaptor, "token evalexpr", evalexpr.tree)
                        else:
                            stream_evalexpr = RewriteRuleSubtreeStream(self.adaptor, "token evalexpr", None)


                        if genexpr is not None:
                            stream_genexpr = RewriteRuleSubtreeStream(self.adaptor, "token genexpr", genexpr.tree)
                        else:
                            stream_genexpr = RewriteRuleSubtreeStream(self.adaptor, "token genexpr", None)


                        if init is not None:
                            stream_init = RewriteRuleSubtreeStream(self.adaptor, "token init", init.tree)
                        else:
                            stream_init = RewriteRuleSubtreeStream(self.adaptor, "token init", None)


                        root_0 = self.adaptor.nil()
                        # 546:3: -> ^( ARRAYCOMP $evalexpr $init $genexpr)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:546:6: ^( ARRAYCOMP $evalexpr $init $genexpr)
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAYCOMP, "ARRAYCOMP"), root_1)

                        self.adaptor.addChild(root_1, stream_evalexpr.next())
                        self.adaptor.addChild(root_1, stream_init.next())
                        self.adaptor.addChild(root_1, stream_genexpr.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 90, arrayLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end arrayLiteral

    class objectLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start objectLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:550:1: objectLiteral : '{' ( LT )* ( propertyNameAndValue )? ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* ( ',' ( LT )* )? '}' -> ^( OBJ ( propertyNameAndValue )* ) ;
    def objectLiteral(self, ):

        retval = self.objectLiteral_return()
        retval.start = self.input.LT(1)
        objectLiteral_StartIndex = self.input.index()
        root_0 = None

        char_literal575 = None
        LT576 = None
        LT578 = None
        char_literal579 = None
        LT580 = None
        LT582 = None
        char_literal583 = None
        LT584 = None
        char_literal585 = None
        propertyNameAndValue577 = None

        propertyNameAndValue581 = None


        char_literal575_tree = None
        LT576_tree = None
        LT578_tree = None
        char_literal579_tree = None
        LT580_tree = None
        LT582_tree = None
        char_literal583_tree = None
        LT584_tree = None
        char_literal585_tree = None
        stream_79 = RewriteRuleTokenStream(self.adaptor, "token 79")
        stream_78 = RewriteRuleTokenStream(self.adaptor, "token 78")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_propertyNameAndValue = RewriteRuleSubtreeStream(self.adaptor, "rule propertyNameAndValue")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 91):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:2: ( '{' ( LT )* ( propertyNameAndValue )? ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* ( ',' ( LT )* )? '}' -> ^( OBJ ( propertyNameAndValue )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:4: '{' ( LT )* ( propertyNameAndValue )? ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* ( ',' ( LT )* )? '}'
                char_literal575 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_objectLiteral3986)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_78.add(char_literal575)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:8: ( LT )*
                while True: #loop306
                    alt306 = 2
                    LA306_0 = self.input.LA(1)

                    if (LA306_0 == LT) :
                        LA306_2 = self.input.LA(2)

                        if (self.synpred389()) :
                            alt306 = 1




                    if alt306 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT576 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral3988)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT576)


                    else:
                        break #loop306


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:12: ( propertyNameAndValue )?
                alt307 = 2
                LA307_0 = self.input.LA(1)

                if (LA307_0 == StringLiteral or (NumericLiteral <= LA307_0 <= Identifier) or (84 <= LA307_0 <= 86) or LA307_0 == 99 or (150 <= LA307_0 <= 151)) :
                    alt307 = 1
                if alt307 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: propertyNameAndValue
                    self.following.append(self.FOLLOW_propertyNameAndValue_in_objectLiteral3991)
                    propertyNameAndValue577 = self.propertyNameAndValue()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_propertyNameAndValue.add(propertyNameAndValue577.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:34: ( ( LT )* ',' ( LT )* propertyNameAndValue )*
                while True: #loop310
                    alt310 = 2
                    alt310 = self.dfa310.predict(self.input)
                    if alt310 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:35: ( LT )* ',' ( LT )* propertyNameAndValue
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:35: ( LT )*
                        while True: #loop308
                            alt308 = 2
                            LA308_0 = self.input.LA(1)

                            if (LA308_0 == LT) :
                                alt308 = 1


                            if alt308 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT578 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral3995)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT578)


                            else:
                                break #loop308


                        char_literal579 = self.input.LT(1)
                        self.match(self.input, 82, self.FOLLOW_82_in_objectLiteral3998)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_82.add(char_literal579)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:43: ( LT )*
                        while True: #loop309
                            alt309 = 2
                            LA309_0 = self.input.LA(1)

                            if (LA309_0 == LT) :
                                alt309 = 1


                            if alt309 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT580 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4000)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT580)


                            else:
                                break #loop309


                        self.following.append(self.FOLLOW_propertyNameAndValue_in_objectLiteral4003)
                        propertyNameAndValue581 = self.propertyNameAndValue()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_propertyNameAndValue.add(propertyNameAndValue581.tree)


                    else:
                        break #loop310


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:70: ( LT )*
                while True: #loop311
                    alt311 = 2
                    LA311_0 = self.input.LA(1)

                    if (LA311_0 == LT) :
                        alt311 = 1


                    if alt311 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT582 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4007)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT582)


                    else:
                        break #loop311


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:74: ( ',' ( LT )* )?
                alt313 = 2
                LA313_0 = self.input.LA(1)

                if (LA313_0 == 82) :
                    alt313 = 1
                if alt313 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:75: ',' ( LT )*
                    char_literal583 = self.input.LT(1)
                    self.match(self.input, 82, self.FOLLOW_82_in_objectLiteral4011)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_82.add(char_literal583)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:79: ( LT )*
                    while True: #loop312
                        alt312 = 2
                        LA312_0 = self.input.LA(1)

                        if (LA312_0 == LT) :
                            alt312 = 1


                        if alt312 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT584 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4013)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT584)


                        else:
                            break #loop312





                char_literal585 = self.input.LT(1)
                self.match(self.input, 79, self.FOLLOW_79_in_objectLiteral4018)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_79.add(char_literal585)
                # AST Rewrite
                # elements: propertyNameAndValue
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 552:3: -> ^( OBJ ( propertyNameAndValue )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:552:6: ^( OBJ ( propertyNameAndValue )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(OBJ, "OBJ"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:552:12: ( propertyNameAndValue )*
                    while stream_propertyNameAndValue.hasNext():
                        self.adaptor.addChild(root_1, stream_propertyNameAndValue.next())


                    stream_propertyNameAndValue.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 91, objectLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end objectLiteral

    class propertyNameAndValue_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start propertyNameAndValue
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:555:1: propertyNameAndValue : ( propertyName ( LT )* ':' ( LT )* assignmentExpression -> ^( PROP propertyName PROP assignmentExpression ) | (action= 'get' | action= 'set' ) propname= identifier ( LT )* funcname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) ) | (action= 'get' | action= 'set' ) ( LT )* propname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) ) );
    def propertyNameAndValue(self, ):

        retval = self.propertyNameAndValue_return()
        retval.start = self.input.LT(1)
        propertyNameAndValue_StartIndex = self.input.index()
        root_0 = None

        action = None
        LT587 = None
        char_literal588 = None
        LT589 = None
        LT591 = None
        LT592 = None
        LT594 = None
        LT596 = None
        LT597 = None
        LT599 = None
        propname = None

        funcname = None

        propertyName586 = None

        assignmentExpression590 = None

        formalParameterList593 = None

        statementBlock595 = None

        formalParameterList598 = None

        statementBlock600 = None


        action_tree = None
        LT587_tree = None
        char_literal588_tree = None
        LT589_tree = None
        LT591_tree = None
        LT592_tree = None
        LT594_tree = None
        LT596_tree = None
        LT597_tree = None
        LT599_tree = None
        stream_150 = RewriteRuleTokenStream(self.adaptor, "token 150")
        stream_151 = RewriteRuleTokenStream(self.adaptor, "token 151")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_75 = RewriteRuleTokenStream(self.adaptor, "token 75")
        stream_propertyName = RewriteRuleSubtreeStream(self.adaptor, "rule propertyName")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        stream_statementBlock = RewriteRuleSubtreeStream(self.adaptor, "rule statementBlock")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        stream_formalParameterList = RewriteRuleSubtreeStream(self.adaptor, "rule formalParameterList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 92):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:556:2: ( propertyName ( LT )* ':' ( LT )* assignmentExpression -> ^( PROP propertyName PROP assignmentExpression ) | (action= 'get' | action= 'set' ) propname= identifier ( LT )* funcname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) ) | (action= 'get' | action= 'set' ) ( LT )* propname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) ) )
                alt324 = 3
                alt324 = self.dfa324.predict(self.input)
                if alt324 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:556:4: propertyName ( LT )* ':' ( LT )* assignmentExpression
                    self.following.append(self.FOLLOW_propertyName_in_propertyNameAndValue4042)
                    propertyName586 = self.propertyName()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_propertyName.add(propertyName586.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:556:17: ( LT )*
                    while True: #loop314
                        alt314 = 2
                        LA314_0 = self.input.LA(1)

                        if (LA314_0 == LT) :
                            alt314 = 1


                        if alt314 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT587 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4044)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT587)


                        else:
                            break #loop314


                    char_literal588 = self.input.LT(1)
                    self.match(self.input, 75, self.FOLLOW_75_in_propertyNameAndValue4047)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_75.add(char_literal588)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:556:25: ( LT )*
                    while True: #loop315
                        alt315 = 2
                        LA315_0 = self.input.LA(1)

                        if (LA315_0 == LT) :
                            LA315_2 = self.input.LA(2)

                            if (self.synpred398()) :
                                alt315 = 1




                        if alt315 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT589 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4049)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT589)


                        else:
                            break #loop315


                    self.following.append(self.FOLLOW_assignmentExpression_in_propertyNameAndValue4052)
                    assignmentExpression590 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression590.tree)
                    # AST Rewrite
                    # elements: propertyName, assignmentExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 557:3: -> ^( PROP propertyName PROP assignmentExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:557:6: ^( PROP propertyName PROP assignmentExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROP, "PROP"), root_1)

                        self.adaptor.addChild(root_1, stream_propertyName.next())
                        self.adaptor.addChild(root_1, self.adaptor.createFromType(PROP, "PROP"))
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt324 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:4: (action= 'get' | action= 'set' ) propname= identifier ( LT )* funcname= identifier ( LT )* formalParameterList ( LT )* statementBlock
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:4: (action= 'get' | action= 'set' )
                    alt316 = 2
                    LA316_0 = self.input.LA(1)

                    if (LA316_0 == 150) :
                        alt316 = 1
                    elif (LA316_0 == 151) :
                        alt316 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("558:4: (action= 'get' | action= 'set' )", 316, 0, self.input)

                        raise nvae

                    if alt316 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:5: action= 'get'
                        action = self.input.LT(1)
                        self.match(self.input, 150, self.FOLLOW_150_in_propertyNameAndValue4074)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_150.add(action)


                    elif alt316 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:18: action= 'set'
                        action = self.input.LT(1)
                        self.match(self.input, 151, self.FOLLOW_151_in_propertyNameAndValue4078)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_151.add(action)



                    self.following.append(self.FOLLOW_identifier_in_propertyNameAndValue4083)
                    propname = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(propname.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:52: ( LT )*
                    while True: #loop317
                        alt317 = 2
                        LA317_0 = self.input.LA(1)

                        if (LA317_0 == LT) :
                            alt317 = 1


                        if alt317 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT591 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4085)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT591)


                        else:
                            break #loop317


                    self.following.append(self.FOLLOW_identifier_in_propertyNameAndValue4090)
                    funcname = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(funcname.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:76: ( LT )*
                    while True: #loop318
                        alt318 = 2
                        LA318_0 = self.input.LA(1)

                        if (LA318_0 == LT) :
                            alt318 = 1


                        if alt318 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT592 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4092)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT592)


                        else:
                            break #loop318


                    self.following.append(self.FOLLOW_formalParameterList_in_propertyNameAndValue4095)
                    formalParameterList593 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList593.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:100: ( LT )*
                    while True: #loop319
                        alt319 = 2
                        LA319_0 = self.input.LA(1)

                        if (LA319_0 == LT) :
                            alt319 = 1


                        if alt319 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT594 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4097)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT594)


                        else:
                            break #loop319


                    self.following.append(self.FOLLOW_statementBlock_in_propertyNameAndValue4100)
                    statementBlock595 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock595.tree)
                    # AST Rewrite
                    # elements: statementBlock, formalParameterList, funcname, propname, action
                    # token labels: action
                    # rule labels: propname, retval, funcname
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_action = RewriteRuleTokenStream(self.adaptor, "token action", action)

                        if propname is not None:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", propname.tree)
                        else:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", None)


                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        if funcname is not None:
                            stream_funcname = RewriteRuleSubtreeStream(self.adaptor, "token funcname", funcname.tree)
                        else:
                            stream_funcname = RewriteRuleSubtreeStream(self.adaptor, "token funcname", None)


                        root_0 = self.adaptor.nil()
                        # 559:3: -> ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:559:6: ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROP, "PROP"), root_1)

                        self.adaptor.addChild(root_1, stream_propname.next())
                        self.adaptor.addChild(root_1, stream_action.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:559:31: ^( FUNC $funcname formalParameterList statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_2)

                        self.adaptor.addChild(root_2, stream_funcname.next())
                        self.adaptor.addChild(root_2, stream_formalParameterList.next())
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt324 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:560:4: (action= 'get' | action= 'set' ) ( LT )* propname= identifier ( LT )* formalParameterList ( LT )* statementBlock
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:560:4: (action= 'get' | action= 'set' )
                    alt320 = 2
                    LA320_0 = self.input.LA(1)

                    if (LA320_0 == 150) :
                        alt320 = 1
                    elif (LA320_0 == 151) :
                        alt320 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("560:4: (action= 'get' | action= 'set' )", 320, 0, self.input)

                        raise nvae

                    if alt320 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:560:5: action= 'get'
                        action = self.input.LT(1)
                        self.match(self.input, 150, self.FOLLOW_150_in_propertyNameAndValue4133)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_150.add(action)


                    elif alt320 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:560:18: action= 'set'
                        action = self.input.LT(1)
                        self.match(self.input, 151, self.FOLLOW_151_in_propertyNameAndValue4137)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_151.add(action)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:560:32: ( LT )*
                    while True: #loop321
                        alt321 = 2
                        LA321_0 = self.input.LA(1)

                        if (LA321_0 == LT) :
                            alt321 = 1


                        if alt321 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT596 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4140)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT596)


                        else:
                            break #loop321


                    self.following.append(self.FOLLOW_identifier_in_propertyNameAndValue4145)
                    propname = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(propname.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:560:56: ( LT )*
                    while True: #loop322
                        alt322 = 2
                        LA322_0 = self.input.LA(1)

                        if (LA322_0 == LT) :
                            alt322 = 1


                        if alt322 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT597 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4147)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT597)


                        else:
                            break #loop322


                    self.following.append(self.FOLLOW_formalParameterList_in_propertyNameAndValue4150)
                    formalParameterList598 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList598.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:560:80: ( LT )*
                    while True: #loop323
                        alt323 = 2
                        LA323_0 = self.input.LA(1)

                        if (LA323_0 == LT) :
                            alt323 = 1


                        if alt323 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT599 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4152)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT599)


                        else:
                            break #loop323


                    self.following.append(self.FOLLOW_statementBlock_in_propertyNameAndValue4155)
                    statementBlock600 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock600.tree)
                    # AST Rewrite
                    # elements: propname, statementBlock, formalParameterList, action
                    # token labels: action
                    # rule labels: propname, retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_action = RewriteRuleTokenStream(self.adaptor, "token action", action)

                        if propname is not None:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", propname.tree)
                        else:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", None)


                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 561:3: -> ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:561:6: ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROP, "PROP"), root_1)

                        self.adaptor.addChild(root_1, stream_propname.next())
                        self.adaptor.addChild(root_1, stream_action.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:561:31: ^( FUNC ANONYMOUS formalParameterList statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(ANONYMOUS, "ANONYMOUS"))
                        self.adaptor.addChild(root_2, stream_formalParameterList.next())
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 92, propertyNameAndValue_StartIndex)

            pass

        return retval

    # $ANTLR end propertyNameAndValue

    class propertyName_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start propertyName
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:564:1: propertyName : ( identifier | StringLiteral | NumericLiteral );
    def propertyName(self, ):

        retval = self.propertyName_return()
        retval.start = self.input.LT(1)
        propertyName_StartIndex = self.input.index()
        root_0 = None

        StringLiteral602 = None
        NumericLiteral603 = None
        identifier601 = None


        StringLiteral602_tree = None
        NumericLiteral603_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 93):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:2: ( identifier | StringLiteral | NumericLiteral )
                alt325 = 3
                LA325 = self.input.LA(1)
                if LA325 == Identifier or LA325 == 84 or LA325 == 85 or LA325 == 86 or LA325 == 99 or LA325 == 150 or LA325 == 151:
                    alt325 = 1
                elif LA325 == StringLiteral:
                    alt325 = 2
                elif LA325 == NumericLiteral:
                    alt325 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("564:1: propertyName : ( identifier | StringLiteral | NumericLiteral );", 325, 0, self.input)

                    raise nvae

                if alt325 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:4: identifier
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_identifier_in_propertyName4190)
                    identifier601 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier601.tree)


                elif alt325 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:566:4: StringLiteral
                    root_0 = self.adaptor.nil()

                    StringLiteral602 = self.input.LT(1)
                    self.match(self.input, StringLiteral, self.FOLLOW_StringLiteral_in_propertyName4195)
                    if self.failed:
                        return retval

                    StringLiteral602_tree = self.adaptor.createWithPayload(StringLiteral602)
                    self.adaptor.addChild(root_0, StringLiteral602_tree)



                elif alt325 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:567:4: NumericLiteral
                    root_0 = self.adaptor.nil()

                    NumericLiteral603 = self.input.LT(1)
                    self.match(self.input, NumericLiteral, self.FOLLOW_NumericLiteral_in_propertyName4200)
                    if self.failed:
                        return retval

                    NumericLiteral603_tree = self.adaptor.createWithPayload(NumericLiteral603)
                    self.adaptor.addChild(root_0, NumericLiteral603_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 93, propertyName_StartIndex)

            pass

        return retval

    # $ANTLR end propertyName

    class literal_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start literal
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:1: literal : ( 'null' -> NULL | 'true' -> TRUE | 'false' -> FALSE | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMBER NumericLiteral ) | regularExpressionLiteral -> ^( REGEX regularExpressionLiteral ) );
    def literal(self, ):

        retval = self.literal_return()
        retval.start = self.input.LT(1)
        literal_StartIndex = self.input.index()
        root_0 = None

        string_literal604 = None
        string_literal605 = None
        string_literal606 = None
        StringLiteral607 = None
        NumericLiteral608 = None
        regularExpressionLiteral609 = None


        string_literal604_tree = None
        string_literal605_tree = None
        string_literal606_tree = None
        StringLiteral607_tree = None
        NumericLiteral608_tree = None
        stream_StringLiteral = RewriteRuleTokenStream(self.adaptor, "token StringLiteral")
        stream_152 = RewriteRuleTokenStream(self.adaptor, "token 152")
        stream_153 = RewriteRuleTokenStream(self.adaptor, "token 153")
        stream_NumericLiteral = RewriteRuleTokenStream(self.adaptor, "token NumericLiteral")
        stream_154 = RewriteRuleTokenStream(self.adaptor, "token 154")
        stream_regularExpressionLiteral = RewriteRuleSubtreeStream(self.adaptor, "rule regularExpressionLiteral")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 94):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:572:2: ( 'null' -> NULL | 'true' -> TRUE | 'false' -> FALSE | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMBER NumericLiteral ) | regularExpressionLiteral -> ^( REGEX regularExpressionLiteral ) )
                alt326 = 6
                LA326 = self.input.LA(1)
                if LA326 == 152:
                    alt326 = 1
                elif LA326 == 153:
                    alt326 = 2
                elif LA326 == 154:
                    alt326 = 3
                elif LA326 == StringLiteral:
                    alt326 = 4
                elif LA326 == NumericLiteral:
                    alt326 = 5
                elif LA326 == RegularExpressionHacks or LA326 == 74:
                    alt326 = 6
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("571:1: literal : ( 'null' -> NULL | 'true' -> TRUE | 'false' -> FALSE | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMBER NumericLiteral ) | regularExpressionLiteral -> ^( REGEX regularExpressionLiteral ) );", 326, 0, self.input)

                    raise nvae

                if alt326 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:572:4: 'null'
                    string_literal604 = self.input.LT(1)
                    self.match(self.input, 152, self.FOLLOW_152_in_literal4212)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_152.add(string_literal604)
                    # AST Rewrite
                    # elements: 
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 572:11: -> NULL
                        self.adaptor.addChild(root_0, self.adaptor.createFromType(NULL, "NULL"))





                elif alt326 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:573:4: 'true'
                    string_literal605 = self.input.LT(1)
                    self.match(self.input, 153, self.FOLLOW_153_in_literal4221)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_153.add(string_literal605)
                    # AST Rewrite
                    # elements: 
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 573:11: -> TRUE
                        self.adaptor.addChild(root_0, self.adaptor.createFromType(TRUE, "TRUE"))





                elif alt326 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:574:4: 'false'
                    string_literal606 = self.input.LT(1)
                    self.match(self.input, 154, self.FOLLOW_154_in_literal4230)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_154.add(string_literal606)
                    # AST Rewrite
                    # elements: 
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 574:12: -> FALSE
                        self.adaptor.addChild(root_0, self.adaptor.createFromType(FALSE, "FALSE"))





                elif alt326 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:575:4: StringLiteral
                    StringLiteral607 = self.input.LT(1)
                    self.match(self.input, StringLiteral, self.FOLLOW_StringLiteral_in_literal4239)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_StringLiteral.add(StringLiteral607)
                    # AST Rewrite
                    # elements: StringLiteral
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 575:18: -> ^( STRING StringLiteral )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:575:21: ^( STRING StringLiteral )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(STRING, "STRING"), root_1)

                        self.adaptor.addChild(root_1, stream_StringLiteral.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt326 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:4: NumericLiteral
                    NumericLiteral608 = self.input.LT(1)
                    self.match(self.input, NumericLiteral, self.FOLLOW_NumericLiteral_in_literal4252)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_NumericLiteral.add(NumericLiteral608)
                    # AST Rewrite
                    # elements: NumericLiteral
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 576:19: -> ^( NUMBER NumericLiteral )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:22: ^( NUMBER NumericLiteral )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(NUMBER, "NUMBER"), root_1)

                        self.adaptor.addChild(root_1, stream_NumericLiteral.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt326 == 6:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:577:4: regularExpressionLiteral
                    self.following.append(self.FOLLOW_regularExpressionLiteral_in_literal4265)
                    regularExpressionLiteral609 = self.regularExpressionLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_regularExpressionLiteral.add(regularExpressionLiteral609.tree)
                    # AST Rewrite
                    # elements: regularExpressionLiteral
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 577:29: -> ^( REGEX regularExpressionLiteral )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:577:32: ^( REGEX regularExpressionLiteral )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(REGEX, "REGEX"), root_1)

                        self.adaptor.addChild(root_1, stream_regularExpressionLiteral.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 94, literal_StartIndex)

            pass

        return retval

    # $ANTLR end literal

    class reFirstChar_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start reFirstChar
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:587:1: reFirstChar : ( ';' | ',' | '.' | ':' | '[' | ']' | '(' | ')' | '{' | '}' | '?' | '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' | '<' | '>' | '<=' | '>=' | '<<' | '>>' | '>>>' | '|' | '||' | '&' | '&&' | '!' | '#' | '%' | '^' | '++' | '--' | '+' | '-' | '~' | 'break' | 'case' | 'catch' | 'const' | 'continue' | 'default' | 'delete' | 'do' | 'each' | 'else' | 'false' | 'finally' | 'for' | 'function' | 'get' | 'if' | 'in' | 'let' | 'instanceof' | 'namespace' | 'new' | 'null' | 'return' | 'set' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'while' | 'with' | 'var' | 'void' | 'xml' | StringLiteral | NumericLiteral | Identifier );
    def reFirstChar(self, ):

        retval = self.reFirstChar_return()
        retval.start = self.input.LT(1)
        reFirstChar_StartIndex = self.input.index()
        root_0 = None

        set610 = None

        set610_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 95):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:588:2: ( ';' | ',' | '.' | ':' | '[' | ']' | '(' | ')' | '{' | '}' | '?' | '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' | '<' | '>' | '<=' | '>=' | '<<' | '>>' | '>>>' | '|' | '||' | '&' | '&&' | '!' | '#' | '%' | '^' | '++' | '--' | '+' | '-' | '~' | 'break' | 'case' | 'catch' | 'const' | 'continue' | 'default' | 'delete' | 'do' | 'each' | 'else' | 'false' | 'finally' | 'for' | 'function' | 'get' | 'if' | 'in' | 'let' | 'instanceof' | 'namespace' | 'new' | 'null' | 'return' | 'set' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'while' | 'with' | 'var' | 'void' | 'xml' | StringLiteral | NumericLiteral | Identifier )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                root_0 = self.adaptor.nil()

                set610 = self.input.LT(1)
                if self.input.LA(1) == StringLiteral or (NumericLiteral <= self.input.LA(1) <= Identifier) or (72 <= self.input.LA(1) <= 73) or (75 <= self.input.LA(1) <= 111) or (113 <= self.input.LA(1) <= 129) or (134 <= self.input.LA(1) <= 155):
                    self.input.consume();
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set610))
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_reFirstChar0
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 95, reFirstChar_StartIndex)

            pass

        return retval

    # $ANTLR end reFirstChar

    class reChars_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start reChars
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:606:1: reChars : ( reFirstChar | '*' );
    def reChars(self, ):

        retval = self.reChars_return()
        retval.start = self.input.LT(1)
        reChars_StartIndex = self.input.index()
        root_0 = None

        char_literal612 = None
        reFirstChar611 = None


        char_literal612_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 96):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:607:2: ( reFirstChar | '*' )
                alt327 = 2
                LA327_0 = self.input.LA(1)

                if (LA327_0 == StringLiteral or (NumericLiteral <= LA327_0 <= Identifier) or (72 <= LA327_0 <= 73) or (75 <= LA327_0 <= 111) or (113 <= LA327_0 <= 129) or (134 <= LA327_0 <= 155)) :
                    alt327 = 1
                elif (LA327_0 == 112) :
                    alt327 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("606:1: reChars : ( reFirstChar | '*' );", 327, 0, self.input)

                    raise nvae

                if alt327 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:607:4: reFirstChar
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_reFirstChar_in_reChars4666)
                    reFirstChar611 = self.reFirstChar()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, reFirstChar611.tree)


                elif alt327 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:608:4: '*'
                    root_0 = self.adaptor.nil()

                    char_literal612 = self.input.LT(1)
                    self.match(self.input, 112, self.FOLLOW_112_in_reChars4671)
                    if self.failed:
                        return retval

                    char_literal612_tree = self.adaptor.createWithPayload(char_literal612)
                    self.adaptor.addChild(root_0, char_literal612_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 96, reChars_StartIndex)

            pass

        return retval

    # $ANTLR end reChars

    class regularExpressionLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start regularExpressionLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:614:1: regularExpressionLiteral : ( '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )? | RegularExpressionHacks ( Identifier )? );
    def regularExpressionLiteral(self, ):

        retval = self.regularExpressionLiteral_return()
        retval.start = self.input.LT(1)
        regularExpressionLiteral_StartIndex = self.input.index()
        root_0 = None

        char_literal613 = None
        char_literal616 = None
        Identifier617 = None
        RegularExpressionHacks618 = None
        Identifier619 = None
        reFirstChar614 = None

        reChars615 = None


        char_literal613_tree = None
        char_literal616_tree = None
        Identifier617_tree = None
        RegularExpressionHacks618_tree = None
        Identifier619_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 97):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:615:2: ( '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )? | RegularExpressionHacks ( Identifier )? )
                alt332 = 2
                LA332_0 = self.input.LA(1)

                if (LA332_0 == 74) :
                    alt332 = 1
                elif (LA332_0 == RegularExpressionHacks) :
                    alt332 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("614:1: regularExpressionLiteral : ( '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )? | RegularExpressionHacks ( Identifier )? );", 332, 0, self.input)

                    raise nvae

                if alt332 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:615:4: '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )?
                    root_0 = self.adaptor.nil()

                    char_literal613 = self.input.LT(1)
                    self.match(self.input, 74, self.FOLLOW_74_in_regularExpressionLiteral4685)
                    if self.failed:
                        return retval

                    char_literal613_tree = self.adaptor.createWithPayload(char_literal613)
                    self.adaptor.addChild(root_0, char_literal613_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:615:8: ( reFirstChar )?
                    alt328 = 2
                    LA328_0 = self.input.LA(1)

                    if (LA328_0 == StringLiteral or (NumericLiteral <= LA328_0 <= Identifier) or (72 <= LA328_0 <= 73) or (75 <= LA328_0 <= 111) or (113 <= LA328_0 <= 129) or (134 <= LA328_0 <= 155)) :
                        LA328_1 = self.input.LA(2)

                        if (self.synpred497()) :
                            alt328 = 1
                    if alt328 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: reFirstChar
                        self.following.append(self.FOLLOW_reFirstChar_in_regularExpressionLiteral4687)
                        reFirstChar614 = self.reFirstChar()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, reFirstChar614.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:615:21: ( reChars )*
                    while True: #loop329
                        alt329 = 2
                        LA329_0 = self.input.LA(1)

                        if (LA329_0 == StringLiteral or (NumericLiteral <= LA329_0 <= Identifier) or (72 <= LA329_0 <= 73) or (75 <= LA329_0 <= 129) or (134 <= LA329_0 <= 155)) :
                            alt329 = 1


                        if alt329 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: reChars
                            self.following.append(self.FOLLOW_reChars_in_regularExpressionLiteral4690)
                            reChars615 = self.reChars()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, reChars615.tree)


                        else:
                            break #loop329


                    char_literal616 = self.input.LT(1)
                    self.match(self.input, 74, self.FOLLOW_74_in_regularExpressionLiteral4693)
                    if self.failed:
                        return retval

                    char_literal616_tree = self.adaptor.createWithPayload(char_literal616)
                    self.adaptor.addChild(root_0, char_literal616_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:615:34: ( Identifier )?
                    alt330 = 2
                    LA330_0 = self.input.LA(1)

                    if (LA330_0 == Identifier) :
                        alt330 = 1
                    if alt330 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: Identifier
                        Identifier617 = self.input.LT(1)
                        self.match(self.input, Identifier, self.FOLLOW_Identifier_in_regularExpressionLiteral4695)
                        if self.failed:
                            return retval

                        Identifier617_tree = self.adaptor.createWithPayload(Identifier617)
                        self.adaptor.addChild(root_0, Identifier617_tree)






                elif alt332 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:616:4: RegularExpressionHacks ( Identifier )?
                    root_0 = self.adaptor.nil()

                    RegularExpressionHacks618 = self.input.LT(1)
                    self.match(self.input, RegularExpressionHacks, self.FOLLOW_RegularExpressionHacks_in_regularExpressionLiteral4701)
                    if self.failed:
                        return retval

                    RegularExpressionHacks618_tree = self.adaptor.createWithPayload(RegularExpressionHacks618)
                    self.adaptor.addChild(root_0, RegularExpressionHacks618_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:616:27: ( Identifier )?
                    alt331 = 2
                    LA331_0 = self.input.LA(1)

                    if (LA331_0 == Identifier) :
                        alt331 = 1
                    if alt331 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: Identifier
                        Identifier619 = self.input.LT(1)
                        self.match(self.input, Identifier, self.FOLLOW_Identifier_in_regularExpressionLiteral4703)
                        if self.failed:
                            return retval

                        Identifier619_tree = self.adaptor.createWithPayload(Identifier619)
                        self.adaptor.addChild(root_0, Identifier619_tree)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 97, regularExpressionLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end regularExpressionLiteral

    class identifier_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start identifier
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:621:1: identifier : ( 'get' | 'set' | 'each' | 'default' | 'xml' | 'namespace' | Identifier );
    def identifier(self, ):

        retval = self.identifier_return()
        retval.start = self.input.LT(1)
        identifier_StartIndex = self.input.index()
        root_0 = None

        set620 = None

        set620_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 98):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:622:2: ( 'get' | 'set' | 'each' | 'default' | 'xml' | 'namespace' | Identifier )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                root_0 = self.adaptor.nil()

                set620 = self.input.LT(1)
                if self.input.LA(1) == Identifier or (84 <= self.input.LA(1) <= 86) or self.input.LA(1) == 99 or (150 <= self.input.LA(1) <= 151):
                    self.input.consume();
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set620))
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_identifier0
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 98, identifier_StartIndex)

            pass

        return retval

    # $ANTLR end identifier

    # $ANTLR start synpred1
    def synpred1_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:57:4: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:57:4: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1196)
        if self.failed:
            return 


    # $ANTLR end synpred1



    # $ANTLR start synpred3
    def synpred3_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:62:19: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:62:19: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3233)
        if self.failed:
            return 


    # $ANTLR end synpred3



    # $ANTLR start synpred15
    def synpred15_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:102:4: ( '{' )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:102:5: '{'
        self.match(self.input, 78, self.FOLLOW_78_in_synpred15449)
        if self.failed:
            return 


    # $ANTLR end synpred15



    # $ANTLR start synpred17
    def synpred17_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:121:4: ( xmlEmptyTag )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:121:4: xmlEmptyTag
        self.following.append(self.FOLLOW_xmlEmptyTag_in_synpred17499)
        self.xmlEmptyTag()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred17



    # $ANTLR start synpred18
    def synpred18_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:122:4: ( xmlStartTag )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:122:4: xmlStartTag
        self.following.append(self.FOLLOW_xmlStartTag_in_synpred18504)
        self.xmlStartTag()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred18



    # $ANTLR start synpred21
    def synpred21_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:5: ( ( LT )* xmlPayload )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:5: ( LT )* xmlPayload
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:5: ( LT )*
        while True: #loop336
            alt336 = 2
            LA336_0 = self.input.LA(1)

            if (LA336_0 == LT) :
                alt336 = 1


            if alt336 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred21527)
                if self.failed:
                    return 


            else:
                break #loop336


        self.following.append(self.FOLLOW_xmlPayload_in_synpred21530)
        self.xmlPayload()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred21



    # $ANTLR start synpred25
    def synpred25_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:4: ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock
        self.match(self.input, 80, self.FOLLOW_80_in_synpred25545)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:15: ( LT )*
        while True: #loop337
            alt337 = 2
            LA337_0 = self.input.LA(1)

            if (LA337_0 == LT) :
                alt337 = 1


            if alt337 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred25547)
                if self.failed:
                    return 


            else:
                break #loop337


        self.following.append(self.FOLLOW_identifier_in_synpred25550)
        self.identifier()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:30: ( LT )*
        while True: #loop338
            alt338 = 2
            LA338_0 = self.input.LA(1)

            if (LA338_0 == LT) :
                alt338 = 1


            if alt338 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred25552)
                if self.failed:
                    return 


            else:
                break #loop338


        self.following.append(self.FOLLOW_formalParameterList_in_synpred25555)
        self.formalParameterList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:54: ( LT )*
        while True: #loop339
            alt339 = 2
            LA339_0 = self.input.LA(1)

            if (LA339_0 == LT) :
                alt339 = 1


            if alt339 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred25557)
                if self.failed:
                    return 


            else:
                break #loop339


        self.following.append(self.FOLLOW_statementBlock_in_synpred25560)
        self.statementBlock()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred25



    # $ANTLR start synpred28
    def synpred28_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:4: ( 'function' ( LT )* formalParameterList ( LT )* statementBlock )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:4: 'function' ( LT )* formalParameterList ( LT )* statementBlock
        self.match(self.input, 80, self.FOLLOW_80_in_synpred28587)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:20: ( LT )*
        while True: #loop340
            alt340 = 2
            LA340_0 = self.input.LA(1)

            if (LA340_0 == LT) :
                alt340 = 1


            if alt340 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred28589)
                if self.failed:
                    return 


            else:
                break #loop340


        self.following.append(self.FOLLOW_formalParameterList_in_synpred28592)
        self.formalParameterList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:44: ( LT )*
        while True: #loop341
            alt341 = 2
            LA341_0 = self.input.LA(1)

            if (LA341_0 == LT) :
                alt341 = 1


            if alt341 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred28594)
                if self.failed:
                    return 


            else:
                break #loop341


        self.following.append(self.FOLLOW_statementBlock_in_synpred28597)
        self.statementBlock()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred28



    # $ANTLR start synpred31
    def synpred31_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:54: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:54: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred31635)
        if self.failed:
            return 


    # $ANTLR end synpred31



    # $ANTLR start synpred32
    def synpred32_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:4: ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression
        self.match(self.input, 80, self.FOLLOW_80_in_synpred32623)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:15: ( LT )*
        while True: #loop342
            alt342 = 2
            LA342_0 = self.input.LA(1)

            if (LA342_0 == LT) :
                alt342 = 1


            if alt342 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred32625)
                if self.failed:
                    return 


            else:
                break #loop342


        self.following.append(self.FOLLOW_identifier_in_synpred32628)
        self.identifier()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:30: ( LT )*
        while True: #loop343
            alt343 = 2
            LA343_0 = self.input.LA(1)

            if (LA343_0 == LT) :
                alt343 = 1


            if alt343 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred32630)
                if self.failed:
                    return 


            else:
                break #loop343


        self.following.append(self.FOLLOW_formalParameterList_in_synpred32633)
        self.formalParameterList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:138:54: ( LT )*
        while True: #loop344
            alt344 = 2
            LA344_0 = self.input.LA(1)

            if (LA344_0 == LT) :
                LA344_2 = self.input.LA(2)

                if (self.synpred31()) :
                    alt344 = 1




            if alt344 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred32635)
                if self.failed:
                    return 


            else:
                break #loop344


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred32638)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred32



    # $ANTLR start synpred34
    def synpred34_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:140:44: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:140:44: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred34672)
        if self.failed:
            return 


    # $ANTLR end synpred34



    # $ANTLR start synpred41
    def synpred41_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:151:4: ( statementBlock )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:151:4: statementBlock
        self.following.append(self.FOLLOW_statementBlock_in_synpred41757)
        self.statementBlock()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred41



    # $ANTLR start synpred42
    def synpred42_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:4: ( variableStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:4: variableStatement
        self.following.append(self.FOLLOW_variableStatement_in_synpred42762)
        self.variableStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred42



    # $ANTLR start synpred44
    def synpred44_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:154:4: ( expressionStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:154:4: expressionStatement
        self.following.append(self.FOLLOW_expressionStatement_in_synpred44772)
        self.expressionStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred44



    # $ANTLR start synpred51
    def synpred51_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:161:4: ( letStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:161:4: letStatement
        self.following.append(self.FOLLOW_letStatement_in_synpred51807)
        self.letStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred51



    # $ANTLR start synpred52
    def synpred52_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:162:4: ( labelledStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:162:4: labelledStatement
        self.following.append(self.FOLLOW_labelledStatement_in_synpred52812)
        self.labelledStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred52



    # $ANTLR start synpred59
    def synpred59_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred59888)
        if self.failed:
            return 


    # $ANTLR end synpred59



    # $ANTLR start synpred62
    def synpred62_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:4: ( '{' ( LT )* ( statementList )? ( LT )* '}' )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:4: '{' ( LT )* ( statementList )? ( LT )* '}'
        self.match(self.input, 78, self.FOLLOW_78_in_synpred62886)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:8: ( LT )*
        while True: #loop351
            alt351 = 2
            LA351_0 = self.input.LA(1)

            if (LA351_0 == LT) :
                LA351_2 = self.input.LA(2)

                if (self.synpred59()) :
                    alt351 = 1




            if alt351 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred62888)
                if self.failed:
                    return 


            else:
                break #loop351


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:12: ( statementList )?
        alt352 = 2
        alt352 = self.dfa352.predict(self.input)
        if alt352 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
            self.following.append(self.FOLLOW_statementList_in_synpred62891)
            self.statementList()
            self.following.pop()
            if self.failed:
                return 



        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:175:27: ( LT )*
        while True: #loop353
            alt353 = 2
            LA353_0 = self.input.LA(1)

            if (LA353_0 == LT) :
                alt353 = 1


            if alt353 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred62894)
                if self.failed:
                    return 


            else:
                break #loop353


        self.match(self.input, 79, self.FOLLOW_79_in_synpred62897)
        if self.failed:
            return 


    # $ANTLR end synpred62



    # $ANTLR start synpred64
    def synpred64_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:15: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:15: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred64954)
        if self.failed:
            return 


    # $ANTLR end synpred64



    # $ANTLR start synpred65
    def synpred65_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:15: ( ( LT )* statement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:15: ( LT )* statement
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:17: ( LT )*
        while True: #loop354
            alt354 = 2
            LA354_0 = self.input.LA(1)

            if (LA354_0 == LT) :
                LA354_2 = self.input.LA(2)

                if (self.synpred64()) :
                    alt354 = 1




            if alt354 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred65954)
                if self.failed:
                    return 


            else:
                break #loop354


        self.following.append(self.FOLLOW_statement_in_synpred65958)
        self.statement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred65



    # $ANTLR start synpred79
    def synpred79_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred791104)
        if self.failed:
            return 


    # $ANTLR end synpred79



    # $ANTLR start synpred84
    def synpred84_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:25: ( ( LT )* ',' ( ( LT )* identifier )? )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:25: ( LT )* ',' ( ( LT )* identifier )?
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:25: ( LT )*
        while True: #loop363
            alt363 = 2
            LA363_0 = self.input.LA(1)

            if (LA363_0 == LT) :
                alt363 = 1


            if alt363 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred841111)
                if self.failed:
                    return 


            else:
                break #loop363


        self.match(self.input, 82, self.FOLLOW_82_in_synpred841114)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:33: ( ( LT )* identifier )?
        alt365 = 2
        LA365_0 = self.input.LA(1)

        if (LA365_0 == LT or LA365_0 == Identifier or (84 <= LA365_0 <= 86) or LA365_0 == 99 or (150 <= LA365_0 <= 151)) :
            alt365 = 1
        if alt365 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:34: ( LT )* identifier
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:201:34: ( LT )*
            while True: #loop364
                alt364 = 2
                LA364_0 = self.input.LA(1)

                if (LA364_0 == LT) :
                    alt364 = 1


                if alt364 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred841117)
                    if self.failed:
                        return 


                else:
                    break #loop364


            self.following.append(self.FOLLOW_identifier_in_synpred841120)
            self.identifier()
            self.following.pop()
            if self.failed:
                return 





    # $ANTLR end synpred84



    # $ANTLR start synpred93
    def synpred93_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred931203)
        if self.failed:
            return 


    # $ANTLR end synpred93



    # $ANTLR start synpred98
    def synpred98_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:25: ( ( LT )* ',' ( ( LT )* identifier )? )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:25: ( LT )* ',' ( ( LT )* identifier )?
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:25: ( LT )*
        while True: #loop372
            alt372 = 2
            LA372_0 = self.input.LA(1)

            if (LA372_0 == LT) :
                alt372 = 1


            if alt372 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred981210)
                if self.failed:
                    return 


            else:
                break #loop372


        self.match(self.input, 82, self.FOLLOW_82_in_synpred981213)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:33: ( ( LT )* identifier )?
        alt374 = 2
        LA374_0 = self.input.LA(1)

        if (LA374_0 == LT or LA374_0 == Identifier or (84 <= LA374_0 <= 86) or LA374_0 == 99 or (150 <= LA374_0 <= 151)) :
            alt374 = 1
        if alt374 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:34: ( LT )* identifier
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:34: ( LT )*
            while True: #loop373
                alt373 = 2
                LA373_0 = self.input.LA(1)

                if (LA373_0 == LT) :
                    alt373 = 1


                if alt373 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred981216)
                    if self.failed:
                        return 


                else:
                    break #loop373


            self.following.append(self.FOLLOW_identifier_in_synpred981219)
            self.identifier()
            self.following.pop()
            if self.failed:
                return 





    # $ANTLR end synpred98



    # $ANTLR start synpred104
    def synpred104_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1041276)
        if self.failed:
            return 


    # $ANTLR end synpred104



    # $ANTLR start synpred105
    def synpred105_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1051299)
        if self.failed:
            return 


    # $ANTLR end synpred105



    # $ANTLR start synpred108
    def synpred108_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:17: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:17: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1081361)
        if self.failed:
            return 


    # $ANTLR end synpred108



    # $ANTLR start synpred110
    def synpred110_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:40: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:40: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1101371)
        if self.failed:
            return 


    # $ANTLR end synpred110



    # $ANTLR start synpred112
    def synpred112_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:66: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:66: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1121382)
        if self.failed:
            return 


    # $ANTLR end synpred112



    # $ANTLR start synpred113
    def synpred113_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:55: ( ( LT )* 'else' ( LT )* statement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:55: ( LT )* 'else' ( LT )* statement
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:55: ( LT )*
        while True: #loop377
            alt377 = 2
            LA377_0 = self.input.LA(1)

            if (LA377_0 == LT) :
                alt377 = 1


            if alt377 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred1131377)
                if self.failed:
                    return 


            else:
                break #loop377


        self.match(self.input, 95, self.FOLLOW_95_in_synpred1131380)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:231:66: ( LT )*
        while True: #loop378
            alt378 = 2
            LA378_0 = self.input.LA(1)

            if (LA378_0 == LT) :
                LA378_2 = self.input.LA(2)

                if (self.synpred112()) :
                    alt378 = 1




            if alt378 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred1131382)
                if self.failed:
                    return 


            else:
                break #loop378


        self.following.append(self.FOLLOW_statement_in_synpred1131385)
        self.statement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred113



    # $ANTLR start synpred116
    def synpred116_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:238:4: ( forStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:238:4: forStatement
        self.following.append(self.FOLLOW_forStatement_in_synpred1161430)
        self.forStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred116



    # $ANTLR start synpred117
    def synpred117_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:9: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:9: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1171449)
        if self.failed:
            return 


    # $ANTLR end synpred117



    # $ANTLR start synpred122
    def synpred122_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:20: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:20: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1221521)
        if self.failed:
            return 


    # $ANTLR end synpred122



    # $ANTLR start synpred124
    def synpred124_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:43: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:43: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1241531)
        if self.failed:
            return 


    # $ANTLR end synpred124



    # $ANTLR start synpred126
    def synpred126_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:19: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:19: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1261572)
        if self.failed:
            return 


    # $ANTLR end synpred126



    # $ANTLR start synpred129
    def synpred129_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:62: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:62: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1291585)
        if self.failed:
            return 


    # $ANTLR end synpred129



    # $ANTLR start synpred132
    def synpred132_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:93: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:93: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1321600)
        if self.failed:
            return 


    # $ANTLR end synpred132



    # $ANTLR start synpred135
    def synpred135_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:125: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:253:125: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1351614)
        if self.failed:
            return 


    # $ANTLR end synpred135



    # $ANTLR start synpred139
    def synpred139_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:10: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:10: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1391720)
        if self.failed:
            return 


    # $ANTLR end synpred139



    # $ANTLR start synpred142
    def synpred142_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:30: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:30: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1421731)
        if self.failed:
            return 


    # $ANTLR end synpred142



    # $ANTLR start synpred144
    def synpred144_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:73: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:73: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1441741)
        if self.failed:
            return 


    # $ANTLR end synpred144



    # $ANTLR start synpred146
    def synpred146_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:96: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:96: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1461751)
        if self.failed:
            return 


    # $ANTLR end synpred146



    # $ANTLR start synpred154
    def synpred154_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:13: ( expression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:13: expression
        self.following.append(self.FOLLOW_expression_in_synpred1541876)
        self.expression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred154



    # $ANTLR start synpred157
    def synpred157_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:19: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:19: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1571915)
        if self.failed:
            return 


    # $ANTLR end synpred157



    # $ANTLR start synpred159
    def synpred159_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:42: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:288:42: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1591925)
        if self.failed:
            return 


    # $ANTLR end synpred159



    # $ANTLR start synpred163
    def synpred163_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:58: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:293:58: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1631970)
        if self.failed:
            return 


    # $ANTLR end synpred163



    # $ANTLR start synpred165
    def synpred165_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:298:24: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:298:24: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1652014)
        if self.failed:
            return 


    # $ANTLR end synpred165



    # $ANTLR start synpred167
    def synpred167_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:21: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:303:21: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1672037)
        if self.failed:
            return 


    # $ANTLR end synpred167



    # $ANTLR start synpred177
    def synpred177_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:11: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:11: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1772143)
        if self.failed:
            return 


    # $ANTLR end synpred177



    # $ANTLR start synpred179
    def synpred179_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:34: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:34: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1792153)
        if self.failed:
            return 


    # $ANTLR end synpred179



    # $ANTLR start synpred180
    def synpred180_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:38: ( statementList )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:38: statementList
        self.following.append(self.FOLLOW_statementList_in_synpred1802156)
        self.statementList()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred180



    # $ANTLR start synpred182
    def synpred182_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:22: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:22: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1822194)
        if self.failed:
            return 


    # $ANTLR end synpred182



    # $ANTLR start synpred196
    def synpred196_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:36: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:343:36: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1962352)
        if self.failed:
            return 


    # $ANTLR end synpred196



    # $ANTLR start synpred199
    def synpred199_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:40: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:347:40: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1992380)
        if self.failed:
            return 


    # $ANTLR end synpred199



    # $ANTLR start synpred202
    def synpred202_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:50: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:50: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2022405)
        if self.failed:
            return 


    # $ANTLR end synpred202



    # $ANTLR start synpred203
    def synpred203_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:4: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression
        self.following.append(self.FOLLOW_leftHandSideExpression_in_synpred2032398)
        self.leftHandSideExpression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:27: ( LT )*
        while True: #loop392
            alt392 = 2
            LA392_0 = self.input.LA(1)

            if (LA392_0 == LT) :
                alt392 = 1


            if alt392 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2032400)
                if self.failed:
                    return 


            else:
                break #loop392


        self.following.append(self.FOLLOW_assignmentOperator_in_synpred2032403)
        self.assignmentOperator()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:50: ( LT )*
        while True: #loop393
            alt393 = 2
            LA393_0 = self.input.LA(1)

            if (LA393_0 == LT) :
                LA393_2 = self.input.LA(2)

                if (self.synpred202()) :
                    alt393 = 1




            if alt393 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2032405)
                if self.failed:
                    return 


            else:
                break #loop393


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred2032408)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred203



    # $ANTLR start synpred207
    def synpred207_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:353:58: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:353:58: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2072446)
        if self.failed:
            return 


    # $ANTLR end synpred207



    # $ANTLR start synpred210
    def synpred210_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:50: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:50: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2102495)
        if self.failed:
            return 


    # $ANTLR end synpred210



    # $ANTLR start synpred211
    def synpred211_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:4: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn
        self.following.append(self.FOLLOW_leftHandSideExpression_in_synpred2112488)
        self.leftHandSideExpression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:27: ( LT )*
        while True: #loop398
            alt398 = 2
            LA398_0 = self.input.LA(1)

            if (LA398_0 == LT) :
                alt398 = 1


            if alt398 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2112490)
                if self.failed:
                    return 


            else:
                break #loop398


        self.following.append(self.FOLLOW_assignmentOperator_in_synpred2112493)
        self.assignmentOperator()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:50: ( LT )*
        while True: #loop399
            alt399 = 2
            LA399_0 = self.input.LA(1)

            if (LA399_0 == LT) :
                LA399_2 = self.input.LA(2)

                if (self.synpred210()) :
                    alt399 = 1




            if alt399 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2112495)
                if self.failed:
                    return 


            else:
                break #loop399


        self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_synpred2112498)
        self.assignmentExpressionNoIn()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred211



    # $ANTLR start synpred215
    def synpred215_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:361:58: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:361:58: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2152536)
        if self.failed:
            return 


    # $ANTLR end synpred215



    # $ANTLR start synpred217
    def synpred217_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:367:4: ( callExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:367:4: callExpression
        self.following.append(self.FOLLOW_callExpression_in_synpred2172578)
        self.callExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred217



    # $ANTLR start synpred218
    def synpred218_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:372:4: ( memberExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:372:4: memberExpression
        self.following.append(self.FOLLOW_memberExpression_in_synpred2182595)
        self.memberExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred218



    # $ANTLR start synpred219
    def synpred219_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:10: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:10: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2192602)
        if self.failed:
            return 


    # $ANTLR end synpred219



    # $ANTLR start synpred221
    def synpred221_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:23: ( ( LT )* memberExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:23: ( LT )* memberExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:23: ( LT )*
        while True: #loop404
            alt404 = 2
            LA404_0 = self.input.LA(1)

            if (LA404_0 == LT) :
                alt404 = 1


            if alt404 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2212630)
                if self.failed:
                    return 


            else:
                break #loop404


        self.following.append(self.FOLLOW_memberExpressionSuffix_in_synpred2212633)
        self.memberExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred221



    # $ANTLR start synpred224
    def synpred224_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:24: ( ( LT )* memberExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:24: ( LT )* memberExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:26: ( LT )*
        while True: #loop407
            alt407 = 2
            LA407_0 = self.input.LA(1)

            if (LA407_0 == LT) :
                alt407 = 1


            if alt407 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2242656)
                if self.failed:
                    return 


            else:
                break #loop407


        self.following.append(self.FOLLOW_memberExpressionSuffix_in_synpred2242660)
        self.memberExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred224



    # $ANTLR start synpred226
    def synpred226_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:10: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:10: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2262669)
        if self.failed:
            return 


    # $ANTLR end synpred226



    # $ANTLR start synpred229
    def synpred229_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:46: ( ( LT )* memberExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:46: ( LT )* memberExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:46: ( LT )*
        while True: #loop410
            alt410 = 2
            LA410_0 = self.input.LA(1)

            if (LA410_0 == LT) :
                alt410 = 1


            if alt410 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2292680)
                if self.failed:
                    return 


            else:
                break #loop410


        self.following.append(self.FOLLOW_memberExpressionSuffix_in_synpred2292683)
        self.memberExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred229



    # $ANTLR start synpred233
    def synpred233_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:21: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:21: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2332753)
        if self.failed:
            return 


    # $ANTLR end synpred233



    # $ANTLR start synpred237
    def synpred237_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:45: ( ( LT )* callExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:45: ( LT )* callExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:396:45: ( LT )*
        while True: #loop411
            alt411 = 2
            LA411_0 = self.input.LA(1)

            if (LA411_0 == LT) :
                alt411 = 1


            if alt411 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2372765)
                if self.failed:
                    return 


            else:
                break #loop411


        self.following.append(self.FOLLOW_callExpressionSuffix_in_synpred2372768)
        self.callExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred237



    # $ANTLR start synpred242
    def synpred242_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:9: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:9: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2422836)
        if self.failed:
            return 


    # $ANTLR end synpred242



    # $ANTLR start synpred243
    def synpred243_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:34: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:34: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2432841)
        if self.failed:
            return 


    # $ANTLR end synpred243



    # $ANTLR start synpred244
    def synpred244_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:43: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:43: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2442847)
        if self.failed:
            return 


    # $ANTLR end synpred244



    # $ANTLR start synpred245
    def synpred245_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:68: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:412:68: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2452852)
        if self.failed:
            return 


    # $ANTLR end synpred245



    # $ANTLR start synpred249
    def synpred249_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2492887)
        if self.failed:
            return 


    # $ANTLR end synpred249



    # $ANTLR start synpred253
    def synpred253_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:12: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:12: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2532976)
        if self.failed:
            return 


    # $ANTLR end synpred253



    # $ANTLR start synpred254
    def synpred254_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:16: ( e4xIdentifier )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:16: e4xIdentifier
        self.following.append(self.FOLLOW_e4xIdentifier_in_synpred2542979)
        self.e4xIdentifier()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred254



    # $ANTLR start synpred268
    def synpred268_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:34: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:34: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2683083)
        if self.failed:
            return 


    # $ANTLR end synpred268



    # $ANTLR start synpred270
    def synpred270_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:69: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:69: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2703095)
        if self.failed:
            return 


    # $ANTLR end synpred270



    # $ANTLR start synpred271
    def synpred271_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:25: ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:25: ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:27: ( LT )*
        while True: #loop419
            alt419 = 2
            LA419_0 = self.input.LA(1)

            if (LA419_0 == LT) :
                alt419 = 1


            if alt419 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2713077)
                if self.failed:
                    return 


            else:
                break #loop419


        self.match(self.input, 124, self.FOLLOW_124_in_synpred2713081)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:36: ( LT )*
        while True: #loop420
            alt420 = 2
            LA420_0 = self.input.LA(1)

            if (LA420_0 == LT) :
                LA420_2 = self.input.LA(2)

                if (self.synpred268()) :
                    alt420 = 1




            if alt420 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2713083)
                if self.failed:
                    return 


            else:
                break #loop420


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred2713087)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:62: ( LT )*
        while True: #loop421
            alt421 = 2
            LA421_0 = self.input.LA(1)

            if (LA421_0 == LT) :
                alt421 = 1


            if alt421 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2713089)
                if self.failed:
                    return 


            else:
                break #loop421


        self.match(self.input, 75, self.FOLLOW_75_in_synpred2713093)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:71: ( LT )*
        while True: #loop422
            alt422 = 2
            LA422_0 = self.input.LA(1)

            if (LA422_0 == LT) :
                LA422_2 = self.input.LA(2)

                if (self.synpred270()) :
                    alt422 = 1




            if alt422 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2713095)
                if self.failed:
                    return 


            else:
                break #loop422


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred2713099)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred271



    # $ANTLR start synpred273
    def synpred273_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:38: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:38: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2733121)
        if self.failed:
            return 


    # $ANTLR end synpred273



    # $ANTLR start synpred275
    def synpred275_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:77: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:450:77: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2753133)
        if self.failed:
            return 


    # $ANTLR end synpred275



    # $ANTLR start synpred278
    def synpred278_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:36: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:36: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2783159)
        if self.failed:
            return 


    # $ANTLR end synpred278



    # $ANTLR start synpred279
    def synpred279_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:26: ( ( LT )* '||' ( LT )* logicalANDExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:26: ( LT )* '||' ( LT )* logicalANDExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:28: ( LT )*
        while True: #loop427
            alt427 = 2
            LA427_0 = self.input.LA(1)

            if (LA427_0 == LT) :
                alt427 = 1


            if alt427 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2793153)
                if self.failed:
                    return 


            else:
                break #loop427


        self.match(self.input, 125, self.FOLLOW_125_in_synpred2793157)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:454:38: ( LT )*
        while True: #loop428
            alt428 = 2
            LA428_0 = self.input.LA(1)

            if (LA428_0 == LT) :
                LA428_2 = self.input.LA(2)

                if (self.synpred278()) :
                    alt428 = 1




            if alt428 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2793159)
                if self.failed:
                    return 


            else:
                break #loop428


        self.following.append(self.FOLLOW_logicalANDExpression_in_synpred2793163)
        self.logicalANDExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred279



    # $ANTLR start synpred281
    def synpred281_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:40: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:40: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2813186)
        if self.failed:
            return 


    # $ANTLR end synpred281



    # $ANTLR start synpred284
    def synpred284_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:35: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:35: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2843213)
        if self.failed:
            return 


    # $ANTLR end synpred284



    # $ANTLR start synpred285
    def synpred285_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:25: ( ( LT )* '&&' ( LT )* bitwiseORExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:25: ( LT )* '&&' ( LT )* bitwiseORExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:27: ( LT )*
        while True: #loop431
            alt431 = 2
            LA431_0 = self.input.LA(1)

            if (LA431_0 == LT) :
                alt431 = 1


            if alt431 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2853207)
                if self.failed:
                    return 


            else:
                break #loop431


        self.match(self.input, 126, self.FOLLOW_126_in_synpred2853211)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:37: ( LT )*
        while True: #loop432
            alt432 = 2
            LA432_0 = self.input.LA(1)

            if (LA432_0 == LT) :
                LA432_2 = self.input.LA(2)

                if (self.synpred284()) :
                    alt432 = 1




            if alt432 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2853213)
                if self.failed:
                    return 


            else:
                break #loop432


        self.following.append(self.FOLLOW_bitwiseORExpression_in_synpred2853217)
        self.bitwiseORExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred285



    # $ANTLR start synpred287
    def synpred287_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:39: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:39: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2873240)
        if self.failed:
            return 


    # $ANTLR end synpred287



    # $ANTLR start synpred290
    def synpred290_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:35: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:35: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2903267)
        if self.failed:
            return 


    # $ANTLR end synpred290



    # $ANTLR start synpred291
    def synpred291_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:26: ( ( LT )* '|' ( LT )* bitwiseXORExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:26: ( LT )* '|' ( LT )* bitwiseXORExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:28: ( LT )*
        while True: #loop435
            alt435 = 2
            LA435_0 = self.input.LA(1)

            if (LA435_0 == LT) :
                alt435 = 1


            if alt435 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2913261)
                if self.failed:
                    return 


            else:
                break #loop435


        self.match(self.input, 127, self.FOLLOW_127_in_synpred2913265)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:37: ( LT )*
        while True: #loop436
            alt436 = 2
            LA436_0 = self.input.LA(1)

            if (LA436_0 == LT) :
                LA436_2 = self.input.LA(2)

                if (self.synpred290()) :
                    alt436 = 1




            if alt436 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2913267)
                if self.failed:
                    return 


            else:
                break #loop436


        self.following.append(self.FOLLOW_bitwiseXORExpression_in_synpred2913271)
        self.bitwiseXORExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred291



    # $ANTLR start synpred293
    def synpred293_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:39: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:39: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2933294)
        if self.failed:
            return 


    # $ANTLR end synpred293



    # $ANTLR start synpred296
    def synpred296_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:35: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:35: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2963321)
        if self.failed:
            return 


    # $ANTLR end synpred296



    # $ANTLR start synpred297
    def synpred297_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:26: ( ( LT )* '^' ( LT )* bitwiseANDExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:26: ( LT )* '^' ( LT )* bitwiseANDExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:28: ( LT )*
        while True: #loop439
            alt439 = 2
            LA439_0 = self.input.LA(1)

            if (LA439_0 == LT) :
                alt439 = 1


            if alt439 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2973315)
                if self.failed:
                    return 


            else:
                break #loop439


        self.match(self.input, 128, self.FOLLOW_128_in_synpred2973319)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:37: ( LT )*
        while True: #loop440
            alt440 = 2
            LA440_0 = self.input.LA(1)

            if (LA440_0 == LT) :
                LA440_2 = self.input.LA(2)

                if (self.synpred296()) :
                    alt440 = 1




            if alt440 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2973321)
                if self.failed:
                    return 


            else:
                break #loop440


        self.following.append(self.FOLLOW_bitwiseANDExpression_in_synpred2973325)
        self.bitwiseANDExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred297



    # $ANTLR start synpred299
    def synpred299_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:39: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:39: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2993348)
        if self.failed:
            return 


    # $ANTLR end synpred299



    # $ANTLR start synpred302
    def synpred302_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:33: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:33: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3023375)
        if self.failed:
            return 


    # $ANTLR end synpred302



    # $ANTLR start synpred303
    def synpred303_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:24: ( ( LT )* '&' ( LT )* equalityExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:24: ( LT )* '&' ( LT )* equalityExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:26: ( LT )*
        while True: #loop443
            alt443 = 2
            LA443_0 = self.input.LA(1)

            if (LA443_0 == LT) :
                alt443 = 1


            if alt443 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3033369)
                if self.failed:
                    return 


            else:
                break #loop443


        self.match(self.input, 129, self.FOLLOW_129_in_synpred3033373)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:35: ( LT )*
        while True: #loop444
            alt444 = 2
            LA444_0 = self.input.LA(1)

            if (LA444_0 == LT) :
                LA444_2 = self.input.LA(2)

                if (self.synpred302()) :
                    alt444 = 1




            if alt444 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3033375)
                if self.failed:
                    return 


            else:
                break #loop444


        self.following.append(self.FOLLOW_equalityExpression_in_synpred3033379)
        self.equalityExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred303



    # $ANTLR start synpred305
    def synpred305_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:37: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:37: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3053402)
        if self.failed:
            return 


    # $ANTLR end synpred305



    # $ANTLR start synpred311
    def synpred311_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:61: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:61: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3113443)
        if self.failed:
            return 


    # $ANTLR end synpred311



    # $ANTLR start synpred312
    def synpred312_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:26: ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:26: ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:28: ( LT )*
        while True: #loop447
            alt447 = 2
            LA447_0 = self.input.LA(1)

            if (LA447_0 == LT) :
                alt447 = 1


            if alt447 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3123423)
                if self.failed:
                    return 


            else:
                break #loop447


        if (130 <= self.input.LA(1) <= 133):
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3123427
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:63: ( LT )*
        while True: #loop448
            alt448 = 2
            LA448_0 = self.input.LA(1)

            if (LA448_0 == LT) :
                LA448_2 = self.input.LA(2)

                if (self.synpred311()) :
                    alt448 = 1




            if alt448 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3123443)
                if self.failed:
                    return 


            else:
                break #loop448


        self.following.append(self.FOLLOW_relationalExpression_in_synpred3123447)
        self.relationalExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred312



    # $ANTLR start synpred317
    def synpred317_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:65: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:65: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3173483)
        if self.failed:
            return 


    # $ANTLR end synpred317



    # $ANTLR start synpred325
    def synpred325_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:74: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:74: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3253532)
        if self.failed:
            return 


    # $ANTLR end synpred325



    # $ANTLR start synpred326
    def synpred326_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:21: ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:21: ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:23: ( LT )*
        while True: #loop451
            alt451 = 2
            LA451_0 = self.input.LA(1)

            if (LA451_0 == LT) :
                alt451 = 1


            if alt451 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3263504)
                if self.failed:
                    return 


            else:
                break #loop451


        if (72 <= self.input.LA(1) <= 73) or self.input.LA(1) == 100 or (134 <= self.input.LA(1) <= 136):
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3263508
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:76: ( LT )*
        while True: #loop452
            alt452 = 2
            LA452_0 = self.input.LA(1)

            if (LA452_0 == LT) :
                LA452_2 = self.input.LA(2)

                if (self.synpred325()) :
                    alt452 = 1




            if alt452 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3263532)
                if self.failed:
                    return 


            else:
                break #loop452


        self.following.append(self.FOLLOW_shiftExpression_in_synpred3263536)
        self.shiftExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred326



    # $ANTLR start synpred332
    def synpred332_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:67: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:67: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3323576)
        if self.failed:
            return 


    # $ANTLR end synpred332



    # $ANTLR start synpred337
    def synpred337_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:51: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:51: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3373612)
        if self.failed:
            return 


    # $ANTLR end synpred337



    # $ANTLR start synpred338
    def synpred338_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:24: ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:24: ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:26: ( LT )*
        while True: #loop455
            alt455 = 2
            LA455_0 = self.input.LA(1)

            if (LA455_0 == LT) :
                alt455 = 1


            if alt455 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3383596)
                if self.failed:
                    return 


            else:
                break #loop455


        if (137 <= self.input.LA(1) <= 139):
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3383600
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:53: ( LT )*
        while True: #loop456
            alt456 = 2
            LA456_0 = self.input.LA(1)

            if (LA456_0 == LT) :
                LA456_2 = self.input.LA(2)

                if (self.synpred337()) :
                    alt456 = 1




            if alt456 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3383612)
                if self.failed:
                    return 


            else:
                break #loop456


        self.following.append(self.FOLLOW_additiveExpression_in_synpred3383616)
        self.additiveExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred338



    # $ANTLR start synpred341
    def synpred341_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:47: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:47: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3413644)
        if self.failed:
            return 


    # $ANTLR end synpred341



    # $ANTLR start synpred342
    def synpred342_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:30: ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:30: ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:32: ( LT )*
        while True: #loop457
            alt457 = 2
            LA457_0 = self.input.LA(1)

            if (LA457_0 == LT) :
                alt457 = 1


            if alt457 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3423632)
                if self.failed:
                    return 


            else:
                break #loop457


        if self.input.LA(1) == 76 or self.input.LA(1) == 140:
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3423636
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:49: ( LT )*
        while True: #loop458
            alt458 = 2
            LA458_0 = self.input.LA(1)

            if (LA458_0 == LT) :
                LA458_2 = self.input.LA(2)

                if (self.synpred341()) :
                    alt458 = 1




            if alt458 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3423644)
                if self.failed:
                    return 


            else:
                break #loop458


        self.following.append(self.FOLLOW_multiplicativeExpression_in_synpred3423648)
        self.multiplicativeExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred342



    # $ANTLR start synpred346
    def synpred346_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:44: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:44: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3463680)
        if self.failed:
            return 


    # $ANTLR end synpred346



    # $ANTLR start synpred347
    def synpred347_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:21: ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:21: ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:23: ( LT )*
        while True: #loop459
            alt459 = 2
            LA459_0 = self.input.LA(1)

            if (LA459_0 == LT) :
                alt459 = 1


            if alt459 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3473664)
                if self.failed:
                    return 


            else:
                break #loop459


        if self.input.LA(1) == 74 or self.input.LA(1) == 112 or self.input.LA(1) == 141:
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3473668
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:46: ( LT )*
        while True: #loop460
            alt460 = 2
            LA460_0 = self.input.LA(1)

            if (LA460_0 == LT) :
                LA460_2 = self.input.LA(2)

                if (self.synpred346()) :
                    alt460 = 1




            if alt460 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3473680)
                if self.failed:
                    return 


            else:
                break #loop460


        self.following.append(self.FOLLOW_unaryExpression_in_synpred3473684)
        self.unaryExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred347



    # $ANTLR start synpred362
    def synpred362_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:532:4: ( ( LT )* ( '<' | XMLComment ) )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:532:5: ( LT )* ( '<' | XMLComment )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:532:5: ( LT )*
        while True: #loop461
            alt461 = 2
            LA461_0 = self.input.LA(1)

            if (LA461_0 == LT) :
                alt461 = 1


            if alt461 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3623776)
                if self.failed:
                    return 


            else:
                break #loop461


        if self.input.LA(1) == XMLComment or self.input.LA(1) == 72:
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3623779
                )
            raise mse




    # $ANTLR end synpred362



    # $ANTLR start synpred366
    def synpred366_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:537:4: ( objectLiteral )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:537:4: objectLiteral
        self.following.append(self.FOLLOW_objectLiteral_in_synpred3663817)
        self.objectLiteral()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred366



    # $ANTLR start synpred367
    def synpred367_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3673824)
        if self.failed:
            return 


    # $ANTLR end synpred367



    # $ANTLR start synpred369
    def synpred369_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3693849)
        if self.failed:
            return 


    # $ANTLR end synpred369



    # $ANTLR start synpred372
    def synpred372_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3723862)
        if self.failed:
            return 


    # $ANTLR end synpred372



    # $ANTLR start synpred374
    def synpred374_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:35: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:35: ( LT )* ',' ( ( LT )* assignmentExpression )?
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:35: ( LT )*
        while True: #loop463
            alt463 = 2
            LA463_0 = self.input.LA(1)

            if (LA463_0 == LT) :
                alt463 = 1


            if alt463 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3743856)
                if self.failed:
                    return 


            else:
                break #loop463


        self.match(self.input, 82, self.FOLLOW_82_in_synpred3743859)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:43: ( ( LT )* assignmentExpression )?
        alt465 = 2
        LA465_0 = self.input.LA(1)

        if ((LT <= LA465_0 <= RegularExpressionHacks) or LA465_0 == 72 or LA465_0 == 74 or LA465_0 == 76 or LA465_0 == 78 or (80 <= LA465_0 <= 81) or (84 <= LA465_0 <= 86) or (91 <= LA465_0 <= 92) or LA465_0 == 99 or LA465_0 == 110 or LA465_0 == 140 or (142 <= LA465_0 <= 154)) :
            alt465 = 1
        if alt465 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: ( LT )* assignmentExpression
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: ( LT )*
            while True: #loop464
                alt464 = 2
                LA464_0 = self.input.LA(1)

                if (LA464_0 == LT) :
                    LA464_2 = self.input.LA(2)

                    if (self.synpred372()) :
                        alt464 = 1




                if alt464 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred3743862)
                    if self.failed:
                        return 


                else:
                    break #loop464


            self.following.append(self.FOLLOW_assignmentExpression_in_synpred3743865)
            self.assignmentExpression()
            self.following.pop()
            if self.failed:
                return 





    # $ANTLR end synpred374



    # $ANTLR start synpred378
    def synpred378_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:4: ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:4: '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']'
        self.match(self.input, 92, self.FOLLOW_92_in_synpred3783847)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:8: ( LT )*
        while True: #loop467
            alt467 = 2
            LA467_0 = self.input.LA(1)

            if (LA467_0 == LT) :
                LA467_2 = self.input.LA(2)

                if (self.synpred369()) :
                    alt467 = 1




            if alt467 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3783849)
                if self.failed:
                    return 


            else:
                break #loop467


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:12: ( assignmentExpression )?
        alt468 = 2
        alt468 = self.dfa468.predict(self.input)
        if alt468 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: assignmentExpression
            self.following.append(self.FOLLOW_assignmentExpression_in_synpred3783852)
            self.assignmentExpression()
            self.following.pop()
            if self.failed:
                return 



        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:34: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )*
        while True: #loop472
            alt472 = 2
            alt472 = self.dfa472.predict(self.input)
            if alt472 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:35: ( LT )* ',' ( ( LT )* assignmentExpression )?
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:35: ( LT )*
                while True: #loop469
                    alt469 = 2
                    LA469_0 = self.input.LA(1)

                    if (LA469_0 == LT) :
                        alt469 = 1


                    if alt469 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3783856)
                        if self.failed:
                            return 


                    else:
                        break #loop469


                self.match(self.input, 82, self.FOLLOW_82_in_synpred3783859)
                if self.failed:
                    return 
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:43: ( ( LT )* assignmentExpression )?
                alt471 = 2
                alt471 = self.dfa471.predict(self.input)
                if alt471 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: ( LT )* assignmentExpression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:44: ( LT )*
                    while True: #loop470
                        alt470 = 2
                        LA470_0 = self.input.LA(1)

                        if (LA470_0 == LT) :
                            LA470_2 = self.input.LA(2)

                            if (self.synpred372()) :
                                alt470 = 1




                        if alt470 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            self.match(self.input, LT, self.FOLLOW_LT_in_synpred3783862)
                            if self.failed:
                                return 


                        else:
                            break #loop470


                    self.following.append(self.FOLLOW_assignmentExpression_in_synpred3783865)
                    self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return 





            else:
                break #loop472


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:73: ( LT )*
        while True: #loop473
            alt473 = 2
            LA473_0 = self.input.LA(1)

            if (LA473_0 == LT) :
                alt473 = 1


            if alt473 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3783871)
                if self.failed:
                    return 


            else:
                break #loop473


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:77: ( ',' ( LT )* )?
        alt475 = 2
        LA475_0 = self.input.LA(1)

        if (LA475_0 == 82) :
            alt475 = 1
        if alt475 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:78: ',' ( LT )*
            self.match(self.input, 82, self.FOLLOW_82_in_synpred3783875)
            if self.failed:
                return 
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:82: ( LT )*
            while True: #loop474
                alt474 = 2
                LA474_0 = self.input.LA(1)

                if (LA474_0 == LT) :
                    alt474 = 1


                if alt474 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred3783877)
                    if self.failed:
                        return 


                else:
                    break #loop474





        self.match(self.input, 93, self.FOLLOW_93_in_synpred3783882)
        if self.failed:
            return 


    # $ANTLR end synpred378



    # $ANTLR start synpred379
    def synpred379_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3793900)
        if self.failed:
            return 


    # $ANTLR end synpred379



    # $ANTLR start synpred381
    def synpred381_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:42: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:42: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3813912)
        if self.failed:
            return 


    # $ANTLR end synpred381



    # $ANTLR start synpred384
    def synpred384_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:62: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:62: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3843923)
        if self.failed:
            return 


    # $ANTLR end synpred384



    # $ANTLR start synpred386
    def synpred386_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:110: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:545:110: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3863935)
        if self.failed:
            return 


    # $ANTLR end synpred386



    # $ANTLR start synpred389
    def synpred389_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3893988)
        if self.failed:
            return 


    # $ANTLR end synpred389



    # $ANTLR start synpred398
    def synpred398_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:556:25: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:556:25: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3984049)
        if self.failed:
            return 


    # $ANTLR end synpred398



    # $ANTLR start synpred497
    def synpred497_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:615:8: ( reFirstChar )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:615:8: reFirstChar
        self.following.append(self.FOLLOW_reFirstChar_in_synpred4974687)
        self.reFirstChar()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred497



    def synpred44(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred44_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred305(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred305_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred303(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred303_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred302(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred302_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred42(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred42_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred41(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred41_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred165(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred165_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred163(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred163_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred253(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred253_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred254(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred254_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred167(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred167_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred34(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred34_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred32(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred32_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred31(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred31_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred369(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred369_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred154(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred154_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred367(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred367_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred366(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred366_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred159(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred159_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred268(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred268_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred362(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred362_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred157(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred157_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred65(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred65_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred62(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred62_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred64(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred64_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred105(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred105_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred104(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred104_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred378(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred378_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred108(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred108_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred182(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred182_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred180(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred180_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred379(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred379_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred237(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred237_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred374(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred374_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred372(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred372_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred233(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred233_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred59(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred59_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred52(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred52_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred51(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred51_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred1(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred1_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred3(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred3_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred386(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred386_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred389(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred389_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred242(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred242_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred177(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred177_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred381(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred381_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred179(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred179_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred249(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred249_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred244(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred244_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred243(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred243_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred384(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred384_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred245(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred245_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred126(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred126_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred299(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred299_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred129(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred129_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred122(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred122_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred84(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred84_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred124(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred124_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred317(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred317_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred290(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred290_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred291(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred291_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred497(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred497_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred219(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred219_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred218(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred218_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred293(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred293_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred398(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred398_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred296(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred296_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred297(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred297_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred210(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred210_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred211(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred211_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred217(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred217_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred215(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred215_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred311(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred311_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred312(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred312_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred117(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred117_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred116(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred116_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred113(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred113_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred112(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred112_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred110(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred110_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred79(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred79_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred229(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred229_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred221(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred221_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred224(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred224_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred199(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred199_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred226(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred226_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred325(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred325_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred196(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred196_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred326(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred326_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred144(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred144_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred146(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred146_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred278(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred278_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred279(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred279_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred273(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred273_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred275(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred275_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred142(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred142_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred270(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred270_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred271(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred271_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred28(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred28_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred25(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred25_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred332(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred332_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred337(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred337_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred338(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred338_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred21(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred21_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred135(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred135_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred139(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred139_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred18(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred18_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred93(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred93_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred287(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred287_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred285(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred285_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred284(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred284_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred281(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred281_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred132(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred132_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred207(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred207_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred98(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred98_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred203(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred203_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred341(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred341_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred202(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred202_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred342(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred342_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred15(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred15_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred17(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred17_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred346(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred346_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred347(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred347_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success



    # lookup tables for DFA #4

    DFA4_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA4_eof = DFA.unpack(
        u"\2\2\2\uffff"
        )

    DFA4_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA4_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA4_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA4_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA4_transition = [
        DFA.unpack(u"\1\1\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\1\3\1\uffff\2\3\2\uffff\11\3\1\uffff\1\3\1\uffff\4\3\1\uffff\4"
        u"\3\1\uffff\2\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15\3"),
        DFA.unpack(u"\1\1\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\1\3\1\uffff\2\3\2\uffff\11\3\1\uffff\1\3\1\uffff\4\3\1\uffff\4"
        u"\3\1\uffff\2\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #4

    DFA4 = DFA
    # lookup tables for DFA #6

    DFA6_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA6_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA6_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA6_max = DFA.unpack(
        u"\2\u0097\2\uffff"
        )

    DFA6_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA6_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA6_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\3\33\uffff\1\2\12\uffff\3\3\14\uffff"
        u"\1\3\62\uffff\2\3"),
        DFA.unpack(u"\1\1\3\uffff\1\3\33\uffff\1\2\12\uffff\3\3\14\uffff"
        u"\1\3\62\uffff\2\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #6

    DFA6 = DFA
    # lookup tables for DFA #9

    DFA9_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA9_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA9_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA9_max = DFA.unpack(
        u"\2\u0097\2\uffff"
        )

    DFA9_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA9_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA9_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\3\34\uffff\1\2\11\uffff\3\3\14\uffff"
        u"\1\3\62\uffff\2\3"),
        DFA.unpack(u"\1\1\3\uffff\1\3\34\uffff\1\2\11\uffff\3\3\14\uffff"
        u"\1\3\62\uffff\2\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #9

    DFA9 = DFA
    # lookup tables for DFA #14

    DFA14_eot = DFA.unpack(
        u"\21\uffff"
        )

    DFA14_eof = DFA.unpack(
        u"\21\uffff"
        )

    DFA14_min = DFA.unpack(
        u"\1\53\1\55\3\uffff\1\51\1\55\1\51\1\113\2\uffff\1\51\1\55\1\52"
        u"\1\113\1\0\1\51"
        )

    DFA14_max = DFA.unpack(
        u"\1\116\1\u0097\3\uffff\3\u0097\1\115\2\uffff\2\u0097\1\116\1\115"
        u"\1\0\1\u0097"
        )

    DFA14_accept = DFA.unpack(
        u"\2\uffff\1\4\1\5\1\1\4\uffff\1\2\1\3\6\uffff"
        )

    DFA14_special = DFA.unpack(
        u"\17\uffff\1\0\1\uffff"
        )

            
    DFA14_transition = [
        DFA.unpack(u"\1\3\34\uffff\1\1\5\uffff\1\2"),
        DFA.unpack(u"\1\5\34\uffff\1\4\11\uffff\3\5\14\uffff\1\5\62\uffff"
        u"\2\5"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\7\3\uffff\1\10\33\uffff\1\12\1\11\2\6\7\uffff\3\10"
        u"\14\uffff\1\10\62\uffff\2\10"),
        DFA.unpack(u"\1\13\46\uffff\3\13\14\uffff\1\13\62\uffff\2\13"),
        DFA.unpack(u"\1\7\3\uffff\1\10\33\uffff\1\12\1\11\11\uffff\3\10\14"
        u"\uffff\1\10\62\uffff\2\10"),
        DFA.unpack(u"\2\14\1\15"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\7\3\uffff\1\10\33\uffff\1\12\1\11\2\6\7\uffff\3\10"
        u"\14\uffff\1\10\62\uffff\2\10"),
        DFA.unpack(u"\1\16\46\uffff\3\16\14\uffff\1\16\62\uffff\2\16"),
        DFA.unpack(u"\1\20\43\uffff\1\17"),
        DFA.unpack(u"\2\14\1\15"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u"\1\7\3\uffff\1\10\33\uffff\1\12\1\11\11\uffff\3\10\14"
        u"\uffff\1\10\62\uffff\2\10")
    ]

    # class definition for DFA #14

    class DFA14(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA14_15 = input.LA(1)

                 
                index14_15 = input.index()
                input.rewind()
                s = -1
                if (self.synpred17()):
                    s = 9

                elif (self.synpred18()):
                    s = 10

                 
                input.seek(index14_15)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 14, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #32

    DFA32_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA32_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA32_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA32_max = DFA.unpack(
        u"\2\u0097\2\uffff"
        )

    DFA32_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA32_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA32_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\2\45\uffff\1\3\3\2\14\uffff\1\2\62\uffff"
        u"\2\2"),
        DFA.unpack(u"\1\1\3\uffff\1\2\45\uffff\1\3\3\2\14\uffff\1\2\62\uffff"
        u"\2\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #32

    DFA32 = DFA
    # lookup tables for DFA #31

    DFA31_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA31_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA31_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA31_max = DFA.unpack(
        u"\2\123\2\uffff"
        )

    DFA31_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA31_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA31_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\3\1\2"),
        DFA.unpack(u"\1\1\50\uffff\1\3\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #31

    DFA31 = DFA
    # lookup tables for DFA #39

    DFA39_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA39_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA39_min = DFA.unpack(
        u"\1\51\1\uffff\1\51\1\uffff"
        )

    DFA39_max = DFA.unpack(
        u"\1\u009a\1\uffff\1\117\1\uffff"
        )

    DFA39_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA39_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA39_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\3\2\1\2\uffff\11\1\1\uffff\1\1\1\uffff\4\1\1\uffff\4\1\1"
        u"\uffff\2\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\34\uffff\1\1\5\uffff\1\1\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #39

    DFA39 = DFA
    # lookup tables for DFA #50

    DFA50_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA50_eof = DFA.unpack(
        u"\1\uffff\1\2\2\uffff\1\2"
        )

    DFA50_min = DFA.unpack(
        u"\2\51\2\uffff\1\51"
        )

    DFA50_max = DFA.unpack(
        u"\1\127\1\u009a\2\uffff\1\u009a"
        )

    DFA50_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1\1\uffff"
        )

    DFA50_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA50_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\3\1\2\3\uffff\1\2"),
        DFA.unpack(u"\1\4\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\4\2\1\3\12\2\1\uffff\6\2\1\uffff\7\2\2\uffff\1\2\35\uffff\1\2"
        u"\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\4\2\1\3\12\2\1\uffff\6\2\1\uffff\7\2\2\uffff\1\2\35\uffff\1\2"
        u"\1\uffff\15\2")
    ]

    # class definition for DFA #50

    DFA50 = DFA
    # lookup tables for DFA #53

    DFA53_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA53_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA53_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA53_max = DFA.unpack(
        u"\2\127\2\uffff"
        )

    DFA53_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA53_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA53_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u"\1\1\50\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #53

    DFA53 = DFA
    # lookup tables for DFA #55

    DFA55_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA55_eof = DFA.unpack(
        u"\2\3\2\uffff\1\3"
        )

    DFA55_min = DFA.unpack(
        u"\2\51\2\uffff\1\51"
        )

    DFA55_max = DFA.unpack(
        u"\1\127\1\u009a\2\uffff\1\u009a"
        )

    DFA55_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2\1\uffff"
        )

    DFA55_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA55_transition = [
        DFA.unpack(u"\1\1\43\uffff\1\2\4\uffff\2\3\3\uffff\1\3"),
        DFA.unpack(u"\1\4\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\2\17"
        u"\3\1\uffff\6\3\1\uffff\7\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15"
        u"\3"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\2\17"
        u"\3\1\uffff\6\3\1\uffff\7\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15"
        u"\3")
    ]

    # class definition for DFA #55

    DFA55 = DFA
    # lookup tables for DFA #61

    DFA61_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA61_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA61_min = DFA.unpack(
        u"\2\51\1\0\2\uffff"
        )

    DFA61_max = DFA.unpack(
        u"\2\135\1\0\2\uffff"
        )

    DFA61_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA61_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA61_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #61

    class DFA61(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA61_2 = input.LA(1)

                 
                index61_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred84()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index61_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 61, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #60

    DFA60_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA60_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA60_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA60_max = DFA.unpack(
        u"\2\u0097\2\uffff"
        )

    DFA60_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA60_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA60_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\2\44\uffff\1\3\1\uffff\3\2\6\uffff\1"
        u"\3\5\uffff\1\2\62\uffff\2\2"),
        DFA.unpack(u"\1\1\3\uffff\1\2\44\uffff\1\3\1\uffff\3\2\6\uffff\1"
        u"\3\5\uffff\1\2\62\uffff\2\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #60

    DFA60 = DFA
    # lookup tables for DFA #66

    DFA66_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA66_eof = DFA.unpack(
        u"\2\3\2\uffff\1\3"
        )

    DFA66_min = DFA.unpack(
        u"\2\51\2\uffff\1\51"
        )

    DFA66_max = DFA.unpack(
        u"\1\127\1\u009a\2\uffff\1\u009a"
        )

    DFA66_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2\1\uffff"
        )

    DFA66_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA66_transition = [
        DFA.unpack(u"\1\1\43\uffff\1\2\4\uffff\2\3\3\uffff\1\3"),
        DFA.unpack(u"\1\4\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\2\17"
        u"\3\1\uffff\6\3\1\uffff\7\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15"
        u"\3"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\2\17"
        u"\3\1\uffff\6\3\1\uffff\7\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15"
        u"\3")
    ]

    # class definition for DFA #66

    DFA66 = DFA
    # lookup tables for DFA #69

    DFA69_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA69_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA69_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA69_max = DFA.unpack(
        u"\2\144\2\uffff"
        )

    DFA69_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA69_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA69_transition = [
        DFA.unpack(u"\1\1\43\uffff\1\2\4\uffff\1\3\4\uffff\1\3\14\uffff\1"
        u"\3"),
        DFA.unpack(u"\1\1\43\uffff\1\2\4\uffff\1\3\4\uffff\1\3\14\uffff\1"
        u"\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #69

    DFA69 = DFA
    # lookup tables for DFA #75

    DFA75_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA75_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA75_min = DFA.unpack(
        u"\2\51\1\0\2\uffff"
        )

    DFA75_max = DFA.unpack(
        u"\2\135\1\0\2\uffff"
        )

    DFA75_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA75_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA75_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #75

    class DFA75(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA75_2 = input.LA(1)

                 
                index75_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred98()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index75_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 75, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #74

    DFA74_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA74_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA74_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA74_max = DFA.unpack(
        u"\2\u0097\2\uffff"
        )

    DFA74_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA74_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA74_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\2\44\uffff\1\3\1\uffff\3\2\6\uffff\1"
        u"\3\5\uffff\1\2\62\uffff\2\2"),
        DFA.unpack(u"\1\1\3\uffff\1\2\44\uffff\1\3\1\uffff\3\2\6\uffff\1"
        u"\3\5\uffff\1\2\62\uffff\2\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #74

    DFA74 = DFA
    # lookup tables for DFA #80

    DFA80_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA80_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA80_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA80_max = DFA.unpack(
        u"\2\144\2\uffff"
        )

    DFA80_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA80_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA80_transition = [
        DFA.unpack(u"\1\1\43\uffff\1\2\4\uffff\1\3\4\uffff\1\3\14\uffff\1"
        u"\3"),
        DFA.unpack(u"\1\1\43\uffff\1\2\4\uffff\1\3\4\uffff\1\3\14\uffff\1"
        u"\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #80

    DFA80 = DFA
    # lookup tables for DFA #102

    DFA102_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA102_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA102_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA102_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA102_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA102_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA102_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\2\uffff\3\2\1\3\1\uffff\1\2\1\uffff\2\2\6\uffff"
        u"\1\2\12\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\2\uffff\3\2\1\3\1\uffff\1\2\1\uffff\2\2\6\uffff"
        u"\1\2\12\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #102

    DFA102 = DFA
    # lookup tables for DFA #105

    DFA105_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA105_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA105_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA105_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA105_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA105_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA105_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\2\uffff\3\2\1\3\3\uffff\2\2\6\uffff\1\2\12\uffff"
        u"\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\2\uffff\3\2\1\3\3\uffff\2\2\6\uffff\1\2\12\uffff"
        u"\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #105

    DFA105 = DFA
    # lookup tables for DFA #108

    DFA108_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA108_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA108_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA108_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA108_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA108_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA108_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\4\uffff\2\2\6\uffff\1\2\12\uffff"
        u"\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\4\uffff\2\2\6\uffff\1\2\12\uffff"
        u"\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #108

    DFA108 = DFA
    # lookup tables for DFA #113

    DFA113_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA113_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA113_min = DFA.unpack(
        u"\1\51\1\uffff\1\51\1\uffff\1\51"
        )

    DFA113_max = DFA.unpack(
        u"\1\u009a\1\uffff\1\u0097\1\uffff\1\u0097"
        )

    DFA113_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2\1\uffff"
        )

    DFA113_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA113_transition = [
        DFA.unpack(u"\6\1\31\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1"
        u"\1\1\uffff\2\1\2\uffff\3\1\2\uffff\1\3\1\uffff\1\2\1\1\6\uffff"
        u"\1\1\12\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\3\43\uffff\1\1\2\uffff\3\3\5\uffff\1"
        u"\3\6\uffff\1\3\62\uffff\2\3"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\3\43\uffff\1\1\2\uffff\3\3\5\uffff\1"
        u"\3\6\uffff\1\3\62\uffff\2\3")
    ]

    # class definition for DFA #113

    DFA113 = DFA
    # lookup tables for DFA #144

    DFA144_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA144_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA144_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA144_max = DFA.unpack(
        u"\2\151\2\uffff"
        )

    DFA144_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA144_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA144_transition = [
        DFA.unpack(u"\1\1\45\uffff\1\2\4\uffff\1\2\24\uffff\1\3"),
        DFA.unpack(u"\1\1\45\uffff\1\2\4\uffff\1\2\24\uffff\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #144

    DFA144 = DFA
    # lookup tables for DFA #148

    DFA148_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA148_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA148_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA148_max = DFA.unpack(
        u"\2\124\2\uffff"
        )

    DFA148_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA148_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA148_transition = [
        DFA.unpack(u"\1\1\45\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u"\1\1\45\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #148

    DFA148 = DFA
    # lookup tables for DFA #147

    DFA147_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA147_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA147_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA147_max = DFA.unpack(
        u"\2\151\2\uffff"
        )

    DFA147_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA147_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA147_transition = [
        DFA.unpack(u"\1\1\45\uffff\1\2\31\uffff\1\3"),
        DFA.unpack(u"\1\1\45\uffff\1\2\31\uffff\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #147

    DFA147 = DFA
    # lookup tables for DFA #156

    DFA156_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA156_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA156_min = DFA.unpack(
        u"\1\51\1\uffff\1\51\1\uffff"
        )

    DFA156_max = DFA.unpack(
        u"\1\u009a\1\uffff\1\151\1\uffff"
        )

    DFA156_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA156_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA156_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\3\2\1\2\uffff\11\1\1\uffff\1\1\1\uffff\4\1\1\uffff\4\1\1"
        u"\3\2\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\34\uffff\1\1\5\uffff\1\1\1\3\31\uffff"
        u"\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #156

    DFA156 = DFA
    # lookup tables for DFA #160

    DFA160_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA160_eof = DFA.unpack(
        u"\2\3\2\uffff"
        )

    DFA160_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA160_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA160_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA160_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA160_transition = [
        DFA.unpack(u"\1\1\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\4\3\2\uffff\11\3\1\uffff\6\3\1\uffff\7\3\1\uffff\1\2\1\3\35\uffff"
        u"\1\3\1\uffff\15\3"),
        DFA.unpack(u"\1\1\5\3\31\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\4\3\2\uffff\11\3\1\uffff\6\3\1\uffff\7\3\1\uffff\1\2\1\3\35\uffff"
        u"\1\3\1\uffff\15\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #160

    DFA160 = DFA
    # lookup tables for DFA #169

    DFA169_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA169_eof = DFA.unpack(
        u"\1\1\1\uffff\1\1\1\uffff\1\1"
        )

    DFA169_min = DFA.unpack(
        u"\1\51\1\uffff\1\51\1\uffff\1\51"
        )

    DFA169_max = DFA.unpack(
        u"\1\142\1\uffff\1\u009a\1\uffff\1\u009a"
        )

    DFA169_accept = DFA.unpack(
        u"\1\uffff\1\2\1\uffff\1\1\1\uffff"
        )

    DFA169_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA169_transition = [
        DFA.unpack(u"\1\2\41\uffff\1\1\3\uffff\1\1\2\uffff\1\3\1\1\3\uffff"
        u"\1\1\5\uffff\1\1\4\uffff\1\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\1\31\uffff\1\1\1\uffff\3\1\1\uffff\4\1\1\3\21"
        u"\1\1\uffff\7\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\1\31\uffff\1\1\1\uffff\3\1\1\uffff\4\1\1\3\21"
        u"\1\1\uffff\7\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1")
    ]

    # class definition for DFA #169

    DFA169 = DFA
    # lookup tables for DFA #172

    DFA172_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA172_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA172_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA172_max = DFA.unpack(
        u"\2\127\2\uffff"
        )

    DFA172_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA172_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA172_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u"\1\1\50\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #172

    DFA172 = DFA
    # lookup tables for DFA #211

    DFA211_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA211_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA211_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA211_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA211_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA211_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA211_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\4\uffff\2\2\6\uffff\1\2\12\uffff"
        u"\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\4\uffff\2\2\6\uffff\1\2\12\uffff"
        u"\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #211

    DFA211 = DFA
    # lookup tables for DFA #229

    DFA229_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA229_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA229_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA229_max = DFA.unpack(
        u"\2\174\2\uffff"
        )

    DFA229_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA229_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA229_transition = [
        DFA.unpack(u"\1\1\41\uffff\1\3\6\uffff\1\3\4\uffff\1\3\14\uffff\1"
        u"\3\27\uffff\1\2"),
        DFA.unpack(u"\1\1\41\uffff\1\3\6\uffff\1\3\4\uffff\1\3\14\uffff\1"
        u"\3\27\uffff\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #229

    DFA229 = DFA
    # lookup tables for DFA #235

    DFA235_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA235_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA235_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA235_max = DFA.unpack(
        u"\2\175\2\uffff"
        )

    DFA235_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA235_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA235_transition = [
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\1\2\1\3"),
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\1\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #235

    DFA235 = DFA
    # lookup tables for DFA #241

    DFA241_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA241_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA241_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA241_max = DFA.unpack(
        u"\2\176\2\uffff"
        )

    DFA241_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA241_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA241_transition = [
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\2\2\1\3"),
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\2\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #241

    DFA241 = DFA
    # lookup tables for DFA #247

    DFA247_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA247_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA247_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA247_max = DFA.unpack(
        u"\2\177\2\uffff"
        )

    DFA247_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA247_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA247_transition = [
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\3\2\1\3"),
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\3\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #247

    DFA247 = DFA
    # lookup tables for DFA #253

    DFA253_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA253_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA253_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA253_max = DFA.unpack(
        u"\2\u0080\2\uffff"
        )

    DFA253_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA253_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA253_transition = [
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\4\2\1\3"),
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\4\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #253

    DFA253 = DFA
    # lookup tables for DFA #259

    DFA259_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA259_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA259_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA259_max = DFA.unpack(
        u"\2\u0081\2\uffff"
        )

    DFA259_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA259_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA259_transition = [
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\5\2\1\3"),
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\5\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #259

    DFA259 = DFA
    # lookup tables for DFA #265

    DFA265_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA265_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA265_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA265_max = DFA.unpack(
        u"\2\u0085\2\uffff"
        )

    DFA265_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA265_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA265_transition = [
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\6\2\4\3"),
        DFA.unpack(u"\1\1\41\uffff\1\2\6\uffff\1\2\4\uffff\1\2\14\uffff\1"
        u"\2\27\uffff\6\2\4\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #265

    DFA265 = DFA
    # lookup tables for DFA #271

    DFA271_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA271_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA271_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA271_max = DFA.unpack(
        u"\2\u0088\2\uffff"
        )

    DFA271_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA271_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA271_transition = [
        DFA.unpack(u"\1\1\36\uffff\2\3\1\uffff\1\2\6\uffff\1\2\4\uffff\1"
        u"\2\14\uffff\1\2\27\uffff\12\2\3\3"),
        DFA.unpack(u"\1\1\36\uffff\2\3\1\uffff\1\2\6\uffff\1\2\4\uffff\1"
        u"\2\14\uffff\1\2\27\uffff\12\2\3\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #271

    DFA271 = DFA
    # lookup tables for DFA #287

    DFA287_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA287_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA287_min = DFA.unpack(
        u"\1\51\1\uffff\1\51\1\uffff"
        )

    DFA287_max = DFA.unpack(
        u"\1\u009a\1\uffff\1\135\1\uffff"
        )

    DFA287_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA287_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA287_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\2\1\1\3\1\uffff\3\1\4\uffff\2\1\1\3\5\uffff\1\1\12"
        u"\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\34\uffff\1\1\5\uffff\1\1\3\uffff\1"
        u"\3\12\uffff\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #287

    DFA287 = DFA
    # lookup tables for DFA #291

    DFA291_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA291_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA291_min = DFA.unpack(
        u"\2\51\1\0\2\uffff"
        )

    DFA291_max = DFA.unpack(
        u"\2\135\1\0\2\uffff"
        )

    DFA291_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA291_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA291_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #291

    class DFA291(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA291_2 = input.LA(1)

                 
                index291_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred374()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index291_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 291, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #290

    DFA290_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA290_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA290_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA290_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA290_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA290_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA290_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\4\uffff\2\2\1\3\5\uffff\1\2\12"
        u"\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\4\uffff\2\2\1\3\5\uffff\1\2\12"
        u"\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #290

    DFA290 = DFA
    # lookup tables for DFA #310

    DFA310_eot = DFA.unpack(
        u"\6\uffff"
        )

    DFA310_eof = DFA.unpack(
        u"\6\uffff"
        )

    DFA310_min = DFA.unpack(
        u"\3\51\1\uffff\1\51\1\uffff"
        )

    DFA310_max = DFA.unpack(
        u"\2\122\1\u0097\1\uffff\1\u0097\1\uffff"
        )

    DFA310_accept = DFA.unpack(
        u"\3\uffff\1\2\1\uffff\1\1"
        )

    DFA310_special = DFA.unpack(
        u"\6\uffff"
        )

            
    DFA310_transition = [
        DFA.unpack(u"\1\1\45\uffff\1\3\2\uffff\1\2"),
        DFA.unpack(u"\1\1\45\uffff\1\3\2\uffff\1\2"),
        DFA.unpack(u"\1\4\1\5\1\uffff\2\5\41\uffff\1\3\4\uffff\3\5\14\uffff"
        u"\1\5\62\uffff\2\5"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\1\5\1\uffff\2\5\41\uffff\1\3\4\uffff\3\5\14\uffff"
        u"\1\5\62\uffff\2\5"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #310

    DFA310 = DFA
    # lookup tables for DFA #324

    DFA324_eot = DFA.unpack(
        u"\11\uffff"
        )

    DFA324_eof = DFA.unpack(
        u"\11\uffff"
        )

    DFA324_min = DFA.unpack(
        u"\1\52\1\51\1\uffff\3\51\1\uffff\1\51\1\uffff"
        )

    DFA324_max = DFA.unpack(
        u"\2\u0097\1\uffff\3\u0097\1\uffff\1\u0097\1\uffff"
        )

    DFA324_accept = DFA.unpack(
        u"\2\uffff\1\1\3\uffff\1\3\1\uffff\1\2"
        )

    DFA324_special = DFA.unpack(
        u"\11\uffff"
        )

            
    DFA324_transition = [
        DFA.unpack(u"\1\2\1\uffff\2\2\46\uffff\3\2\14\uffff\1\2\62\uffff"
        u"\1\1\1\3"),
        DFA.unpack(u"\1\4\3\uffff\1\5\35\uffff\1\2\10\uffff\3\5\14\uffff"
        u"\1\5\62\uffff\2\5"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\5\35\uffff\1\2\10\uffff\3\5\14\uffff"
        u"\1\5\62\uffff\2\5"),
        DFA.unpack(u"\1\4\3\uffff\1\6\35\uffff\1\2\10\uffff\3\6\14\uffff"
        u"\1\6\62\uffff\2\6"),
        DFA.unpack(u"\1\7\3\uffff\1\10\43\uffff\1\6\2\uffff\3\10\14\uffff"
        u"\1\10\62\uffff\2\10"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\7\3\uffff\1\10\43\uffff\1\6\2\uffff\3\10\14\uffff"
        u"\1\10\62\uffff\2\10"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #324

    DFA324 = DFA
    # lookup tables for DFA #352

    DFA352_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA352_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA352_min = DFA.unpack(
        u"\1\51\1\uffff\1\51\1\uffff"
        )

    DFA352_max = DFA.unpack(
        u"\1\u009a\1\uffff\1\117\1\uffff"
        )

    DFA352_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA352_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA352_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\3\2\1\2\uffff\11\1\1\uffff\1\1\1\uffff\4\1\1\uffff\4\1\1"
        u"\uffff\2\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\34\uffff\1\1\5\uffff\1\1\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #352

    DFA352 = DFA
    # lookup tables for DFA #468

    DFA468_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA468_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA468_min = DFA.unpack(
        u"\1\51\1\uffff\1\51\1\uffff"
        )

    DFA468_max = DFA.unpack(
        u"\1\u009a\1\uffff\1\135\1\uffff"
        )

    DFA468_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA468_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA468_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\2\1\1\3\1\uffff\3\1\4\uffff\2\1\1\3\5\uffff\1\1\12"
        u"\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\34\uffff\1\1\5\uffff\1\1\3\uffff\1"
        u"\3\12\uffff\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #468

    DFA468 = DFA
    # lookup tables for DFA #472

    DFA472_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA472_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA472_min = DFA.unpack(
        u"\2\51\1\0\2\uffff"
        )

    DFA472_max = DFA.unpack(
        u"\2\135\1\0\2\uffff"
        )

    DFA472_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA472_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA472_transition = [
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\1\50\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #472

    class DFA472(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA472_2 = input.LA(1)

                 
                index472_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred374()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index472_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 472, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #471

    DFA471_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA471_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA471_min = DFA.unpack(
        u"\2\51\2\uffff"
        )

    DFA471_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA471_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA471_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA471_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\4\uffff\2\2\1\3\5\uffff\1\2\12"
        u"\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\4\uffff\2\2\1\3\5\uffff\1\2\12"
        u"\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #471

    DFA471 = DFA
 

    FOLLOW_LT_in_program196 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_sourceElements_in_program199 = frozenset([41])
    FOLLOW_LT_in_program201 = frozenset([41])
    FOLLOW_EOF_in_program204 = frozenset([1])
    FOLLOW_sourceElement_in_sourceElements230 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_sourceElements233 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_sourceElement_in_sourceElements237 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_sourceElement251 = frozenset([1])
    FOLLOW_72_in_xmlStartTag269 = frozenset([45, 84, 85, 86, 99, 150, 151])
    FOLLOW_xmlTagName_in_xmlStartTag271 = frozenset([41, 45, 73, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_xmlStartTag274 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_xmlAttribute_in_xmlStartTag278 = frozenset([41, 45, 73, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_xmlStartTag282 = frozenset([1])
    FOLLOW_73_in_xmlStartTag286 = frozenset([1])
    FOLLOW_72_in_xmlEndTag304 = frozenset([74])
    FOLLOW_74_in_xmlEndTag306 = frozenset([45, 84, 85, 86, 99, 150, 151])
    FOLLOW_xmlTagName_in_xmlEndTag308 = frozenset([73])
    FOLLOW_73_in_xmlEndTag310 = frozenset([1])
    FOLLOW_72_in_xmlEmptyTag328 = frozenset([45, 84, 85, 86, 99, 150, 151])
    FOLLOW_xmlTagName_in_xmlEmptyTag330 = frozenset([41, 45, 74, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_xmlEmptyTag333 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_xmlAttribute_in_xmlEmptyTag337 = frozenset([41, 45, 74, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_xmlEmptyTag341 = frozenset([1])
    FOLLOW_74_in_xmlEmptyTag345 = frozenset([73])
    FOLLOW_73_in_xmlEmptyTag347 = frozenset([1])
    FOLLOW_identifier_in_xmlTagName365 = frozenset([1, 75, 76])
    FOLLOW_set_in_xmlTagName369 = frozenset([45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_xmlTagName375 = frozenset([1, 75, 76])
    FOLLOW_xmlAttributeName_in_xmlAttribute395 = frozenset([77])
    FOLLOW_77_in_xmlAttribute397 = frozenset([42, 78])
    FOLLOW_xmlAttributeValue_in_xmlAttribute399 = frozenset([1])
    FOLLOW_identifier_in_xmlAttributeName418 = frozenset([1, 75, 76])
    FOLLOW_set_in_xmlAttributeName422 = frozenset([45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_xmlAttributeName428 = frozenset([1, 75, 76])
    FOLLOW_e4xSplice_in_xmlAttributeValue453 = frozenset([1])
    FOLLOW_StringLiteral_in_xmlAttributeValue458 = frozenset([1])
    FOLLOW_78_in_e4xSplice476 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_e4xSplice478 = frozenset([79])
    FOLLOW_79_in_e4xSplice480 = frozenset([1])
    FOLLOW_xmlEndTag_in_xmlPayload494 = frozenset([1])
    FOLLOW_xmlEmptyTag_in_xmlPayload499 = frozenset([1])
    FOLLOW_xmlStartTag_in_xmlPayload504 = frozenset([1])
    FOLLOW_e4xSplice_in_xmlPayload509 = frozenset([1])
    FOLLOW_XMLComment_in_xmlPayload514 = frozenset([1])
    FOLLOW_LT_in_xmlLiteral527 = frozenset([41, 43, 72, 78])
    FOLLOW_xmlPayload_in_xmlLiteral530 = frozenset([1, 41, 43, 72, 78])
    FOLLOW_80_in_functionExpression545 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_functionExpression547 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_functionExpression550 = frozenset([41, 81])
    FOLLOW_LT_in_functionExpression552 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_functionExpression555 = frozenset([41, 78])
    FOLLOW_LT_in_functionExpression557 = frozenset([41, 78])
    FOLLOW_statementBlock_in_functionExpression560 = frozenset([1])
    FOLLOW_80_in_functionExpression587 = frozenset([41, 81])
    FOLLOW_LT_in_functionExpression589 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_functionExpression592 = frozenset([41, 78])
    FOLLOW_LT_in_functionExpression594 = frozenset([41, 78])
    FOLLOW_statementBlock_in_functionExpression597 = frozenset([1])
    FOLLOW_80_in_functionExpression623 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_functionExpression625 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_functionExpression628 = frozenset([41, 81])
    FOLLOW_LT_in_functionExpression630 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_functionExpression633 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_functionExpression635 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_functionExpression638 = frozenset([1])
    FOLLOW_80_in_functionExpression665 = frozenset([41, 81])
    FOLLOW_LT_in_functionExpression667 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_functionExpression670 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_functionExpression672 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_functionExpression675 = frozenset([1])
    FOLLOW_81_in_formalParameterList708 = frozenset([41, 45, 83, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_formalParameterList711 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_formalParameterList714 = frozenset([41, 82, 83])
    FOLLOW_LT_in_formalParameterList717 = frozenset([41, 82])
    FOLLOW_82_in_formalParameterList720 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_formalParameterList722 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_formalParameterList725 = frozenset([41, 82, 83])
    FOLLOW_LT_in_formalParameterList731 = frozenset([41, 83])
    FOLLOW_83_in_formalParameterList734 = frozenset([1])
    FOLLOW_statementBlock_in_statement757 = frozenset([1])
    FOLLOW_variableStatement_in_statement762 = frozenset([1])
    FOLLOW_emptyStatement_in_statement767 = frozenset([1])
    FOLLOW_expressionStatement_in_statement772 = frozenset([1])
    FOLLOW_ifStatement_in_statement777 = frozenset([1])
    FOLLOW_iterationStatement_in_statement782 = frozenset([1])
    FOLLOW_continueStatement_in_statement787 = frozenset([1])
    FOLLOW_breakStatement_in_statement792 = frozenset([1])
    FOLLOW_returnStatement_in_statement797 = frozenset([1])
    FOLLOW_withStatement_in_statement802 = frozenset([1])
    FOLLOW_letStatement_in_statement807 = frozenset([1])
    FOLLOW_labelledStatement_in_statement812 = frozenset([1])
    FOLLOW_switchStatement_in_statement817 = frozenset([1])
    FOLLOW_throwStatement_in_statement822 = frozenset([1])
    FOLLOW_tryStatement_in_statement827 = frozenset([1])
    FOLLOW_defaultXmlNamespaceStatement_in_statement832 = frozenset([1])
    FOLLOW_84_in_defaultXmlNamespaceStatement843 = frozenset([85])
    FOLLOW_85_in_defaultXmlNamespaceStatement845 = frozenset([86])
    FOLLOW_86_in_defaultXmlNamespaceStatement847 = frozenset([41, 77])
    FOLLOW_LT_in_defaultXmlNamespaceStatement849 = frozenset([41, 77])
    FOLLOW_77_in_defaultXmlNamespaceStatement852 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_defaultXmlNamespaceStatement854 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_defaultXmlNamespaceStatement857 = frozenset([41, 87])
    FOLLOW_LT_in_defaultXmlNamespaceStatement860 = frozenset([1])
    FOLLOW_87_in_defaultXmlNamespaceStatement864 = frozenset([1])
    FOLLOW_78_in_statementBlock886 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_statementBlock888 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statementList_in_statementBlock891 = frozenset([41, 79])
    FOLLOW_LT_in_statementBlock894 = frozenset([41, 79])
    FOLLOW_79_in_statementBlock897 = frozenset([1])
    FOLLOW_78_in_statementBlock915 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 88, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_88_in_statementBlock917 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_statementBlock920 = frozenset([79])
    FOLLOW_79_in_statementBlock922 = frozenset([1])
    FOLLOW_statement_in_statementList951 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_statementList954 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_statementList958 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_89_in_variableStatement974 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_90_in_variableStatement978 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_91_in_variableStatement982 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_variableStatement985 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclarationList_in_variableStatement988 = frozenset([41, 87])
    FOLLOW_LT_in_variableStatement991 = frozenset([1])
    FOLLOW_87_in_variableStatement995 = frozenset([1])
    FOLLOW_variableDeclaration_in_variableDeclarationList1020 = frozenset([1, 41, 82])
    FOLLOW_LT_in_variableDeclarationList1023 = frozenset([41, 82])
    FOLLOW_82_in_variableDeclarationList1027 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_variableDeclarationList1030 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclaration_in_variableDeclarationList1034 = frozenset([1, 41, 82])
    FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1048 = frozenset([1, 41, 82])
    FOLLOW_LT_in_variableDeclarationListNoIn1051 = frozenset([41, 82])
    FOLLOW_82_in_variableDeclarationListNoIn1055 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_variableDeclarationListNoIn1058 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1062 = frozenset([1, 41, 82])
    FOLLOW_identifier_in_variableDeclaration1076 = frozenset([1, 41, 77])
    FOLLOW_LT_in_variableDeclaration1079 = frozenset([41, 77])
    FOLLOW_initialiser_in_variableDeclaration1082 = frozenset([1])
    FOLLOW_92_in_variableDeclaration1102 = frozenset([41, 45, 82, 84, 85, 86, 93, 99, 150, 151])
    FOLLOW_LT_in_variableDeclaration1104 = frozenset([41, 45, 82, 84, 85, 86, 93, 99, 150, 151])
    FOLLOW_identifier_in_variableDeclaration1107 = frozenset([41, 82, 93])
    FOLLOW_LT_in_variableDeclaration1111 = frozenset([41, 82])
    FOLLOW_82_in_variableDeclaration1114 = frozenset([41, 45, 82, 84, 85, 86, 93, 99, 150, 151])
    FOLLOW_LT_in_variableDeclaration1117 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_variableDeclaration1120 = frozenset([41, 82, 93])
    FOLLOW_LT_in_variableDeclaration1126 = frozenset([41, 82, 93])
    FOLLOW_82_in_variableDeclaration1130 = frozenset([41, 93])
    FOLLOW_LT_in_variableDeclaration1132 = frozenset([41, 93])
    FOLLOW_93_in_variableDeclaration1137 = frozenset([1, 41, 77])
    FOLLOW_LT_in_variableDeclaration1140 = frozenset([41, 77])
    FOLLOW_initialiser_in_variableDeclaration1143 = frozenset([1])
    FOLLOW_identifier_in_variableDeclarationNoIn1175 = frozenset([1, 41, 77])
    FOLLOW_LT_in_variableDeclarationNoIn1178 = frozenset([41, 77])
    FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1181 = frozenset([1])
    FOLLOW_92_in_variableDeclarationNoIn1201 = frozenset([41, 45, 82, 84, 85, 86, 93, 99, 150, 151])
    FOLLOW_LT_in_variableDeclarationNoIn1203 = frozenset([41, 45, 82, 84, 85, 86, 93, 99, 150, 151])
    FOLLOW_identifier_in_variableDeclarationNoIn1206 = frozenset([41, 82, 93])
    FOLLOW_LT_in_variableDeclarationNoIn1210 = frozenset([41, 82])
    FOLLOW_82_in_variableDeclarationNoIn1213 = frozenset([41, 45, 82, 84, 85, 86, 93, 99, 150, 151])
    FOLLOW_LT_in_variableDeclarationNoIn1216 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_variableDeclarationNoIn1219 = frozenset([41, 82, 93])
    FOLLOW_LT_in_variableDeclarationNoIn1225 = frozenset([41, 82, 93])
    FOLLOW_82_in_variableDeclarationNoIn1229 = frozenset([41, 93])
    FOLLOW_LT_in_variableDeclarationNoIn1231 = frozenset([41, 93])
    FOLLOW_93_in_variableDeclarationNoIn1236 = frozenset([1, 41, 77])
    FOLLOW_LT_in_variableDeclarationNoIn1239 = frozenset([41, 77])
    FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1242 = frozenset([1])
    FOLLOW_77_in_initialiser1274 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_initialiser1276 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_initialiser1279 = frozenset([1])
    FOLLOW_77_in_initialiserNoIn1297 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_initialiserNoIn1299 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1302 = frozenset([1])
    FOLLOW_87_in_emptyStatement1320 = frozenset([1])
    FOLLOW_expression_in_expressionStatement1333 = frozenset([41, 87])
    FOLLOW_set_in_expressionStatement1335 = frozenset([1])
    FOLLOW_94_in_ifStatement1354 = frozenset([41, 81])
    FOLLOW_LT_in_ifStatement1356 = frozenset([41, 81])
    FOLLOW_81_in_ifStatement1359 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_ifStatement1361 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_ifStatement1364 = frozenset([41, 83])
    FOLLOW_LT_in_ifStatement1366 = frozenset([41, 83])
    FOLLOW_83_in_ifStatement1369 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_ifStatement1371 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_ifStatement1374 = frozenset([1, 41, 95])
    FOLLOW_LT_in_ifStatement1377 = frozenset([41, 95])
    FOLLOW_95_in_ifStatement1380 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_ifStatement1382 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_ifStatement1385 = frozenset([1])
    FOLLOW_doWhileStatement_in_iterationStatement1420 = frozenset([1])
    FOLLOW_whileStatement_in_iterationStatement1425 = frozenset([1])
    FOLLOW_forStatement_in_iterationStatement1430 = frozenset([1])
    FOLLOW_forInStatement_in_iterationStatement1435 = frozenset([1])
    FOLLOW_96_in_doWhileStatement1447 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_doWhileStatement1449 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_doWhileStatement1452 = frozenset([41, 97])
    FOLLOW_LT_in_doWhileStatement1454 = frozenset([41, 97])
    FOLLOW_97_in_doWhileStatement1457 = frozenset([41, 81])
    FOLLOW_LT_in_doWhileStatement1459 = frozenset([41, 81])
    FOLLOW_81_in_doWhileStatement1462 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_doWhileStatement1464 = frozenset([83])
    FOLLOW_83_in_doWhileStatement1466 = frozenset([41, 87])
    FOLLOW_LT_in_doWhileStatement1469 = frozenset([1])
    FOLLOW_87_in_doWhileStatement1473 = frozenset([1])
    FOLLOW_97_in_whileStatement1514 = frozenset([41, 81])
    FOLLOW_LT_in_whileStatement1516 = frozenset([41, 81])
    FOLLOW_81_in_whileStatement1519 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_whileStatement1521 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_whileStatement1524 = frozenset([41, 83])
    FOLLOW_LT_in_whileStatement1526 = frozenset([41, 83])
    FOLLOW_83_in_whileStatement1529 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_whileStatement1531 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_whileStatement1534 = frozenset([1])
    FOLLOW_98_in_forStatement1564 = frozenset([41, 81])
    FOLLOW_LT_in_forStatement1566 = frozenset([41, 81])
    FOLLOW_81_in_forStatement1569 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 89, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_forStatement1572 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 89, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_forStatementInitialiserPart_in_forStatement1575 = frozenset([41, 87])
    FOLLOW_LT_in_forStatement1579 = frozenset([41, 87])
    FOLLOW_87_in_forStatement1582 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_forStatement1585 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_forStatement1590 = frozenset([41, 87])
    FOLLOW_LT_in_forStatement1594 = frozenset([41, 87])
    FOLLOW_87_in_forStatement1597 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 83, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_forStatement1600 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_forStatement1605 = frozenset([41, 83])
    FOLLOW_LT_in_forStatement1609 = frozenset([41, 83])
    FOLLOW_83_in_forStatement1612 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_forStatement1614 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_forStatement1619 = frozenset([1])
    FOLLOW_expressionNoIn_in_forStatementInitialiserPart1675 = frozenset([1])
    FOLLOW_89_in_forStatementInitialiserPart1683 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_91_in_forStatementInitialiserPart1687 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_forStatementInitialiserPart1690 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1693 = frozenset([1])
    FOLLOW_98_in_forInStatement1718 = frozenset([41, 81, 99])
    FOLLOW_LT_in_forInStatement1720 = frozenset([41, 81, 99])
    FOLLOW_99_in_forInStatement1723 = frozenset([41, 81])
    FOLLOW_LT_in_forInStatement1726 = frozenset([41, 81])
    FOLLOW_81_in_forInStatement1729 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 89, 91, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_forInStatement1731 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 89, 91, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_forInStatementInitialiserPart_in_forInStatement1734 = frozenset([41, 100])
    FOLLOW_LT_in_forInStatement1736 = frozenset([41, 100])
    FOLLOW_100_in_forInStatement1739 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_forInStatement1741 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_forInStatement1744 = frozenset([41, 83])
    FOLLOW_LT_in_forInStatement1746 = frozenset([41, 83])
    FOLLOW_83_in_forInStatement1749 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_forInStatement1751 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_forInStatement1754 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1786 = frozenset([1])
    FOLLOW_89_in_forInStatementInitialiserPart1794 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_91_in_forInStatementInitialiserPart1798 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_forInStatementInitialiserPart1801 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1804 = frozenset([1])
    FOLLOW_101_in_continueStatement1828 = frozenset([41, 45, 84, 85, 86, 87, 99, 150, 151])
    FOLLOW_identifier_in_continueStatement1830 = frozenset([41, 87])
    FOLLOW_set_in_continueStatement1833 = frozenset([1])
    FOLLOW_102_in_breakStatement1851 = frozenset([41, 45, 84, 85, 86, 87, 99, 150, 151])
    FOLLOW_identifier_in_breakStatement1853 = frozenset([41, 87])
    FOLLOW_set_in_breakStatement1856 = frozenset([1])
    FOLLOW_88_in_returnStatement1874 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_returnStatement1876 = frozenset([41, 87])
    FOLLOW_LT_in_returnStatement1880 = frozenset([1])
    FOLLOW_87_in_returnStatement1884 = frozenset([1])
    FOLLOW_103_in_withStatement1908 = frozenset([41, 81])
    FOLLOW_LT_in_withStatement1910 = frozenset([41, 81])
    FOLLOW_81_in_withStatement1913 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_withStatement1915 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_withStatement1918 = frozenset([41, 83])
    FOLLOW_LT_in_withStatement1920 = frozenset([41, 83])
    FOLLOW_83_in_withStatement1923 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_withStatement1925 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_withStatement1928 = frozenset([1])
    FOLLOW_91_in_letStatement1953 = frozenset([41, 81])
    FOLLOW_LT_in_letStatement1955 = frozenset([41, 81])
    FOLLOW_81_in_letStatement1958 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_letStatement1960 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclarationList_in_letStatement1963 = frozenset([41, 83])
    FOLLOW_LT_in_letStatement1965 = frozenset([41, 83])
    FOLLOW_83_in_letStatement1968 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_letStatement1970 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_letStatement1973 = frozenset([1])
    FOLLOW_identifier_in_labelledStatement2006 = frozenset([41, 75])
    FOLLOW_LT_in_labelledStatement2008 = frozenset([1])
    FOLLOW_75_in_labelledStatement2012 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_labelledStatement2014 = frozenset([1])
    FOLLOW_statement_in_labelledStatement2018 = frozenset([1])
    FOLLOW_104_in_switchStatement2030 = frozenset([41, 81])
    FOLLOW_LT_in_switchStatement2032 = frozenset([41, 81])
    FOLLOW_81_in_switchStatement2035 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_switchStatement2037 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_switchStatement2040 = frozenset([41, 83])
    FOLLOW_LT_in_switchStatement2042 = frozenset([41, 83])
    FOLLOW_83_in_switchStatement2045 = frozenset([41, 78])
    FOLLOW_LT_in_switchStatement2047 = frozenset([41, 78])
    FOLLOW_caseBlock_in_switchStatement2050 = frozenset([1])
    FOLLOW_78_in_caseBlock2090 = frozenset([41, 79, 84, 105])
    FOLLOW_LT_in_caseBlock2093 = frozenset([41, 105])
    FOLLOW_caseClause_in_caseBlock2096 = frozenset([41, 79, 84, 105])
    FOLLOW_LT_in_caseBlock2101 = frozenset([41, 84])
    FOLLOW_defaultClause_in_caseBlock2104 = frozenset([41, 79, 105])
    FOLLOW_LT_in_caseBlock2107 = frozenset([41, 105])
    FOLLOW_caseClause_in_caseBlock2110 = frozenset([41, 79, 105])
    FOLLOW_LT_in_caseBlock2116 = frozenset([41, 79])
    FOLLOW_79_in_caseBlock2119 = frozenset([1])
    FOLLOW_105_in_caseClause2141 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_caseClause2143 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_caseClause2146 = frozenset([41, 75])
    FOLLOW_LT_in_caseClause2148 = frozenset([41, 75])
    FOLLOW_75_in_caseClause2151 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_caseClause2153 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statementList_in_caseClause2156 = frozenset([1])
    FOLLOW_84_in_defaultClause2187 = frozenset([41, 75])
    FOLLOW_LT_in_defaultClause2189 = frozenset([41, 75])
    FOLLOW_75_in_defaultClause2192 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_defaultClause2194 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statementList_in_defaultClause2197 = frozenset([1])
    FOLLOW_106_in_throwStatement2221 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_throwStatement2223 = frozenset([41, 87])
    FOLLOW_set_in_throwStatement2225 = frozenset([1])
    FOLLOW_107_in_tryStatement2243 = frozenset([41, 78])
    FOLLOW_LT_in_tryStatement2245 = frozenset([1])
    FOLLOW_statementBlock_in_tryStatement2249 = frozenset([41, 108, 109])
    FOLLOW_LT_in_tryStatement2251 = frozenset([1])
    FOLLOW_finallyClause_in_tryStatement2256 = frozenset([1])
    FOLLOW_catchClause_in_tryStatement2260 = frozenset([1, 41, 109])
    FOLLOW_LT_in_tryStatement2263 = frozenset([41, 109])
    FOLLOW_finallyClause_in_tryStatement2267 = frozenset([1])
    FOLLOW_108_in_catchClause2288 = frozenset([41, 81])
    FOLLOW_LT_in_catchClause2290 = frozenset([1])
    FOLLOW_81_in_catchClause2294 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_catchClause2296 = frozenset([1])
    FOLLOW_identifier_in_catchClause2300 = frozenset([41, 83])
    FOLLOW_LT_in_catchClause2302 = frozenset([1])
    FOLLOW_83_in_catchClause2306 = frozenset([41, 78])
    FOLLOW_LT_in_catchClause2308 = frozenset([1])
    FOLLOW_statementBlock_in_catchClause2312 = frozenset([1])
    FOLLOW_109_in_finallyClause2324 = frozenset([41, 78])
    FOLLOW_LT_in_finallyClause2326 = frozenset([1])
    FOLLOW_statementBlock_in_finallyClause2330 = frozenset([1])
    FOLLOW_assignmentExpression_in_expression2342 = frozenset([1, 41, 82])
    FOLLOW_LT_in_expression2345 = frozenset([41, 82])
    FOLLOW_82_in_expression2349 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_expression2352 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_expression2356 = frozenset([1, 41, 82])
    FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2370 = frozenset([1, 41, 82])
    FOLLOW_LT_in_expressionNoIn2373 = frozenset([41, 82])
    FOLLOW_82_in_expressionNoIn2377 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_expressionNoIn2380 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2384 = frozenset([1, 41, 82])
    FOLLOW_leftHandSideExpression_in_assignmentExpression2398 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_LT_in_assignmentExpression2400 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_assignmentOperator_in_assignmentExpression2403 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_assignmentExpression2405 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_assignmentExpression2408 = frozenset([1])
    FOLLOW_91_in_assignmentExpression2429 = frozenset([41, 81])
    FOLLOW_LT_in_assignmentExpression2431 = frozenset([41, 81])
    FOLLOW_81_in_assignmentExpression2434 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_assignmentExpression2436 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclarationList_in_assignmentExpression2439 = frozenset([41, 83])
    FOLLOW_LT_in_assignmentExpression2441 = frozenset([41, 83])
    FOLLOW_83_in_assignmentExpression2444 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_assignmentExpression2446 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_assignmentExpression2449 = frozenset([1])
    FOLLOW_conditionalExpression_in_assignmentExpression2476 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2488 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_LT_in_assignmentExpressionNoIn2490 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2493 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_assignmentExpressionNoIn2495 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2498 = frozenset([1])
    FOLLOW_91_in_assignmentExpressionNoIn2519 = frozenset([41, 81])
    FOLLOW_LT_in_assignmentExpressionNoIn2521 = frozenset([41, 81])
    FOLLOW_81_in_assignmentExpressionNoIn2524 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_LT_in_assignmentExpressionNoIn2526 = frozenset([41, 45, 84, 85, 86, 92, 99, 150, 151])
    FOLLOW_variableDeclarationList_in_assignmentExpressionNoIn2529 = frozenset([41, 83])
    FOLLOW_LT_in_assignmentExpressionNoIn2531 = frozenset([41, 83])
    FOLLOW_83_in_assignmentExpressionNoIn2534 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_assignmentExpressionNoIn2536 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2539 = frozenset([1])
    FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2566 = frozenset([1])
    FOLLOW_callExpression_in_leftHandSideExpression2578 = frozenset([1])
    FOLLOW_newExpression_in_leftHandSideExpression2583 = frozenset([1])
    FOLLOW_memberExpression_in_newExpression2595 = frozenset([1])
    FOLLOW_110_in_newExpression2600 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_newExpression2602 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_newExpression_in_newExpression2605 = frozenset([1])
    FOLLOW_primaryExpression_in_memberExpression2627 = frozenset([1, 41, 75, 92, 111])
    FOLLOW_LT_in_memberExpression2630 = frozenset([41, 75, 92, 111])
    FOLLOW_memberExpressionSuffix_in_memberExpression2633 = frozenset([1, 41, 75, 92, 111])
    FOLLOW_functionExpression_in_memberExpression2653 = frozenset([1, 41, 75, 92, 111])
    FOLLOW_LT_in_memberExpression2656 = frozenset([41, 75, 92, 111])
    FOLLOW_memberExpressionSuffix_in_memberExpression2660 = frozenset([1, 41, 75, 92, 111])
    FOLLOW_110_in_memberExpression2667 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_memberExpression2669 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_memberExpression_in_memberExpression2672 = frozenset([41, 81])
    FOLLOW_LT_in_memberExpression2674 = frozenset([41, 81])
    FOLLOW_arguments_in_memberExpression2677 = frozenset([1, 41, 75, 92, 111])
    FOLLOW_LT_in_memberExpression2680 = frozenset([41, 75, 92, 111])
    FOLLOW_memberExpressionSuffix_in_memberExpression2683 = frozenset([1, 41, 75, 92, 111])
    FOLLOW_indexSuffix_in_memberExpressionSuffix2720 = frozenset([1])
    FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2725 = frozenset([1])
    FOLLOW_descendentSuffix_in_memberExpressionSuffix2730 = frozenset([1])
    FOLLOW_namespaceSuffix_in_memberExpressionSuffix2736 = frozenset([1])
    FOLLOW_memberExpression_in_callExpression2751 = frozenset([41, 81, 111])
    FOLLOW_LT_in_callExpression2753 = frozenset([41, 81, 111])
    FOLLOW_111_in_callExpression2756 = frozenset([41, 81])
    FOLLOW_LT_in_callExpression2759 = frozenset([41, 81])
    FOLLOW_arguments_in_callExpression2762 = frozenset([1, 41, 75, 81, 92, 111])
    FOLLOW_LT_in_callExpression2765 = frozenset([41, 75, 81, 92, 111])
    FOLLOW_callExpressionSuffix_in_callExpression2768 = frozenset([1, 41, 75, 81, 92, 111])
    FOLLOW_arguments_in_callExpressionSuffix2797 = frozenset([1])
    FOLLOW_indexSuffix_in_callExpressionSuffix2802 = frozenset([1])
    FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2807 = frozenset([1])
    FOLLOW_descendentSuffix_in_callExpressionSuffix2812 = frozenset([1])
    FOLLOW_namespaceSuffix_in_callExpressionSuffix2818 = frozenset([1])
    FOLLOW_81_in_arguments2833 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 83, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_arguments2836 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_arguments2839 = frozenset([41, 82, 83])
    FOLLOW_LT_in_arguments2841 = frozenset([41, 82, 83])
    FOLLOW_82_in_arguments2845 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_arguments2847 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_arguments2850 = frozenset([41, 82, 83])
    FOLLOW_LT_in_arguments2852 = frozenset([41, 82, 83])
    FOLLOW_LT_in_arguments2859 = frozenset([41, 83])
    FOLLOW_83_in_arguments2862 = frozenset([1])
    FOLLOW_92_in_indexSuffix2885 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_indexSuffix2887 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_indexSuffix2890 = frozenset([41, 93])
    FOLLOW_LT_in_indexSuffix2892 = frozenset([41, 93])
    FOLLOW_93_in_indexSuffix2895 = frozenset([1])
    FOLLOW_111_in_propertyReferenceSuffix2918 = frozenset([41, 45, 84, 85, 86, 99, 112, 150, 151])
    FOLLOW_LT_in_propertyReferenceSuffix2920 = frozenset([41, 45, 84, 85, 86, 99, 112, 150, 151])
    FOLLOW_e4xIdentifier_in_propertyReferenceSuffix2923 = frozenset([1])
    FOLLOW_111_in_descendentSuffix2944 = frozenset([111])
    FOLLOW_111_in_descendentSuffix2946 = frozenset([41, 45, 84, 85, 86, 99, 112, 150, 151])
    FOLLOW_LT_in_descendentSuffix2948 = frozenset([41, 45, 84, 85, 86, 99, 112, 150, 151])
    FOLLOW_e4xIdentifier_in_descendentSuffix2951 = frozenset([1])
    FOLLOW_75_in_namespaceSuffix2972 = frozenset([75])
    FOLLOW_75_in_namespaceSuffix2974 = frozenset([1, 41, 45, 84, 85, 86, 99, 112, 150, 151])
    FOLLOW_LT_in_namespaceSuffix2976 = frozenset([1, 41, 45, 84, 85, 86, 99, 112, 150, 151])
    FOLLOW_e4xIdentifier_in_namespaceSuffix2979 = frozenset([1])
    FOLLOW_identifier_in_e4xIdentifier3002 = frozenset([1])
    FOLLOW_112_in_e4xIdentifier3007 = frozenset([1])
    FOLLOW_set_in_assignmentOperator0 = frozenset([1])
    FOLLOW_logicalORExpression_in_conditionalExpression3074 = frozenset([1, 41, 124])
    FOLLOW_LT_in_conditionalExpression3077 = frozenset([41, 124])
    FOLLOW_124_in_conditionalExpression3081 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_conditionalExpression3083 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_conditionalExpression3087 = frozenset([41, 75])
    FOLLOW_LT_in_conditionalExpression3089 = frozenset([41, 75])
    FOLLOW_75_in_conditionalExpression3093 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_conditionalExpression3095 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_conditionalExpression3099 = frozenset([1])
    FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3112 = frozenset([1, 41, 124])
    FOLLOW_LT_in_conditionalExpressionNoIn3115 = frozenset([41, 124])
    FOLLOW_124_in_conditionalExpressionNoIn3119 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_conditionalExpressionNoIn3121 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3125 = frozenset([41, 75])
    FOLLOW_LT_in_conditionalExpressionNoIn3127 = frozenset([41, 75])
    FOLLOW_75_in_conditionalExpressionNoIn3131 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_conditionalExpressionNoIn3133 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3137 = frozenset([1])
    FOLLOW_logicalANDExpression_in_logicalORExpression3150 = frozenset([1, 41, 125])
    FOLLOW_LT_in_logicalORExpression3153 = frozenset([41, 125])
    FOLLOW_125_in_logicalORExpression3157 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_logicalORExpression3159 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_logicalANDExpression_in_logicalORExpression3163 = frozenset([1, 41, 125])
    FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3177 = frozenset([1, 41, 125])
    FOLLOW_LT_in_logicalORExpressionNoIn3180 = frozenset([41, 125])
    FOLLOW_125_in_logicalORExpressionNoIn3184 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_logicalORExpressionNoIn3186 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3190 = frozenset([1, 41, 125])
    FOLLOW_bitwiseORExpression_in_logicalANDExpression3204 = frozenset([1, 41, 126])
    FOLLOW_LT_in_logicalANDExpression3207 = frozenset([41, 126])
    FOLLOW_126_in_logicalANDExpression3211 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_logicalANDExpression3213 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseORExpression_in_logicalANDExpression3217 = frozenset([1, 41, 126])
    FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3231 = frozenset([1, 41, 126])
    FOLLOW_LT_in_logicalANDExpressionNoIn3234 = frozenset([41, 126])
    FOLLOW_126_in_logicalANDExpressionNoIn3238 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_logicalANDExpressionNoIn3240 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3244 = frozenset([1, 41, 126])
    FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3258 = frozenset([1, 41, 127])
    FOLLOW_LT_in_bitwiseORExpression3261 = frozenset([41, 127])
    FOLLOW_127_in_bitwiseORExpression3265 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_bitwiseORExpression3267 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3271 = frozenset([1, 41, 127])
    FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3285 = frozenset([1, 41, 127])
    FOLLOW_LT_in_bitwiseORExpressionNoIn3288 = frozenset([41, 127])
    FOLLOW_127_in_bitwiseORExpressionNoIn3292 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_bitwiseORExpressionNoIn3294 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3298 = frozenset([1, 41, 127])
    FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3312 = frozenset([1, 41, 128])
    FOLLOW_LT_in_bitwiseXORExpression3315 = frozenset([41, 128])
    FOLLOW_128_in_bitwiseXORExpression3319 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_bitwiseXORExpression3321 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3325 = frozenset([1, 41, 128])
    FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3339 = frozenset([1, 41, 128])
    FOLLOW_LT_in_bitwiseXORExpressionNoIn3342 = frozenset([41, 128])
    FOLLOW_128_in_bitwiseXORExpressionNoIn3346 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_bitwiseXORExpressionNoIn3348 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3352 = frozenset([1, 41, 128])
    FOLLOW_equalityExpression_in_bitwiseANDExpression3366 = frozenset([1, 41, 129])
    FOLLOW_LT_in_bitwiseANDExpression3369 = frozenset([41, 129])
    FOLLOW_129_in_bitwiseANDExpression3373 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_bitwiseANDExpression3375 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_equalityExpression_in_bitwiseANDExpression3379 = frozenset([1, 41, 129])
    FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3393 = frozenset([1, 41, 129])
    FOLLOW_LT_in_bitwiseANDExpressionNoIn3396 = frozenset([41, 129])
    FOLLOW_129_in_bitwiseANDExpressionNoIn3400 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_bitwiseANDExpressionNoIn3402 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3406 = frozenset([1, 41, 129])
    FOLLOW_relationalExpression_in_equalityExpression3420 = frozenset([1, 41, 130, 131, 132, 133])
    FOLLOW_LT_in_equalityExpression3423 = frozenset([41, 130, 131, 132, 133])
    FOLLOW_set_in_equalityExpression3427 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_equalityExpression3443 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_relationalExpression_in_equalityExpression3447 = frozenset([1, 41, 130, 131, 132, 133])
    FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3460 = frozenset([1, 41, 130, 131, 132, 133])
    FOLLOW_LT_in_equalityExpressionNoIn3463 = frozenset([41, 130, 131, 132, 133])
    FOLLOW_set_in_equalityExpressionNoIn3467 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_equalityExpressionNoIn3483 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3487 = frozenset([1, 41, 130, 131, 132, 133])
    FOLLOW_shiftExpression_in_relationalExpression3501 = frozenset([1, 41, 72, 73, 100, 134, 135, 136])
    FOLLOW_LT_in_relationalExpression3504 = frozenset([41, 72, 73, 100, 134, 135, 136])
    FOLLOW_set_in_relationalExpression3508 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_relationalExpression3532 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_shiftExpression_in_relationalExpression3536 = frozenset([1, 41, 72, 73, 100, 134, 135, 136])
    FOLLOW_shiftExpression_in_relationalExpressionNoIn3549 = frozenset([1, 41, 72, 73, 134, 135, 136])
    FOLLOW_LT_in_relationalExpressionNoIn3552 = frozenset([41, 72, 73, 134, 135, 136])
    FOLLOW_set_in_relationalExpressionNoIn3556 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_relationalExpressionNoIn3576 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_shiftExpression_in_relationalExpressionNoIn3580 = frozenset([1, 41, 72, 73, 134, 135, 136])
    FOLLOW_additiveExpression_in_shiftExpression3593 = frozenset([1, 41, 137, 138, 139])
    FOLLOW_LT_in_shiftExpression3596 = frozenset([41, 137, 138, 139])
    FOLLOW_set_in_shiftExpression3600 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_shiftExpression3612 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_additiveExpression_in_shiftExpression3616 = frozenset([1, 41, 137, 138, 139])
    FOLLOW_multiplicativeExpression_in_additiveExpression3629 = frozenset([1, 41, 76, 140])
    FOLLOW_LT_in_additiveExpression3632 = frozenset([41, 76, 140])
    FOLLOW_set_in_additiveExpression3636 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_additiveExpression3644 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_multiplicativeExpression_in_additiveExpression3648 = frozenset([1, 41, 76, 140])
    FOLLOW_unaryExpression_in_multiplicativeExpression3661 = frozenset([1, 41, 74, 112, 141])
    FOLLOW_LT_in_multiplicativeExpression3664 = frozenset([41, 74, 112, 141])
    FOLLOW_set_in_multiplicativeExpression3668 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_multiplicativeExpression3680 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_unaryExpression_in_multiplicativeExpression3684 = frozenset([1, 41, 74, 112, 141])
    FOLLOW_postfixExpression_in_unaryExpression3697 = frozenset([1])
    FOLLOW_set_in_unaryExpression3702 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_unaryExpression_in_unaryExpression3738 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_postfixExpression3750 = frozenset([1, 145, 146])
    FOLLOW_set_in_postfixExpression3752 = frozenset([1])
    FOLLOW_149_in_primaryExpression3770 = frozenset([1])
    FOLLOW_xmlLiteral_in_primaryExpression3787 = frozenset([1])
    FOLLOW_identifier_in_primaryExpression3792 = frozenset([1])
    FOLLOW_literal_in_primaryExpression3807 = frozenset([1])
    FOLLOW_arrayLiteral_in_primaryExpression3812 = frozenset([1])
    FOLLOW_objectLiteral_in_primaryExpression3817 = frozenset([1])
    FOLLOW_81_in_primaryExpression3822 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_primaryExpression3824 = frozenset([1])
    FOLLOW_expression_in_primaryExpression3828 = frozenset([41, 83])
    FOLLOW_LT_in_primaryExpression3830 = frozenset([1])
    FOLLOW_83_in_primaryExpression3834 = frozenset([1])
    FOLLOW_92_in_arrayLiteral3847 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 91, 92, 93, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_arrayLiteral3849 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 91, 92, 93, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_arrayLiteral3852 = frozenset([41, 82, 93])
    FOLLOW_LT_in_arrayLiteral3856 = frozenset([41, 82])
    FOLLOW_82_in_arrayLiteral3859 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 91, 92, 93, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_arrayLiteral3862 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_arrayLiteral3865 = frozenset([41, 82, 93])
    FOLLOW_LT_in_arrayLiteral3871 = frozenset([41, 82, 93])
    FOLLOW_82_in_arrayLiteral3875 = frozenset([41, 93])
    FOLLOW_LT_in_arrayLiteral3877 = frozenset([41, 93])
    FOLLOW_93_in_arrayLiteral3882 = frozenset([1])
    FOLLOW_92_in_arrayLiteral3898 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_arrayLiteral3900 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_arrayLiteral3905 = frozenset([41, 98])
    FOLLOW_LT_in_arrayLiteral3907 = frozenset([41, 98])
    FOLLOW_98_in_arrayLiteral3910 = frozenset([41, 81, 99])
    FOLLOW_LT_in_arrayLiteral3912 = frozenset([41, 81, 99])
    FOLLOW_99_in_arrayLiteral3915 = frozenset([41, 81])
    FOLLOW_LT_in_arrayLiteral3918 = frozenset([41, 81])
    FOLLOW_81_in_arrayLiteral3921 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 89, 91, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_arrayLiteral3923 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 78, 80, 81, 84, 85, 86, 89, 91, 92, 99, 110, 149, 150, 151, 152, 153, 154])
    FOLLOW_forInStatementInitialiserPart_in_arrayLiteral3928 = frozenset([41, 100])
    FOLLOW_LT_in_arrayLiteral3930 = frozenset([41, 100])
    FOLLOW_100_in_arrayLiteral3933 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_arrayLiteral3935 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_expression_in_arrayLiteral3940 = frozenset([41, 83])
    FOLLOW_LT_in_arrayLiteral3942 = frozenset([41, 83])
    FOLLOW_83_in_arrayLiteral3945 = frozenset([41, 93])
    FOLLOW_LT_in_arrayLiteral3947 = frozenset([41, 93])
    FOLLOW_93_in_arrayLiteral3950 = frozenset([1])
    FOLLOW_78_in_objectLiteral3986 = frozenset([41, 42, 44, 45, 79, 82, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_objectLiteral3988 = frozenset([41, 42, 44, 45, 79, 82, 84, 85, 86, 99, 150, 151])
    FOLLOW_propertyNameAndValue_in_objectLiteral3991 = frozenset([41, 79, 82])
    FOLLOW_LT_in_objectLiteral3995 = frozenset([41, 82])
    FOLLOW_82_in_objectLiteral3998 = frozenset([41, 42, 44, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_objectLiteral4000 = frozenset([41, 42, 44, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_propertyNameAndValue_in_objectLiteral4003 = frozenset([41, 79, 82])
    FOLLOW_LT_in_objectLiteral4007 = frozenset([41, 79, 82])
    FOLLOW_82_in_objectLiteral4011 = frozenset([41, 79])
    FOLLOW_LT_in_objectLiteral4013 = frozenset([41, 79])
    FOLLOW_79_in_objectLiteral4018 = frozenset([1])
    FOLLOW_propertyName_in_propertyNameAndValue4042 = frozenset([41, 75])
    FOLLOW_LT_in_propertyNameAndValue4044 = frozenset([41, 75])
    FOLLOW_75_in_propertyNameAndValue4047 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_propertyNameAndValue4049 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_propertyNameAndValue4052 = frozenset([1])
    FOLLOW_150_in_propertyNameAndValue4074 = frozenset([45, 84, 85, 86, 99, 150, 151])
    FOLLOW_151_in_propertyNameAndValue4078 = frozenset([45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_propertyNameAndValue4083 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_propertyNameAndValue4085 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_propertyNameAndValue4090 = frozenset([41, 81])
    FOLLOW_LT_in_propertyNameAndValue4092 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_propertyNameAndValue4095 = frozenset([41, 78])
    FOLLOW_LT_in_propertyNameAndValue4097 = frozenset([41, 78])
    FOLLOW_statementBlock_in_propertyNameAndValue4100 = frozenset([1])
    FOLLOW_150_in_propertyNameAndValue4133 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_151_in_propertyNameAndValue4137 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_propertyNameAndValue4140 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_propertyNameAndValue4145 = frozenset([41, 81])
    FOLLOW_LT_in_propertyNameAndValue4147 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_propertyNameAndValue4150 = frozenset([41, 78])
    FOLLOW_LT_in_propertyNameAndValue4152 = frozenset([41, 78])
    FOLLOW_statementBlock_in_propertyNameAndValue4155 = frozenset([1])
    FOLLOW_identifier_in_propertyName4190 = frozenset([1])
    FOLLOW_StringLiteral_in_propertyName4195 = frozenset([1])
    FOLLOW_NumericLiteral_in_propertyName4200 = frozenset([1])
    FOLLOW_152_in_literal4212 = frozenset([1])
    FOLLOW_153_in_literal4221 = frozenset([1])
    FOLLOW_154_in_literal4230 = frozenset([1])
    FOLLOW_StringLiteral_in_literal4239 = frozenset([1])
    FOLLOW_NumericLiteral_in_literal4252 = frozenset([1])
    FOLLOW_regularExpressionLiteral_in_literal4265 = frozenset([1])
    FOLLOW_set_in_reFirstChar0 = frozenset([1])
    FOLLOW_reFirstChar_in_reChars4666 = frozenset([1])
    FOLLOW_112_in_reChars4671 = frozenset([1])
    FOLLOW_74_in_regularExpressionLiteral4685 = frozenset([42, 44, 45, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155])
    FOLLOW_reFirstChar_in_regularExpressionLiteral4687 = frozenset([42, 44, 45, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155])
    FOLLOW_reChars_in_regularExpressionLiteral4690 = frozenset([42, 44, 45, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155])
    FOLLOW_74_in_regularExpressionLiteral4693 = frozenset([1, 45])
    FOLLOW_Identifier_in_regularExpressionLiteral4695 = frozenset([1])
    FOLLOW_RegularExpressionHacks_in_regularExpressionLiteral4701 = frozenset([1, 45])
    FOLLOW_Identifier_in_regularExpressionLiteral4703 = frozenset([1])
    FOLLOW_set_in_identifier0 = frozenset([1])
    FOLLOW_LT_in_synpred1196 = frozenset([1])
    FOLLOW_LT_in_synpred3233 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_78_in_synpred15449 = frozenset([1])
    FOLLOW_xmlEmptyTag_in_synpred17499 = frozenset([1])
    FOLLOW_xmlStartTag_in_synpred18504 = frozenset([1])
    FOLLOW_LT_in_synpred21527 = frozenset([41, 43, 72, 78])
    FOLLOW_xmlPayload_in_synpred21530 = frozenset([1])
    FOLLOW_80_in_synpred25545 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_synpred25547 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_synpred25550 = frozenset([41, 81])
    FOLLOW_LT_in_synpred25552 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_synpred25555 = frozenset([41, 78])
    FOLLOW_LT_in_synpred25557 = frozenset([41, 78])
    FOLLOW_statementBlock_in_synpred25560 = frozenset([1])
    FOLLOW_80_in_synpred28587 = frozenset([41, 81])
    FOLLOW_LT_in_synpred28589 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_synpred28592 = frozenset([41, 78])
    FOLLOW_LT_in_synpred28594 = frozenset([41, 78])
    FOLLOW_statementBlock_in_synpred28597 = frozenset([1])
    FOLLOW_LT_in_synpred31635 = frozenset([1])
    FOLLOW_80_in_synpred32623 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_synpred32625 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_synpred32628 = frozenset([41, 81])
    FOLLOW_LT_in_synpred32630 = frozenset([41, 81])
    FOLLOW_formalParameterList_in_synpred32633 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred32635 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_synpred32638 = frozenset([1])
    FOLLOW_LT_in_synpred34672 = frozenset([1])
    FOLLOW_statementBlock_in_synpred41757 = frozenset([1])
    FOLLOW_variableStatement_in_synpred42762 = frozenset([1])
    FOLLOW_expressionStatement_in_synpred44772 = frozenset([1])
    FOLLOW_letStatement_in_synpred51807 = frozenset([1])
    FOLLOW_labelledStatement_in_synpred52812 = frozenset([1])
    FOLLOW_LT_in_synpred59888 = frozenset([1])
    FOLLOW_78_in_synpred62886 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred62888 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statementList_in_synpred62891 = frozenset([41, 79])
    FOLLOW_LT_in_synpred62894 = frozenset([41, 79])
    FOLLOW_79_in_synpred62897 = frozenset([1])
    FOLLOW_LT_in_synpred64954 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred65954 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_synpred65958 = frozenset([1])
    FOLLOW_LT_in_synpred791104 = frozenset([1])
    FOLLOW_LT_in_synpred841111 = frozenset([41, 82])
    FOLLOW_82_in_synpred841114 = frozenset([1, 41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_synpred841117 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_synpred841120 = frozenset([1])
    FOLLOW_LT_in_synpred931203 = frozenset([1])
    FOLLOW_LT_in_synpred981210 = frozenset([41, 82])
    FOLLOW_82_in_synpred981213 = frozenset([1, 41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_LT_in_synpred981216 = frozenset([41, 45, 84, 85, 86, 99, 150, 151])
    FOLLOW_identifier_in_synpred981219 = frozenset([1])
    FOLLOW_LT_in_synpred1041276 = frozenset([1])
    FOLLOW_LT_in_synpred1051299 = frozenset([1])
    FOLLOW_LT_in_synpred1081361 = frozenset([1])
    FOLLOW_LT_in_synpred1101371 = frozenset([1])
    FOLLOW_LT_in_synpred1121382 = frozenset([1])
    FOLLOW_LT_in_synpred1131377 = frozenset([41, 95])
    FOLLOW_95_in_synpred1131380 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred1131382 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_statement_in_synpred1131385 = frozenset([1])
    FOLLOW_forStatement_in_synpred1161430 = frozenset([1])
    FOLLOW_LT_in_synpred1171449 = frozenset([1])
    FOLLOW_LT_in_synpred1221521 = frozenset([1])
    FOLLOW_LT_in_synpred1241531 = frozenset([1])
    FOLLOW_LT_in_synpred1261572 = frozenset([1])
    FOLLOW_LT_in_synpred1291585 = frozenset([1])
    FOLLOW_LT_in_synpred1321600 = frozenset([1])
    FOLLOW_LT_in_synpred1351614 = frozenset([1])
    FOLLOW_LT_in_synpred1391720 = frozenset([1])
    FOLLOW_LT_in_synpred1421731 = frozenset([1])
    FOLLOW_LT_in_synpred1441741 = frozenset([1])
    FOLLOW_LT_in_synpred1461751 = frozenset([1])
    FOLLOW_expression_in_synpred1541876 = frozenset([1])
    FOLLOW_LT_in_synpred1571915 = frozenset([1])
    FOLLOW_LT_in_synpred1591925 = frozenset([1])
    FOLLOW_LT_in_synpred1631970 = frozenset([1])
    FOLLOW_LT_in_synpred1652014 = frozenset([1])
    FOLLOW_LT_in_synpred1672037 = frozenset([1])
    FOLLOW_LT_in_synpred1772143 = frozenset([1])
    FOLLOW_LT_in_synpred1792153 = frozenset([1])
    FOLLOW_statementList_in_synpred1802156 = frozenset([1])
    FOLLOW_LT_in_synpred1822194 = frozenset([1])
    FOLLOW_LT_in_synpred1962352 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred1992380 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2022405 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_synpred2032398 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_LT_in_synpred2032400 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_assignmentOperator_in_synpred2032403 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2032405 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_synpred2032408 = frozenset([1])
    FOLLOW_LT_in_synpred2072446 = frozenset([1])
    FOLLOW_LT_in_synpred2102495 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_synpred2112488 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_LT_in_synpred2112490 = frozenset([41, 77, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123])
    FOLLOW_assignmentOperator_in_synpred2112493 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2112495 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpressionNoIn_in_synpred2112498 = frozenset([1])
    FOLLOW_LT_in_synpred2152536 = frozenset([1])
    FOLLOW_callExpression_in_synpred2172578 = frozenset([1])
    FOLLOW_memberExpression_in_synpred2182595 = frozenset([1])
    FOLLOW_LT_in_synpred2192602 = frozenset([1])
    FOLLOW_LT_in_synpred2212630 = frozenset([41, 75, 92, 111])
    FOLLOW_memberExpressionSuffix_in_synpred2212633 = frozenset([1])
    FOLLOW_LT_in_synpred2242656 = frozenset([41, 75, 92, 111])
    FOLLOW_memberExpressionSuffix_in_synpred2242660 = frozenset([1])
    FOLLOW_LT_in_synpred2262669 = frozenset([1])
    FOLLOW_LT_in_synpred2292680 = frozenset([41, 75, 92, 111])
    FOLLOW_memberExpressionSuffix_in_synpred2292683 = frozenset([1])
    FOLLOW_LT_in_synpred2332753 = frozenset([1])
    FOLLOW_LT_in_synpred2372765 = frozenset([41, 75, 81, 92, 111])
    FOLLOW_callExpressionSuffix_in_synpred2372768 = frozenset([1])
    FOLLOW_LT_in_synpred2422836 = frozenset([1])
    FOLLOW_LT_in_synpred2432841 = frozenset([1])
    FOLLOW_LT_in_synpred2442847 = frozenset([1])
    FOLLOW_LT_in_synpred2452852 = frozenset([1])
    FOLLOW_LT_in_synpred2492887 = frozenset([1])
    FOLLOW_LT_in_synpred2532976 = frozenset([1])
    FOLLOW_e4xIdentifier_in_synpred2542979 = frozenset([1])
    FOLLOW_LT_in_synpred2683083 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2703095 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2713077 = frozenset([41, 124])
    FOLLOW_124_in_synpred2713081 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2713083 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_synpred2713087 = frozenset([41, 75])
    FOLLOW_LT_in_synpred2713089 = frozenset([41, 75])
    FOLLOW_75_in_synpred2713093 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2713095 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_synpred2713099 = frozenset([1])
    FOLLOW_LT_in_synpred2733121 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2753133 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2783159 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2793153 = frozenset([41, 125])
    FOLLOW_125_in_synpred2793157 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2793159 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_logicalANDExpression_in_synpred2793163 = frozenset([1])
    FOLLOW_LT_in_synpred2813186 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2843213 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2853207 = frozenset([41, 126])
    FOLLOW_126_in_synpred2853211 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2853213 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseORExpression_in_synpred2853217 = frozenset([1])
    FOLLOW_LT_in_synpred2873240 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2903267 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2913261 = frozenset([41, 127])
    FOLLOW_127_in_synpred2913265 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2913267 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseXORExpression_in_synpred2913271 = frozenset([1])
    FOLLOW_LT_in_synpred2933294 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2963321 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2973315 = frozenset([41, 128])
    FOLLOW_128_in_synpred2973319 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred2973321 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_bitwiseANDExpression_in_synpred2973325 = frozenset([1])
    FOLLOW_LT_in_synpred2993348 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3023375 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3033369 = frozenset([41, 129])
    FOLLOW_129_in_synpred3033373 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3033375 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_equalityExpression_in_synpred3033379 = frozenset([1])
    FOLLOW_LT_in_synpred3053402 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3113443 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3123423 = frozenset([41, 130, 131, 132, 133])
    FOLLOW_set_in_synpred3123427 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3123443 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_relationalExpression_in_synpred3123447 = frozenset([1])
    FOLLOW_LT_in_synpred3173483 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3253532 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3263504 = frozenset([41, 72, 73, 100, 134, 135, 136])
    FOLLOW_set_in_synpred3263508 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3263532 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_shiftExpression_in_synpred3263536 = frozenset([1])
    FOLLOW_LT_in_synpred3323576 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3373612 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3383596 = frozenset([41, 137, 138, 139])
    FOLLOW_set_in_synpred3383600 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3383612 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_additiveExpression_in_synpred3383616 = frozenset([1])
    FOLLOW_LT_in_synpred3413644 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3423632 = frozenset([41, 76, 140])
    FOLLOW_set_in_synpred3423636 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3423644 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_multiplicativeExpression_in_synpred3423648 = frozenset([1])
    FOLLOW_LT_in_synpred3463680 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3473664 = frozenset([41, 74, 112, 141])
    FOLLOW_set_in_synpred3473668 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3473680 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_unaryExpression_in_synpred3473684 = frozenset([1])
    FOLLOW_LT_in_synpred3623776 = frozenset([41, 43, 72])
    FOLLOW_set_in_synpred3623779 = frozenset([1])
    FOLLOW_objectLiteral_in_synpred3663817 = frozenset([1])
    FOLLOW_LT_in_synpred3673824 = frozenset([1])
    FOLLOW_LT_in_synpred3693849 = frozenset([1])
    FOLLOW_LT_in_synpred3723862 = frozenset([1])
    FOLLOW_LT_in_synpred3743856 = frozenset([41, 82])
    FOLLOW_82_in_synpred3743859 = frozenset([1, 41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3743862 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_synpred3743865 = frozenset([1])
    FOLLOW_92_in_synpred3783847 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 91, 92, 93, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3783849 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 91, 92, 93, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_synpred3783852 = frozenset([41, 82, 93])
    FOLLOW_LT_in_synpred3783856 = frozenset([41, 82])
    FOLLOW_82_in_synpred3783859 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 91, 92, 93, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_LT_in_synpred3783862 = frozenset([41, 42, 43, 44, 45, 46, 72, 74, 76, 78, 80, 81, 84, 85, 86, 91, 92, 99, 110, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154])
    FOLLOW_assignmentExpression_in_synpred3783865 = frozenset([41, 82, 93])
    FOLLOW_LT_in_synpred3783871 = frozenset([41, 82, 93])
    FOLLOW_82_in_synpred3783875 = frozenset([41, 93])
    FOLLOW_LT_in_synpred3783877 = frozenset([41, 93])
    FOLLOW_93_in_synpred3783882 = frozenset([1])
    FOLLOW_LT_in_synpred3793900 = frozenset([1])
    FOLLOW_LT_in_synpred3813912 = frozenset([1])
    FOLLOW_LT_in_synpred3843923 = frozenset([1])
    FOLLOW_LT_in_synpred3863935 = frozenset([1])
    FOLLOW_LT_in_synpred3893988 = frozenset([1])
    FOLLOW_LT_in_synpred3984049 = frozenset([1])
    FOLLOW_reFirstChar_in_synpred4974687 = frozenset([1])

