# $ANTLR 3.0.1 /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g 2008-05-01 18:31:24

from antlr3 import *
from antlr3.compat import set, frozenset

from antlr3.tree import *



# for convenience in actions
HIDDEN = BaseRecognizer.HIDDEN

# token types
LT=43
HexEscapeSequence=55
NEW=23
LineComment=72
REGEX=31
DecimalDigit=60
EOF=-1
PROP=29
HexDigit=61
RegularExpressionHacks=48
Identifier=47
SingleStringCharacter=53
CODE=13
XMLComment=45
IN=21
SCOPE=33
Comment=71
OBJ=28
SingleEscapeCharacter=57
RETURN=32
PROPREF=30
UnicodeLetter=67
ExponentPart=64
ARGS=5
EscapeCharacter=59
WhiteSpace=73
VARDEF=38
VARDEFS=39
IdentifierPart=66
ARRAY=6
INDEXREF=22
WITH=42
UnicodeCombiningMark=70
UnicodeDigit=68
NumericLiteral=46
RegularExpressionChars=49
UnicodeEscapeSequence=56
NULL=25
GENEXP=19
CONDLOOP=12
NUMBER=26
IdentifierStart=65
DoubleStringCharacter=52
VEXPR=41
DecimalLiteral=62
FUNCARGS=18
DESCREF=15
NSREF=27
TRUE=37
StringLiteral=44
RegularExpressionFirstChar=51
ARRAYCOMP=7
TESTVAL=36
HexIntegerLiteral=63
FUNC=17
NONE=24
NonEscapeCharacter=58
ASSIGN=8
VARREF=40
TEST=35
CALL=9
CharacterEscapeSequence=54
DEFAULTNS=14
CATCH=10
GLOBAL=20
FALSE=16
COND=11
EscapeSequence=50
UnicodeConnectorPunctuation=69
ANONYMOUS=4
STRING=34

# token names
tokenNames = [
    "<invalid>", "<EOR>", "<DOWN>", "<UP>", 
    "ANONYMOUS", "ARGS", "ARRAY", "ARRAYCOMP", "ASSIGN", "CALL", "CATCH", 
    "COND", "CONDLOOP", "CODE", "DEFAULTNS", "DESCREF", "FALSE", "FUNC", 
    "FUNCARGS", "GENEXP", "GLOBAL", "IN", "INDEXREF", "NEW", "NONE", "NULL", 
    "NUMBER", "NSREF", "OBJ", "PROP", "PROPREF", "REGEX", "RETURN", "SCOPE", 
    "STRING", "TEST", "TESTVAL", "TRUE", "VARDEF", "VARDEFS", "VARREF", 
    "VEXPR", "WITH", "LT", "StringLiteral", "XMLComment", "NumericLiteral", 
    "Identifier", "RegularExpressionHacks", "RegularExpressionChars", "EscapeSequence", 
    "RegularExpressionFirstChar", "DoubleStringCharacter", "SingleStringCharacter", 
    "CharacterEscapeSequence", "HexEscapeSequence", "UnicodeEscapeSequence", 
    "SingleEscapeCharacter", "NonEscapeCharacter", "EscapeCharacter", "DecimalDigit", 
    "HexDigit", "DecimalLiteral", "HexIntegerLiteral", "ExponentPart", "IdentifierStart", 
    "IdentifierPart", "UnicodeLetter", "UnicodeDigit", "UnicodeConnectorPunctuation", 
    "UnicodeCombiningMark", "Comment", "LineComment", "WhiteSpace", "';'", 
    "'<'", "'>'", "'/'", "':'", "'-'", "'='", "'{'", "'}'", "'function'", 
    "'('", "','", "')'", "'default'", "'xml'", "'namespace'", "'return'", 
    "'var'", "'const'", "'let'", "'['", "']'", "'if'", "'else'", "'do'", 
    "'while'", "'for'", "'each'", "'in'", "'continue'", "'break'", "'with'", 
    "'switch'", "'case'", "'throw'", "'try'", "'yield'", "'catch'", "'finally'", 
    "'new'", "'.'", "'*'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
    "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'?'", "'||'", "'&&'", "'|'", 
    "'^'", "'&'", "'=='", "'!='", "'==='", "'!=='", "'<='", "'>='", "'instanceof'", 
    "'<<'", "'>>'", "'>>>'", "'+'", "'%'", "'delete'", "'void'", "'typeof'", 
    "'++'", "'--'", "'~'", "'!'", "'this'", "'get'", "'set'", "'null'", 
    "'true'", "'false'", "'#'"
]



class JavaScriptParser(Parser):
    grammarFileName = "/home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g"
    tokenNames = tokenNames

    def __init__(self, input):
        Parser.__init__(self, input)
        self.ruleMemo = {}
        self.dfa8 = self.DFA8(
            self, 8,
            eot = self.DFA8_eot,
            eof = self.DFA8_eof,
            min = self.DFA8_min,
            max = self.DFA8_max,
            accept = self.DFA8_accept,
            special = self.DFA8_special,
            transition = self.DFA8_transition
            )
        self.dfa10 = self.DFA10(
            self, 10,
            eot = self.DFA10_eot,
            eof = self.DFA10_eof,
            min = self.DFA10_min,
            max = self.DFA10_max,
            accept = self.DFA10_accept,
            special = self.DFA10_special,
            transition = self.DFA10_transition
            )
        self.dfa13 = self.DFA13(
            self, 13,
            eot = self.DFA13_eot,
            eof = self.DFA13_eof,
            min = self.DFA13_min,
            max = self.DFA13_max,
            accept = self.DFA13_accept,
            special = self.DFA13_special,
            transition = self.DFA13_transition
            )
        self.dfa18 = self.DFA18(
            self, 18,
            eot = self.DFA18_eot,
            eof = self.DFA18_eof,
            min = self.DFA18_min,
            max = self.DFA18_max,
            accept = self.DFA18_accept,
            special = self.DFA18_special,
            transition = self.DFA18_transition
            )
        self.dfa36 = self.DFA36(
            self, 36,
            eot = self.DFA36_eot,
            eof = self.DFA36_eof,
            min = self.DFA36_min,
            max = self.DFA36_max,
            accept = self.DFA36_accept,
            special = self.DFA36_special,
            transition = self.DFA36_transition
            )
        self.dfa35 = self.DFA35(
            self, 35,
            eot = self.DFA35_eot,
            eof = self.DFA35_eof,
            min = self.DFA35_min,
            max = self.DFA35_max,
            accept = self.DFA35_accept,
            special = self.DFA35_special,
            transition = self.DFA35_transition
            )
        self.dfa43 = self.DFA43(
            self, 43,
            eot = self.DFA43_eot,
            eof = self.DFA43_eof,
            min = self.DFA43_min,
            max = self.DFA43_max,
            accept = self.DFA43_accept,
            special = self.DFA43_special,
            transition = self.DFA43_transition
            )
        self.dfa54 = self.DFA54(
            self, 54,
            eot = self.DFA54_eot,
            eof = self.DFA54_eof,
            min = self.DFA54_min,
            max = self.DFA54_max,
            accept = self.DFA54_accept,
            special = self.DFA54_special,
            transition = self.DFA54_transition
            )
        self.dfa57 = self.DFA57(
            self, 57,
            eot = self.DFA57_eot,
            eof = self.DFA57_eof,
            min = self.DFA57_min,
            max = self.DFA57_max,
            accept = self.DFA57_accept,
            special = self.DFA57_special,
            transition = self.DFA57_transition
            )
        self.dfa59 = self.DFA59(
            self, 59,
            eot = self.DFA59_eot,
            eof = self.DFA59_eof,
            min = self.DFA59_min,
            max = self.DFA59_max,
            accept = self.DFA59_accept,
            special = self.DFA59_special,
            transition = self.DFA59_transition
            )
        self.dfa65 = self.DFA65(
            self, 65,
            eot = self.DFA65_eot,
            eof = self.DFA65_eof,
            min = self.DFA65_min,
            max = self.DFA65_max,
            accept = self.DFA65_accept,
            special = self.DFA65_special,
            transition = self.DFA65_transition
            )
        self.dfa64 = self.DFA64(
            self, 64,
            eot = self.DFA64_eot,
            eof = self.DFA64_eof,
            min = self.DFA64_min,
            max = self.DFA64_max,
            accept = self.DFA64_accept,
            special = self.DFA64_special,
            transition = self.DFA64_transition
            )
        self.dfa71 = self.DFA71(
            self, 71,
            eot = self.DFA71_eot,
            eof = self.DFA71_eof,
            min = self.DFA71_min,
            max = self.DFA71_max,
            accept = self.DFA71_accept,
            special = self.DFA71_special,
            transition = self.DFA71_transition
            )
        self.dfa77 = self.DFA77(
            self, 77,
            eot = self.DFA77_eot,
            eof = self.DFA77_eof,
            min = self.DFA77_min,
            max = self.DFA77_max,
            accept = self.DFA77_accept,
            special = self.DFA77_special,
            transition = self.DFA77_transition
            )
        self.dfa76 = self.DFA76(
            self, 76,
            eot = self.DFA76_eot,
            eof = self.DFA76_eof,
            min = self.DFA76_min,
            max = self.DFA76_max,
            accept = self.DFA76_accept,
            special = self.DFA76_special,
            transition = self.DFA76_transition
            )
        self.dfa82 = self.DFA82(
            self, 82,
            eot = self.DFA82_eot,
            eof = self.DFA82_eof,
            min = self.DFA82_min,
            max = self.DFA82_max,
            accept = self.DFA82_accept,
            special = self.DFA82_special,
            transition = self.DFA82_transition
            )
        self.dfa104 = self.DFA104(
            self, 104,
            eot = self.DFA104_eot,
            eof = self.DFA104_eof,
            min = self.DFA104_min,
            max = self.DFA104_max,
            accept = self.DFA104_accept,
            special = self.DFA104_special,
            transition = self.DFA104_transition
            )
        self.dfa107 = self.DFA107(
            self, 107,
            eot = self.DFA107_eot,
            eof = self.DFA107_eof,
            min = self.DFA107_min,
            max = self.DFA107_max,
            accept = self.DFA107_accept,
            special = self.DFA107_special,
            transition = self.DFA107_transition
            )
        self.dfa110 = self.DFA110(
            self, 110,
            eot = self.DFA110_eot,
            eof = self.DFA110_eof,
            min = self.DFA110_min,
            max = self.DFA110_max,
            accept = self.DFA110_accept,
            special = self.DFA110_special,
            transition = self.DFA110_transition
            )
        self.dfa115 = self.DFA115(
            self, 115,
            eot = self.DFA115_eot,
            eof = self.DFA115_eof,
            min = self.DFA115_min,
            max = self.DFA115_max,
            accept = self.DFA115_accept,
            special = self.DFA115_special,
            transition = self.DFA115_transition
            )
        self.dfa126 = self.DFA126(
            self, 126,
            eot = self.DFA126_eot,
            eof = self.DFA126_eof,
            min = self.DFA126_min,
            max = self.DFA126_max,
            accept = self.DFA126_accept,
            special = self.DFA126_special,
            transition = self.DFA126_transition
            )
        self.dfa146 = self.DFA146(
            self, 146,
            eot = self.DFA146_eot,
            eof = self.DFA146_eof,
            min = self.DFA146_min,
            max = self.DFA146_max,
            accept = self.DFA146_accept,
            special = self.DFA146_special,
            transition = self.DFA146_transition
            )
        self.dfa150 = self.DFA150(
            self, 150,
            eot = self.DFA150_eot,
            eof = self.DFA150_eof,
            min = self.DFA150_min,
            max = self.DFA150_max,
            accept = self.DFA150_accept,
            special = self.DFA150_special,
            transition = self.DFA150_transition
            )
        self.dfa149 = self.DFA149(
            self, 149,
            eot = self.DFA149_eot,
            eof = self.DFA149_eof,
            min = self.DFA149_min,
            max = self.DFA149_max,
            accept = self.DFA149_accept,
            special = self.DFA149_special,
            transition = self.DFA149_transition
            )
        self.dfa158 = self.DFA158(
            self, 158,
            eot = self.DFA158_eot,
            eof = self.DFA158_eof,
            min = self.DFA158_min,
            max = self.DFA158_max,
            accept = self.DFA158_accept,
            special = self.DFA158_special,
            transition = self.DFA158_transition
            )
        self.dfa162 = self.DFA162(
            self, 162,
            eot = self.DFA162_eot,
            eof = self.DFA162_eof,
            min = self.DFA162_min,
            max = self.DFA162_max,
            accept = self.DFA162_accept,
            special = self.DFA162_special,
            transition = self.DFA162_transition
            )
        self.dfa175 = self.DFA175(
            self, 175,
            eot = self.DFA175_eot,
            eof = self.DFA175_eof,
            min = self.DFA175_min,
            max = self.DFA175_max,
            accept = self.DFA175_accept,
            special = self.DFA175_special,
            transition = self.DFA175_transition
            )
        self.dfa178 = self.DFA178(
            self, 178,
            eot = self.DFA178_eot,
            eof = self.DFA178_eof,
            min = self.DFA178_min,
            max = self.DFA178_max,
            accept = self.DFA178_accept,
            special = self.DFA178_special,
            transition = self.DFA178_transition
            )
        self.dfa227 = self.DFA227(
            self, 227,
            eot = self.DFA227_eot,
            eof = self.DFA227_eof,
            min = self.DFA227_min,
            max = self.DFA227_max,
            accept = self.DFA227_accept,
            special = self.DFA227_special,
            transition = self.DFA227_transition
            )
        self.dfa245 = self.DFA245(
            self, 245,
            eot = self.DFA245_eot,
            eof = self.DFA245_eof,
            min = self.DFA245_min,
            max = self.DFA245_max,
            accept = self.DFA245_accept,
            special = self.DFA245_special,
            transition = self.DFA245_transition
            )
        self.dfa251 = self.DFA251(
            self, 251,
            eot = self.DFA251_eot,
            eof = self.DFA251_eof,
            min = self.DFA251_min,
            max = self.DFA251_max,
            accept = self.DFA251_accept,
            special = self.DFA251_special,
            transition = self.DFA251_transition
            )
        self.dfa257 = self.DFA257(
            self, 257,
            eot = self.DFA257_eot,
            eof = self.DFA257_eof,
            min = self.DFA257_min,
            max = self.DFA257_max,
            accept = self.DFA257_accept,
            special = self.DFA257_special,
            transition = self.DFA257_transition
            )
        self.dfa263 = self.DFA263(
            self, 263,
            eot = self.DFA263_eot,
            eof = self.DFA263_eof,
            min = self.DFA263_min,
            max = self.DFA263_max,
            accept = self.DFA263_accept,
            special = self.DFA263_special,
            transition = self.DFA263_transition
            )
        self.dfa269 = self.DFA269(
            self, 269,
            eot = self.DFA269_eot,
            eof = self.DFA269_eof,
            min = self.DFA269_min,
            max = self.DFA269_max,
            accept = self.DFA269_accept,
            special = self.DFA269_special,
            transition = self.DFA269_transition
            )
        self.dfa275 = self.DFA275(
            self, 275,
            eot = self.DFA275_eot,
            eof = self.DFA275_eof,
            min = self.DFA275_min,
            max = self.DFA275_max,
            accept = self.DFA275_accept,
            special = self.DFA275_special,
            transition = self.DFA275_transition
            )
        self.dfa281 = self.DFA281(
            self, 281,
            eot = self.DFA281_eot,
            eof = self.DFA281_eof,
            min = self.DFA281_min,
            max = self.DFA281_max,
            accept = self.DFA281_accept,
            special = self.DFA281_special,
            transition = self.DFA281_transition
            )
        self.dfa287 = self.DFA287(
            self, 287,
            eot = self.DFA287_eot,
            eof = self.DFA287_eof,
            min = self.DFA287_min,
            max = self.DFA287_max,
            accept = self.DFA287_accept,
            special = self.DFA287_special,
            transition = self.DFA287_transition
            )
        self.dfa303 = self.DFA303(
            self, 303,
            eot = self.DFA303_eot,
            eof = self.DFA303_eof,
            min = self.DFA303_min,
            max = self.DFA303_max,
            accept = self.DFA303_accept,
            special = self.DFA303_special,
            transition = self.DFA303_transition
            )
        self.dfa307 = self.DFA307(
            self, 307,
            eot = self.DFA307_eot,
            eof = self.DFA307_eof,
            min = self.DFA307_min,
            max = self.DFA307_max,
            accept = self.DFA307_accept,
            special = self.DFA307_special,
            transition = self.DFA307_transition
            )
        self.dfa306 = self.DFA306(
            self, 306,
            eot = self.DFA306_eot,
            eof = self.DFA306_eof,
            min = self.DFA306_min,
            max = self.DFA306_max,
            accept = self.DFA306_accept,
            special = self.DFA306_special,
            transition = self.DFA306_transition
            )
        self.dfa326 = self.DFA326(
            self, 326,
            eot = self.DFA326_eot,
            eof = self.DFA326_eof,
            min = self.DFA326_min,
            max = self.DFA326_max,
            accept = self.DFA326_accept,
            special = self.DFA326_special,
            transition = self.DFA326_transition
            )
        self.dfa340 = self.DFA340(
            self, 340,
            eot = self.DFA340_eot,
            eof = self.DFA340_eof,
            min = self.DFA340_min,
            max = self.DFA340_max,
            accept = self.DFA340_accept,
            special = self.DFA340_special,
            transition = self.DFA340_transition
            )
        self.dfa370 = self.DFA370(
            self, 370,
            eot = self.DFA370_eot,
            eof = self.DFA370_eof,
            min = self.DFA370_min,
            max = self.DFA370_max,
            accept = self.DFA370_accept,
            special = self.DFA370_special,
            transition = self.DFA370_transition
            )
        self.dfa498 = self.DFA498(
            self, 498,
            eot = self.DFA498_eot,
            eof = self.DFA498_eof,
            min = self.DFA498_min,
            max = self.DFA498_max,
            accept = self.DFA498_accept,
            special = self.DFA498_special,
            transition = self.DFA498_transition
            )
        self.dfa502 = self.DFA502(
            self, 502,
            eot = self.DFA502_eot,
            eof = self.DFA502_eof,
            min = self.DFA502_min,
            max = self.DFA502_max,
            accept = self.DFA502_accept,
            special = self.DFA502_special,
            transition = self.DFA502_transition
            )
        self.dfa501 = self.DFA501(
            self, 501,
            eot = self.DFA501_eot,
            eof = self.DFA501_eof,
            min = self.DFA501_min,
            max = self.DFA501_max,
            accept = self.DFA501_accept,
            special = self.DFA501_special,
            transition = self.DFA501_transition
            )




                
        self.adaptor = CommonTreeAdaptor()




    class program_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start program
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:58:1: program : ( LT )* sourceElements ( LT )* EOF -> ^( SCOPE GLOBAL NONE sourceElements ) ;
    def program(self, ):

        retval = self.program_return()
        retval.start = self.input.LT(1)
        program_StartIndex = self.input.index()
        root_0 = None

        LT1 = None
        LT3 = None
        EOF4 = None
        sourceElements2 = None


        LT1_tree = None
        LT3_tree = None
        EOF4_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_EOF = RewriteRuleTokenStream(self.adaptor, "token EOF")
        stream_sourceElements = RewriteRuleSubtreeStream(self.adaptor, "rule sourceElements")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 1):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:59:2: ( ( LT )* sourceElements ( LT )* EOF -> ^( SCOPE GLOBAL NONE sourceElements ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:59:4: ( LT )* sourceElements ( LT )* EOF
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:59:4: ( LT )*
                while True: #loop1
                    alt1 = 2
                    LA1_0 = self.input.LA(1)

                    if (LA1_0 == LT) :
                        LA1_2 = self.input.LA(2)

                        if (self.synpred1()) :
                            alt1 = 1




                    if alt1 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT1 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_program204)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT1)


                    else:
                        break #loop1


                self.following.append(self.FOLLOW_sourceElements_in_program207)
                sourceElements2 = self.sourceElements()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_sourceElements.add(sourceElements2.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:59:23: ( LT )*
                while True: #loop2
                    alt2 = 2
                    LA2_0 = self.input.LA(1)

                    if (LA2_0 == LT) :
                        alt2 = 1


                    if alt2 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT3 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_program209)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT3)


                    else:
                        break #loop2


                EOF4 = self.input.LT(1)
                self.match(self.input, EOF, self.FOLLOW_EOF_in_program212)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_EOF.add(EOF4)
                # AST Rewrite
                # elements: sourceElements
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 60:3: -> ^( SCOPE GLOBAL NONE sourceElements )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:60:6: ^( SCOPE GLOBAL NONE sourceElements )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(GLOBAL, "GLOBAL"))
                    self.adaptor.addChild(root_1, self.adaptor.createFromType(NONE, "NONE"))
                    self.adaptor.addChild(root_1, stream_sourceElements.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 1, program_StartIndex)

            pass

        return retval

    # $ANTLR end program

    class standaloneExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start standaloneExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:63:1: standaloneExpression : ( LT )* expression ( LT )* ( ';' ( LT )* )? EOF -> expression ;
    def standaloneExpression(self, ):

        retval = self.standaloneExpression_return()
        retval.start = self.input.LT(1)
        standaloneExpression_StartIndex = self.input.index()
        root_0 = None

        LT5 = None
        LT7 = None
        char_literal8 = None
        LT9 = None
        EOF10 = None
        expression6 = None


        LT5_tree = None
        LT7_tree = None
        char_literal8_tree = None
        LT9_tree = None
        EOF10_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_EOF = RewriteRuleTokenStream(self.adaptor, "token EOF")
        stream_74 = RewriteRuleTokenStream(self.adaptor, "token 74")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 2):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:2: ( ( LT )* expression ( LT )* ( ';' ( LT )* )? EOF -> expression )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:4: ( LT )* expression ( LT )* ( ';' ( LT )* )? EOF
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:4: ( LT )*
                while True: #loop3
                    alt3 = 2
                    LA3_0 = self.input.LA(1)

                    if (LA3_0 == LT) :
                        LA3_2 = self.input.LA(2)

                        if (self.synpred3()) :
                            alt3 = 1




                    if alt3 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT5 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_standaloneExpression237)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT5)


                    else:
                        break #loop3


                self.following.append(self.FOLLOW_expression_in_standaloneExpression240)
                expression6 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression6.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:19: ( LT )*
                while True: #loop4
                    alt4 = 2
                    LA4_0 = self.input.LA(1)

                    if (LA4_0 == LT) :
                        alt4 = 1


                    if alt4 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT7 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_standaloneExpression242)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT7)


                    else:
                        break #loop4


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:23: ( ';' ( LT )* )?
                alt6 = 2
                LA6_0 = self.input.LA(1)

                if (LA6_0 == 74) :
                    alt6 = 1
                if alt6 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:24: ';' ( LT )*
                    char_literal8 = self.input.LT(1)
                    self.match(self.input, 74, self.FOLLOW_74_in_standaloneExpression246)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_74.add(char_literal8)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:28: ( LT )*
                    while True: #loop5
                        alt5 = 2
                        LA5_0 = self.input.LA(1)

                        if (LA5_0 == LT) :
                            alt5 = 1


                        if alt5 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT9 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_standaloneExpression248)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT9)


                        else:
                            break #loop5





                EOF10 = self.input.LT(1)
                self.match(self.input, EOF, self.FOLLOW_EOF_in_standaloneExpression253)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_EOF.add(EOF10)
                # AST Rewrite
                # elements: expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 65:3: -> expression
                    self.adaptor.addChild(root_0, stream_expression.next())






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 2, standaloneExpression_StartIndex)

            pass

        return retval

    # $ANTLR end standaloneExpression

    class sourceElements_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start sourceElements
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:68:1: sourceElements : sourceElement ( ( LT )* sourceElement )* ;
    def sourceElements(self, ):

        retval = self.sourceElements_return()
        retval.start = self.input.LT(1)
        sourceElements_StartIndex = self.input.index()
        root_0 = None

        LT12 = None
        sourceElement11 = None

        sourceElement13 = None


        LT12_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 3):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:2: ( sourceElement ( ( LT )* sourceElement )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:4: sourceElement ( ( LT )* sourceElement )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_sourceElement_in_sourceElements270)
                sourceElement11 = self.sourceElement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, sourceElement11.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:18: ( ( LT )* sourceElement )*
                while True: #loop8
                    alt8 = 2
                    alt8 = self.dfa8.predict(self.input)
                    if alt8 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:19: ( LT )* sourceElement
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:21: ( LT )*
                        while True: #loop7
                            alt7 = 2
                            LA7_0 = self.input.LA(1)

                            if (LA7_0 == LT) :
                                LA7_2 = self.input.LA(2)

                                if (self.synpred7()) :
                                    alt7 = 1




                            if alt7 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT12 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_sourceElements273)
                                if self.failed:
                                    return retval


                            else:
                                break #loop7


                        self.following.append(self.FOLLOW_sourceElement_in_sourceElements277)
                        sourceElement13 = self.sourceElement()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, sourceElement13.tree)


                    else:
                        break #loop8





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 3, sourceElements_StartIndex)

            pass

        return retval

    # $ANTLR end sourceElements

    class sourceElement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start sourceElement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:72:1: sourceElement : statement ;
    def sourceElement(self, ):

        retval = self.sourceElement_return()
        retval.start = self.input.LT(1)
        sourceElement_StartIndex = self.input.index()
        root_0 = None

        statement14 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 4):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:73:2: ( statement )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:73:4: statement
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_statement_in_sourceElement291)
                statement14 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statement14.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 4, sourceElement_StartIndex)

            pass

        return retval

    # $ANTLR end sourceElement

    class xmlStartTag_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlStartTag
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:76:1: xmlStartTag options {backtrack=false; } : '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '>' ;
    def xmlStartTag(self, ):

        retval = self.xmlStartTag_return()
        retval.start = self.input.LT(1)
        xmlStartTag_StartIndex = self.input.index()
        root_0 = None

        char_literal15 = None
        LT17 = None
        LT19 = None
        char_literal20 = None
        xmlTagName16 = None

        xmlAttribute18 = None


        char_literal15_tree = None
        LT17_tree = None
        LT19_tree = None
        char_literal20_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 5):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:78:2: ( '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '>' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:78:4: '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '>'
                root_0 = self.adaptor.nil()

                char_literal15 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_xmlStartTag309)
                if self.failed:
                    return retval

                char_literal15_tree = self.adaptor.createWithPayload(char_literal15)
                self.adaptor.addChild(root_0, char_literal15_tree)

                self.following.append(self.FOLLOW_xmlTagName_in_xmlStartTag311)
                xmlTagName16 = self.xmlTagName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlTagName16.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:78:19: ( ( LT )* xmlAttribute )*
                while True: #loop10
                    alt10 = 2
                    alt10 = self.dfa10.predict(self.input)
                    if alt10 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:78:20: ( LT )* xmlAttribute
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:78:22: ( LT )*
                        while True: #loop9
                            alt9 = 2
                            LA9_0 = self.input.LA(1)

                            if (LA9_0 == LT) :
                                alt9 = 1


                            if alt9 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT17 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_xmlStartTag314)
                                if self.failed:
                                    return retval


                            else:
                                break #loop9


                        self.following.append(self.FOLLOW_xmlAttribute_in_xmlStartTag318)
                        xmlAttribute18 = self.xmlAttribute()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, xmlAttribute18.tree)


                    else:
                        break #loop10


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:78:42: ( LT )*
                while True: #loop11
                    alt11 = 2
                    LA11_0 = self.input.LA(1)

                    if (LA11_0 == LT) :
                        alt11 = 1


                    if alt11 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT19 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_xmlStartTag322)
                        if self.failed:
                            return retval


                    else:
                        break #loop11


                char_literal20 = self.input.LT(1)
                self.match(self.input, 76, self.FOLLOW_76_in_xmlStartTag326)
                if self.failed:
                    return retval

                char_literal20_tree = self.adaptor.createWithPayload(char_literal20)
                self.adaptor.addChild(root_0, char_literal20_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 5, xmlStartTag_StartIndex)

            pass

        return retval

    # $ANTLR end xmlStartTag

    class xmlEndTag_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlEndTag
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:81:1: xmlEndTag options {backtrack=false; } : '<' '/' xmlTagName '>' ;
    def xmlEndTag(self, ):

        retval = self.xmlEndTag_return()
        retval.start = self.input.LT(1)
        xmlEndTag_StartIndex = self.input.index()
        root_0 = None

        char_literal21 = None
        char_literal22 = None
        char_literal24 = None
        xmlTagName23 = None


        char_literal21_tree = None
        char_literal22_tree = None
        char_literal24_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 6):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:83:2: ( '<' '/' xmlTagName '>' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:83:4: '<' '/' xmlTagName '>'
                root_0 = self.adaptor.nil()

                char_literal21 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_xmlEndTag344)
                if self.failed:
                    return retval

                char_literal21_tree = self.adaptor.createWithPayload(char_literal21)
                self.adaptor.addChild(root_0, char_literal21_tree)

                char_literal22 = self.input.LT(1)
                self.match(self.input, 77, self.FOLLOW_77_in_xmlEndTag346)
                if self.failed:
                    return retval

                char_literal22_tree = self.adaptor.createWithPayload(char_literal22)
                self.adaptor.addChild(root_0, char_literal22_tree)

                self.following.append(self.FOLLOW_xmlTagName_in_xmlEndTag348)
                xmlTagName23 = self.xmlTagName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlTagName23.tree)
                char_literal24 = self.input.LT(1)
                self.match(self.input, 76, self.FOLLOW_76_in_xmlEndTag350)
                if self.failed:
                    return retval

                char_literal24_tree = self.adaptor.createWithPayload(char_literal24)
                self.adaptor.addChild(root_0, char_literal24_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 6, xmlEndTag_StartIndex)

            pass

        return retval

    # $ANTLR end xmlEndTag

    class xmlEmptyTag_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlEmptyTag
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:86:1: xmlEmptyTag options {backtrack=false; } : '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '/' '>' ;
    def xmlEmptyTag(self, ):

        retval = self.xmlEmptyTag_return()
        retval.start = self.input.LT(1)
        xmlEmptyTag_StartIndex = self.input.index()
        root_0 = None

        char_literal25 = None
        LT27 = None
        LT29 = None
        char_literal30 = None
        char_literal31 = None
        xmlTagName26 = None

        xmlAttribute28 = None


        char_literal25_tree = None
        LT27_tree = None
        LT29_tree = None
        char_literal30_tree = None
        char_literal31_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 7):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:88:2: ( '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '/' '>' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:88:4: '<' xmlTagName ( ( LT )* xmlAttribute )* ( LT )* '/' '>'
                root_0 = self.adaptor.nil()

                char_literal25 = self.input.LT(1)
                self.match(self.input, 75, self.FOLLOW_75_in_xmlEmptyTag368)
                if self.failed:
                    return retval

                char_literal25_tree = self.adaptor.createWithPayload(char_literal25)
                self.adaptor.addChild(root_0, char_literal25_tree)

                self.following.append(self.FOLLOW_xmlTagName_in_xmlEmptyTag370)
                xmlTagName26 = self.xmlTagName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlTagName26.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:88:19: ( ( LT )* xmlAttribute )*
                while True: #loop13
                    alt13 = 2
                    alt13 = self.dfa13.predict(self.input)
                    if alt13 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:88:20: ( LT )* xmlAttribute
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:88:22: ( LT )*
                        while True: #loop12
                            alt12 = 2
                            LA12_0 = self.input.LA(1)

                            if (LA12_0 == LT) :
                                alt12 = 1


                            if alt12 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT27 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_xmlEmptyTag373)
                                if self.failed:
                                    return retval


                            else:
                                break #loop12


                        self.following.append(self.FOLLOW_xmlAttribute_in_xmlEmptyTag377)
                        xmlAttribute28 = self.xmlAttribute()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, xmlAttribute28.tree)


                    else:
                        break #loop13


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:88:42: ( LT )*
                while True: #loop14
                    alt14 = 2
                    LA14_0 = self.input.LA(1)

                    if (LA14_0 == LT) :
                        alt14 = 1


                    if alt14 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT29 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_xmlEmptyTag381)
                        if self.failed:
                            return retval


                    else:
                        break #loop14


                char_literal30 = self.input.LT(1)
                self.match(self.input, 77, self.FOLLOW_77_in_xmlEmptyTag385)
                if self.failed:
                    return retval

                char_literal30_tree = self.adaptor.createWithPayload(char_literal30)
                self.adaptor.addChild(root_0, char_literal30_tree)

                char_literal31 = self.input.LT(1)
                self.match(self.input, 76, self.FOLLOW_76_in_xmlEmptyTag387)
                if self.failed:
                    return retval

                char_literal31_tree = self.adaptor.createWithPayload(char_literal31)
                self.adaptor.addChild(root_0, char_literal31_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 7, xmlEmptyTag_StartIndex)

            pass

        return retval

    # $ANTLR end xmlEmptyTag

    class xmlTagName_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlTagName
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:91:1: xmlTagName options {backtrack=false; } : identifier ( ( ':' | '-' ) identifier )* ;
    def xmlTagName(self, ):

        retval = self.xmlTagName_return()
        retval.start = self.input.LT(1)
        xmlTagName_StartIndex = self.input.index()
        root_0 = None

        set33 = None
        identifier32 = None

        identifier34 = None


        set33_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 8):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:93:2: ( identifier ( ( ':' | '-' ) identifier )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:93:4: identifier ( ( ':' | '-' ) identifier )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_identifier_in_xmlTagName405)
                identifier32 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, identifier32.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:93:15: ( ( ':' | '-' ) identifier )*
                while True: #loop15
                    alt15 = 2
                    LA15_0 = self.input.LA(1)

                    if ((78 <= LA15_0 <= 79)) :
                        alt15 = 1


                    if alt15 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:93:17: ( ':' | '-' ) identifier
                        set33 = self.input.LT(1)
                        if (78 <= self.input.LA(1) <= 79):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set33))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_xmlTagName409
                                )
                            raise mse


                        self.following.append(self.FOLLOW_identifier_in_xmlTagName415)
                        identifier34 = self.identifier()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, identifier34.tree)


                    else:
                        break #loop15





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 8, xmlTagName_StartIndex)

            pass

        return retval

    # $ANTLR end xmlTagName

    class xmlAttribute_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlAttribute
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:96:1: xmlAttribute options {backtrack=false; } : xmlAttributeName '=' xmlAttributeValue ;
    def xmlAttribute(self, ):

        retval = self.xmlAttribute_return()
        retval.start = self.input.LT(1)
        xmlAttribute_StartIndex = self.input.index()
        root_0 = None

        char_literal36 = None
        xmlAttributeName35 = None

        xmlAttributeValue37 = None


        char_literal36_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 9):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:98:2: ( xmlAttributeName '=' xmlAttributeValue )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:98:4: xmlAttributeName '=' xmlAttributeValue
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_xmlAttributeName_in_xmlAttribute435)
                xmlAttributeName35 = self.xmlAttributeName()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlAttributeName35.tree)
                char_literal36 = self.input.LT(1)
                self.match(self.input, 80, self.FOLLOW_80_in_xmlAttribute437)
                if self.failed:
                    return retval

                char_literal36_tree = self.adaptor.createWithPayload(char_literal36)
                self.adaptor.addChild(root_0, char_literal36_tree)

                self.following.append(self.FOLLOW_xmlAttributeValue_in_xmlAttribute439)
                xmlAttributeValue37 = self.xmlAttributeValue()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, xmlAttributeValue37.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 9, xmlAttribute_StartIndex)

            pass

        return retval

    # $ANTLR end xmlAttribute

    class xmlAttributeName_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlAttributeName
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:102:1: xmlAttributeName options {backtrack=false; } : identifier ( ( ':' | '-' ) identifier )* ;
    def xmlAttributeName(self, ):

        retval = self.xmlAttributeName_return()
        retval.start = self.input.LT(1)
        xmlAttributeName_StartIndex = self.input.index()
        root_0 = None

        set39 = None
        identifier38 = None

        identifier40 = None


        set39_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 10):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:104:2: ( identifier ( ( ':' | '-' ) identifier )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:104:4: identifier ( ( ':' | '-' ) identifier )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_identifier_in_xmlAttributeName458)
                identifier38 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, identifier38.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:104:15: ( ( ':' | '-' ) identifier )*
                while True: #loop16
                    alt16 = 2
                    LA16_0 = self.input.LA(1)

                    if ((78 <= LA16_0 <= 79)) :
                        alt16 = 1


                    if alt16 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:104:17: ( ':' | '-' ) identifier
                        set39 = self.input.LT(1)
                        if (78 <= self.input.LA(1) <= 79):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set39))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_xmlAttributeName462
                                )
                            raise mse


                        self.following.append(self.FOLLOW_identifier_in_xmlAttributeName468)
                        identifier40 = self.identifier()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, identifier40.tree)


                    else:
                        break #loop16





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 10, xmlAttributeName_StartIndex)

            pass

        return retval

    # $ANTLR end xmlAttributeName

    class xmlAttributeValue_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlAttributeValue
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:107:1: xmlAttributeValue options {backtrack=false; } : ( ( '{' )=> e4xSplice | StringLiteral );
    def xmlAttributeValue(self, ):

        retval = self.xmlAttributeValue_return()
        retval.start = self.input.LT(1)
        xmlAttributeValue_StartIndex = self.input.index()
        root_0 = None

        StringLiteral42 = None
        e4xSplice41 = None


        StringLiteral42_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 11):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:109:2: ( ( '{' )=> e4xSplice | StringLiteral )
                alt17 = 2
                LA17_0 = self.input.LA(1)

                if (LA17_0 == 81) and (self.synpred19()):
                    alt17 = 1
                elif (LA17_0 == StringLiteral) :
                    alt17 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("107:1: xmlAttributeValue options {backtrack=false; } : ( ( '{' )=> e4xSplice | StringLiteral );", 17, 0, self.input)

                    raise nvae

                if alt17 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:109:4: ( '{' )=> e4xSplice
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_e4xSplice_in_xmlAttributeValue493)
                    e4xSplice41 = self.e4xSplice()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, e4xSplice41.tree)


                elif alt17 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:110:4: StringLiteral
                    root_0 = self.adaptor.nil()

                    StringLiteral42 = self.input.LT(1)
                    self.match(self.input, StringLiteral, self.FOLLOW_StringLiteral_in_xmlAttributeValue498)
                    if self.failed:
                        return retval

                    StringLiteral42_tree = self.adaptor.createWithPayload(StringLiteral42)
                    self.adaptor.addChild(root_0, StringLiteral42_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 11, xmlAttributeValue_StartIndex)

            pass

        return retval

    # $ANTLR end xmlAttributeValue

    class e4xSplice_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start e4xSplice
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:113:1: e4xSplice options {backtrack=false; } : '{' expression '}' ;
    def e4xSplice(self, ):

        retval = self.e4xSplice_return()
        retval.start = self.input.LT(1)
        e4xSplice_StartIndex = self.input.index()
        root_0 = None

        char_literal43 = None
        char_literal45 = None
        expression44 = None


        char_literal43_tree = None
        char_literal45_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 12):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:115:2: ( '{' expression '}' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:115:4: '{' expression '}'
                root_0 = self.adaptor.nil()

                char_literal43 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_e4xSplice516)
                if self.failed:
                    return retval

                char_literal43_tree = self.adaptor.createWithPayload(char_literal43)
                self.adaptor.addChild(root_0, char_literal43_tree)

                self.following.append(self.FOLLOW_expression_in_e4xSplice518)
                expression44 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, expression44.tree)
                char_literal45 = self.input.LT(1)
                self.match(self.input, 82, self.FOLLOW_82_in_e4xSplice520)
                if self.failed:
                    return retval

                char_literal45_tree = self.adaptor.createWithPayload(char_literal45)
                self.adaptor.addChild(root_0, char_literal45_tree)




                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 12, e4xSplice_StartIndex)

            pass

        return retval

    # $ANTLR end e4xSplice

    class xmlPayload_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlPayload
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:118:1: xmlPayload : ( xmlEndTag | xmlEmptyTag | xmlStartTag | e4xSplice | XMLComment );
    def xmlPayload(self, ):

        retval = self.xmlPayload_return()
        retval.start = self.input.LT(1)
        xmlPayload_StartIndex = self.input.index()
        root_0 = None

        XMLComment50 = None
        xmlEndTag46 = None

        xmlEmptyTag47 = None

        xmlStartTag48 = None

        e4xSplice49 = None


        XMLComment50_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 13):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:127:2: ( xmlEndTag | xmlEmptyTag | xmlStartTag | e4xSplice | XMLComment )
                alt18 = 5
                alt18 = self.dfa18.predict(self.input)
                if alt18 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:127:4: xmlEndTag
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlEndTag_in_xmlPayload534)
                    xmlEndTag46 = self.xmlEndTag()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlEndTag46.tree)


                elif alt18 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:128:4: xmlEmptyTag
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlEmptyTag_in_xmlPayload539)
                    xmlEmptyTag47 = self.xmlEmptyTag()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlEmptyTag47.tree)


                elif alt18 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:4: xmlStartTag
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlStartTag_in_xmlPayload544)
                    xmlStartTag48 = self.xmlStartTag()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlStartTag48.tree)


                elif alt18 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:130:4: e4xSplice
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_e4xSplice_in_xmlPayload549)
                    e4xSplice49 = self.e4xSplice()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, e4xSplice49.tree)


                elif alt18 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:131:4: XMLComment
                    root_0 = self.adaptor.nil()

                    XMLComment50 = self.input.LT(1)
                    self.match(self.input, XMLComment, self.FOLLOW_XMLComment_in_xmlPayload554)
                    if self.failed:
                        return retval

                    XMLComment50_tree = self.adaptor.createWithPayload(XMLComment50)
                    self.adaptor.addChild(root_0, XMLComment50_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 13, xmlPayload_StartIndex)

            pass

        return retval

    # $ANTLR end xmlPayload

    class xmlLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start xmlLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:134:1: xmlLiteral : ( ( LT )* xmlPayload )+ ;
    def xmlLiteral(self, ):

        retval = self.xmlLiteral_return()
        retval.start = self.input.LT(1)
        xmlLiteral_StartIndex = self.input.index()
        root_0 = None

        LT51 = None
        xmlPayload52 = None


        LT51_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 14):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:2: ( ( ( LT )* xmlPayload )+ )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:4: ( ( LT )* xmlPayload )+
                root_0 = self.adaptor.nil()

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:4: ( ( LT )* xmlPayload )+
                cnt20 = 0
                while True: #loop20
                    alt20 = 2
                    LA20 = self.input.LA(1)
                    if LA20 == LT:
                        LA20_1 = self.input.LA(2)

                        if (self.synpred25()) :
                            alt20 = 1


                    elif LA20 == 75:
                        LA20_11 = self.input.LA(2)

                        if (self.synpred25()) :
                            alt20 = 1


                    elif LA20 == XMLComment or LA20 == 81:
                        alt20 = 1

                    if alt20 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:5: ( LT )* xmlPayload
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:5: ( LT )*
                        while True: #loop19
                            alt19 = 2
                            LA19_0 = self.input.LA(1)

                            if (LA19_0 == LT) :
                                alt19 = 1


                            if alt19 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT51 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_xmlLiteral567)
                                if self.failed:
                                    return retval

                                LT51_tree = self.adaptor.createWithPayload(LT51)
                                self.adaptor.addChild(root_0, LT51_tree)



                            else:
                                break #loop19


                        self.following.append(self.FOLLOW_xmlPayload_in_xmlLiteral570)
                        xmlPayload52 = self.xmlPayload()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, xmlPayload52.tree)


                    else:
                        if cnt20 >= 1:
                            break #loop20

                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        eee = EarlyExitException(20, self.input)
                        raise eee

                    cnt20 += 1





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 14, xmlLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end xmlLiteral

    class functionExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start functionExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:140:1: functionExpression : ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) );
    def functionExpression(self, ):

        retval = self.functionExpression_return()
        retval.start = self.input.LT(1)
        functionExpression_StartIndex = self.input.index()
        root_0 = None

        func = None
        string_literal53 = None
        LT54 = None
        LT56 = None
        LT58 = None
        LT60 = None
        LT62 = None
        string_literal64 = None
        LT65 = None
        LT67 = None
        LT69 = None
        LT71 = None
        LT73 = None
        identifier55 = None

        formalParameterList57 = None

        statementBlock59 = None

        formalParameterList61 = None

        statementBlock63 = None

        identifier66 = None

        formalParameterList68 = None

        assignmentExpression70 = None

        formalParameterList72 = None

        assignmentExpression74 = None


        func_tree = None
        string_literal53_tree = None
        LT54_tree = None
        LT56_tree = None
        LT58_tree = None
        LT60_tree = None
        LT62_tree = None
        string_literal64_tree = None
        LT65_tree = None
        LT67_tree = None
        LT69_tree = None
        LT71_tree = None
        LT73_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_83 = RewriteRuleTokenStream(self.adaptor, "token 83")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        stream_statementBlock = RewriteRuleSubtreeStream(self.adaptor, "rule statementBlock")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        stream_formalParameterList = RewriteRuleSubtreeStream(self.adaptor, "rule formalParameterList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 15):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:2: ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) )
                alt31 = 4
                LA31_0 = self.input.LA(1)

                if (LA31_0 == 83) :
                    LA31_1 = self.input.LA(2)

                    if (self.synpred29()) :
                        alt31 = 1
                    elif (self.synpred32()) :
                        alt31 = 2
                    elif (self.synpred36()) :
                        alt31 = 3
                    elif (True) :
                        alt31 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("140:1: functionExpression : ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) );", 31, 1, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("140:1: functionExpression : ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) ) | func= 'function' ( LT )* formalParameterList ( LT )* statementBlock -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) ) | 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) ) | func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) ) );", 31, 0, self.input)

                    raise nvae

                if alt31 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock
                    string_literal53 = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_functionExpression585)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_83.add(string_literal53)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:15: ( LT )*
                    while True: #loop21
                        alt21 = 2
                        LA21_0 = self.input.LA(1)

                        if (LA21_0 == LT) :
                            alt21 = 1


                        if alt21 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT54 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression587)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT54)


                        else:
                            break #loop21


                    self.following.append(self.FOLLOW_identifier_in_functionExpression590)
                    identifier55 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier55.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:30: ( LT )*
                    while True: #loop22
                        alt22 = 2
                        LA22_0 = self.input.LA(1)

                        if (LA22_0 == LT) :
                            alt22 = 1


                        if alt22 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT56 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression592)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT56)


                        else:
                            break #loop22


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression595)
                    formalParameterList57 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList57.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:54: ( LT )*
                    while True: #loop23
                        alt23 = 2
                        LA23_0 = self.input.LA(1)

                        if (LA23_0 == LT) :
                            alt23 = 1


                        if alt23 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT58 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression597)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT58)


                        else:
                            break #loop23


                    self.following.append(self.FOLLOW_statementBlock_in_functionExpression600)
                    statementBlock59 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock59.tree)
                    # AST Rewrite
                    # elements: 91, formalParameterList, statementBlock, identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 142:3: -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:142:6: ^( FUNC identifier formalParameterList ^( SCOPE 'var' statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:142:44: ^( SCOPE 'var' statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(91, "91"))
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt31 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:143:4: func= 'function' ( LT )* formalParameterList ( LT )* statementBlock
                    func = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_functionExpression627)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_83.add(func)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:143:20: ( LT )*
                    while True: #loop24
                        alt24 = 2
                        LA24_0 = self.input.LA(1)

                        if (LA24_0 == LT) :
                            alt24 = 1


                        if alt24 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT60 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression629)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT60)


                        else:
                            break #loop24


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression632)
                    formalParameterList61 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList61.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:143:44: ( LT )*
                    while True: #loop25
                        alt25 = 2
                        LA25_0 = self.input.LA(1)

                        if (LA25_0 == LT) :
                            alt25 = 1


                        if alt25 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT62 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression634)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT62)


                        else:
                            break #loop25


                    self.following.append(self.FOLLOW_statementBlock_in_functionExpression637)
                    statementBlock63 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock63.tree)
                    # AST Rewrite
                    # elements: 91, formalParameterList, statementBlock
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 144:3: -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:144:6: ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromToken(ANONYMOUS, func))
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:144:50: ^( SCOPE 'var' statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(91, "91"))
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt31 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression
                    string_literal64 = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_functionExpression663)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_83.add(string_literal64)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:15: ( LT )*
                    while True: #loop26
                        alt26 = 2
                        LA26_0 = self.input.LA(1)

                        if (LA26_0 == LT) :
                            alt26 = 1


                        if alt26 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT65 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression665)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT65)


                        else:
                            break #loop26


                    self.following.append(self.FOLLOW_identifier_in_functionExpression668)
                    identifier66 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier66.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:30: ( LT )*
                    while True: #loop27
                        alt27 = 2
                        LA27_0 = self.input.LA(1)

                        if (LA27_0 == LT) :
                            alt27 = 1


                        if alt27 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT67 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression670)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT67)


                        else:
                            break #loop27


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression673)
                    formalParameterList68 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList68.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:54: ( LT )*
                    while True: #loop28
                        alt28 = 2
                        LA28_0 = self.input.LA(1)

                        if (LA28_0 == LT) :
                            LA28_2 = self.input.LA(2)

                            if (self.synpred35()) :
                                alt28 = 1




                        if alt28 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT69 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression675)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT69)


                        else:
                            break #loop28


                    self.following.append(self.FOLLOW_assignmentExpression_in_functionExpression678)
                    assignmentExpression70 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression70.tree)
                    # AST Rewrite
                    # elements: 91, assignmentExpression, formalParameterList, identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 146:3: -> ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:146:6: ^( FUNC identifier formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:146:44: ^( SCOPE 'var' assignmentExpression )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(91, "91"))
                        self.adaptor.addChild(root_2, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt31 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:147:4: func= 'function' ( LT )* formalParameterList ( LT )* assignmentExpression
                    func = self.input.LT(1)
                    self.match(self.input, 83, self.FOLLOW_83_in_functionExpression705)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_83.add(func)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:147:20: ( LT )*
                    while True: #loop29
                        alt29 = 2
                        LA29_0 = self.input.LA(1)

                        if (LA29_0 == LT) :
                            alt29 = 1


                        if alt29 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT71 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression707)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT71)


                        else:
                            break #loop29


                    self.following.append(self.FOLLOW_formalParameterList_in_functionExpression710)
                    formalParameterList72 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList72.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:147:44: ( LT )*
                    while True: #loop30
                        alt30 = 2
                        LA30_0 = self.input.LA(1)

                        if (LA30_0 == LT) :
                            LA30_2 = self.input.LA(2)

                            if (self.synpred38()) :
                                alt30 = 1




                        if alt30 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT73 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_functionExpression712)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT73)


                        else:
                            break #loop30


                    self.following.append(self.FOLLOW_assignmentExpression_in_functionExpression715)
                    assignmentExpression74 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression74.tree)
                    # AST Rewrite
                    # elements: assignmentExpression, formalParameterList, 91
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 148:3: -> ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:148:6: ^( FUNC ANONYMOUS[$func] formalParameterList ^( SCOPE 'var' assignmentExpression ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromToken(ANONYMOUS, func))
                        self.adaptor.addChild(root_1, stream_formalParameterList.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:148:50: ^( SCOPE 'var' assignmentExpression )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(91, "91"))
                        self.adaptor.addChild(root_2, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 15, functionExpression_StartIndex)

            pass

        return retval

    # $ANTLR end functionExpression

    class formalParameterList_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start formalParameterList
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:151:1: formalParameterList : '(' ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )? ( LT )* ')' -> ^( FUNCARGS ( identifier )* ) ;
    def formalParameterList(self, ):

        retval = self.formalParameterList_return()
        retval.start = self.input.LT(1)
        formalParameterList_StartIndex = self.input.index()
        root_0 = None

        char_literal75 = None
        LT76 = None
        LT78 = None
        char_literal79 = None
        LT80 = None
        LT82 = None
        char_literal83 = None
        identifier77 = None

        identifier81 = None


        char_literal75_tree = None
        LT76_tree = None
        LT78_tree = None
        char_literal79_tree = None
        LT80_tree = None
        LT82_tree = None
        char_literal83_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_85 = RewriteRuleTokenStream(self.adaptor, "token 85")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 16):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:2: ( '(' ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )? ( LT )* ')' -> ^( FUNCARGS ( identifier )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:4: '(' ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )? ( LT )* ')'
                char_literal75 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_formalParameterList748)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal75)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:8: ( ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )* )?
                alt36 = 2
                alt36 = self.dfa36.predict(self.input)
                if alt36 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:9: ( LT )* identifier ( ( LT )* ',' ( LT )* identifier )*
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:9: ( LT )*
                    while True: #loop32
                        alt32 = 2
                        LA32_0 = self.input.LA(1)

                        if (LA32_0 == LT) :
                            alt32 = 1


                        if alt32 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT76 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList751)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT76)


                        else:
                            break #loop32


                    self.following.append(self.FOLLOW_identifier_in_formalParameterList754)
                    identifier77 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier77.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:24: ( ( LT )* ',' ( LT )* identifier )*
                    while True: #loop35
                        alt35 = 2
                        alt35 = self.dfa35.predict(self.input)
                        if alt35 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:25: ( LT )* ',' ( LT )* identifier
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:25: ( LT )*
                            while True: #loop33
                                alt33 = 2
                                LA33_0 = self.input.LA(1)

                                if (LA33_0 == LT) :
                                    alt33 = 1


                                if alt33 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT78 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList757)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT78)


                                else:
                                    break #loop33


                            char_literal79 = self.input.LT(1)
                            self.match(self.input, 85, self.FOLLOW_85_in_formalParameterList760)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_85.add(char_literal79)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:33: ( LT )*
                            while True: #loop34
                                alt34 = 2
                                LA34_0 = self.input.LA(1)

                                if (LA34_0 == LT) :
                                    alt34 = 1


                                if alt34 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT80 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList762)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT80)


                                else:
                                    break #loop34


                            self.following.append(self.FOLLOW_identifier_in_formalParameterList765)
                            identifier81 = self.identifier()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_identifier.add(identifier81.tree)


                        else:
                            break #loop35





                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:152:52: ( LT )*
                while True: #loop37
                    alt37 = 2
                    LA37_0 = self.input.LA(1)

                    if (LA37_0 == LT) :
                        alt37 = 1


                    if alt37 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT82 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_formalParameterList771)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT82)


                    else:
                        break #loop37


                char_literal83 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_formalParameterList774)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal83)
                # AST Rewrite
                # elements: identifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 153:3: -> ^( FUNCARGS ( identifier )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:153:6: ^( FUNCARGS ( identifier )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNCARGS, "FUNCARGS"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:153:17: ( identifier )*
                    while stream_identifier.hasNext():
                        self.adaptor.addChild(root_1, stream_identifier.next())


                    stream_identifier.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 16, formalParameterList_StartIndex)

            pass

        return retval

    # $ANTLR end formalParameterList

    class statement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start statement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:157:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement );
    def statement(self, ):

        retval = self.statement_return()
        retval.start = self.input.LT(1)
        statement_StartIndex = self.input.index()
        root_0 = None

        statementBlock84 = None

        variableStatement85 = None

        emptyStatement86 = None

        expressionStatement87 = None

        ifStatement88 = None

        iterationStatement89 = None

        continueStatement90 = None

        breakStatement91 = None

        returnStatement92 = None

        withStatement93 = None

        letStatement94 = None

        labelledStatement95 = None

        switchStatement96 = None

        throwStatement97 = None

        tryStatement98 = None

        yieldStatement99 = None

        defaultXmlNamespaceStatement100 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 17):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:158:2: ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement )
                alt38 = 17
                LA38 = self.input.LA(1)
                if LA38 == 81:
                    LA38_1 = self.input.LA(2)

                    if (self.synpred45()) :
                        alt38 = 1
                    elif (self.synpred48()) :
                        alt38 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("157:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement );", 38, 1, self.input)

                        raise nvae

                elif LA38 == 91 or LA38 == 92:
                    alt38 = 2
                elif LA38 == 93:
                    LA38_4 = self.input.LA(2)

                    if (self.synpred46()) :
                        alt38 = 2
                    elif (self.synpred48()) :
                        alt38 = 4
                    elif (self.synpred55()) :
                        alt38 = 11
                    elif (self.synpred56()) :
                        alt38 = 12
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("157:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement );", 38, 4, self.input)

                        raise nvae

                elif LA38 == 74:
                    alt38 = 3
                elif LA38 == LT or LA38 == StringLiteral or LA38 == XMLComment or LA38 == NumericLiteral or LA38 == RegularExpressionHacks or LA38 == 75 or LA38 == 77 or LA38 == 79 or LA38 == 83 or LA38 == 84 or LA38 == 94 or LA38 == 113 or LA38 == 143 or LA38 == 145 or LA38 == 146 or LA38 == 147 or LA38 == 148 or LA38 == 149 or LA38 == 150 or LA38 == 151 or LA38 == 152 or LA38 == 155 or LA38 == 156 or LA38 == 157:
                    alt38 = 4
                elif LA38 == 110:
                    LA38_10 = self.input.LA(2)

                    if (self.synpred48()) :
                        alt38 = 4
                    elif (self.synpred56()) :
                        alt38 = 12
                    elif (self.synpred60()) :
                        alt38 = 16
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("157:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement );", 38, 10, self.input)

                        raise nvae

                elif LA38 == 96:
                    alt38 = 5
                elif LA38 == 98 or LA38 == 99 or LA38 == 100:
                    alt38 = 6
                elif LA38 == 103:
                    alt38 = 7
                elif LA38 == 104:
                    alt38 = 8
                elif LA38 == 90:
                    alt38 = 9
                elif LA38 == 105:
                    alt38 = 10
                elif LA38 == 106:
                    alt38 = 13
                elif LA38 == 108:
                    alt38 = 14
                elif LA38 == 109:
                    alt38 = 15
                elif LA38 == 87:
                    LA38_34 = self.input.LA(2)

                    if (self.synpred48()) :
                        alt38 = 4
                    elif (self.synpred56()) :
                        alt38 = 12
                    elif (True) :
                        alt38 = 17
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("157:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement );", 38, 34, self.input)

                        raise nvae

                elif LA38 == Identifier or LA38 == 88 or LA38 == 89 or LA38 == 101 or LA38 == 153 or LA38 == 154:
                    LA38_35 = self.input.LA(2)

                    if (self.synpred48()) :
                        alt38 = 4
                    elif (self.synpred56()) :
                        alt38 = 12
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("157:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement );", 38, 35, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("157:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | letStatement | labelledStatement | switchStatement | throwStatement | tryStatement | yieldStatement | defaultXmlNamespaceStatement );", 38, 0, self.input)

                    raise nvae

                if alt38 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:158:4: statementBlock
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_statementBlock_in_statement797)
                    statementBlock84 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, statementBlock84.tree)


                elif alt38 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:159:4: variableStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_variableStatement_in_statement802)
                    variableStatement85 = self.variableStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, variableStatement85.tree)


                elif alt38 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:160:4: emptyStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_emptyStatement_in_statement807)
                    emptyStatement86 = self.emptyStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, emptyStatement86.tree)


                elif alt38 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:161:4: expressionStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_expressionStatement_in_statement812)
                    expressionStatement87 = self.expressionStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, expressionStatement87.tree)


                elif alt38 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:162:4: ifStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_ifStatement_in_statement817)
                    ifStatement88 = self.ifStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, ifStatement88.tree)


                elif alt38 == 6:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:163:4: iterationStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_iterationStatement_in_statement822)
                    iterationStatement89 = self.iterationStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, iterationStatement89.tree)


                elif alt38 == 7:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:164:4: continueStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_continueStatement_in_statement827)
                    continueStatement90 = self.continueStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, continueStatement90.tree)


                elif alt38 == 8:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:165:4: breakStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_breakStatement_in_statement832)
                    breakStatement91 = self.breakStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, breakStatement91.tree)


                elif alt38 == 9:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:166:4: returnStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_returnStatement_in_statement837)
                    returnStatement92 = self.returnStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, returnStatement92.tree)


                elif alt38 == 10:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:167:4: withStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_withStatement_in_statement842)
                    withStatement93 = self.withStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, withStatement93.tree)


                elif alt38 == 11:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:168:4: letStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_letStatement_in_statement847)
                    letStatement94 = self.letStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, letStatement94.tree)


                elif alt38 == 12:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:169:4: labelledStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_labelledStatement_in_statement852)
                    labelledStatement95 = self.labelledStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, labelledStatement95.tree)


                elif alt38 == 13:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:170:4: switchStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_switchStatement_in_statement857)
                    switchStatement96 = self.switchStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, switchStatement96.tree)


                elif alt38 == 14:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:171:4: throwStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_throwStatement_in_statement862)
                    throwStatement97 = self.throwStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, throwStatement97.tree)


                elif alt38 == 15:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:172:4: tryStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_tryStatement_in_statement867)
                    tryStatement98 = self.tryStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, tryStatement98.tree)


                elif alt38 == 16:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:173:4: yieldStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_yieldStatement_in_statement872)
                    yieldStatement99 = self.yieldStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, yieldStatement99.tree)


                elif alt38 == 17:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:174:4: defaultXmlNamespaceStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_defaultXmlNamespaceStatement_in_statement877)
                    defaultXmlNamespaceStatement100 = self.defaultXmlNamespaceStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, defaultXmlNamespaceStatement100.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 17, statement_StartIndex)

            pass

        return retval

    # $ANTLR end statement

    class defaultXmlNamespaceStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start defaultXmlNamespaceStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:177:1: defaultXmlNamespaceStatement : 'default' 'xml' 'namespace' ( LT )* '=' ( LT )* identifier ( LT | ';' ) -> ^( DEFAULTNS identifier ) ;
    def defaultXmlNamespaceStatement(self, ):

        retval = self.defaultXmlNamespaceStatement_return()
        retval.start = self.input.LT(1)
        defaultXmlNamespaceStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal101 = None
        string_literal102 = None
        string_literal103 = None
        LT104 = None
        char_literal105 = None
        LT106 = None
        LT108 = None
        char_literal109 = None
        identifier107 = None


        string_literal101_tree = None
        string_literal102_tree = None
        string_literal103_tree = None
        LT104_tree = None
        char_literal105_tree = None
        LT106_tree = None
        LT108_tree = None
        char_literal109_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_80 = RewriteRuleTokenStream(self.adaptor, "token 80")
        stream_87 = RewriteRuleTokenStream(self.adaptor, "token 87")
        stream_74 = RewriteRuleTokenStream(self.adaptor, "token 74")
        stream_88 = RewriteRuleTokenStream(self.adaptor, "token 88")
        stream_89 = RewriteRuleTokenStream(self.adaptor, "token 89")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 18):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:2: ( 'default' 'xml' 'namespace' ( LT )* '=' ( LT )* identifier ( LT | ';' ) -> ^( DEFAULTNS identifier ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:4: 'default' 'xml' 'namespace' ( LT )* '=' ( LT )* identifier ( LT | ';' )
                string_literal101 = self.input.LT(1)
                self.match(self.input, 87, self.FOLLOW_87_in_defaultXmlNamespaceStatement888)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_87.add(string_literal101)
                string_literal102 = self.input.LT(1)
                self.match(self.input, 88, self.FOLLOW_88_in_defaultXmlNamespaceStatement890)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_88.add(string_literal102)
                string_literal103 = self.input.LT(1)
                self.match(self.input, 89, self.FOLLOW_89_in_defaultXmlNamespaceStatement892)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_89.add(string_literal103)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:32: ( LT )*
                while True: #loop39
                    alt39 = 2
                    LA39_0 = self.input.LA(1)

                    if (LA39_0 == LT) :
                        alt39 = 1


                    if alt39 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT104 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultXmlNamespaceStatement894)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT104)


                    else:
                        break #loop39


                char_literal105 = self.input.LT(1)
                self.match(self.input, 80, self.FOLLOW_80_in_defaultXmlNamespaceStatement897)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_80.add(char_literal105)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:40: ( LT )*
                while True: #loop40
                    alt40 = 2
                    LA40_0 = self.input.LA(1)

                    if (LA40_0 == LT) :
                        alt40 = 1


                    if alt40 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT106 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultXmlNamespaceStatement899)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT106)


                    else:
                        break #loop40


                self.following.append(self.FOLLOW_identifier_in_defaultXmlNamespaceStatement902)
                identifier107 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_identifier.add(identifier107.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:55: ( LT | ';' )
                alt41 = 2
                LA41_0 = self.input.LA(1)

                if (LA41_0 == LT) :
                    alt41 = 1
                elif (LA41_0 == 74) :
                    alt41 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("178:55: ( LT | ';' )", 41, 0, self.input)

                    raise nvae

                if alt41 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:56: LT
                    LT108 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_defaultXmlNamespaceStatement905)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT108)


                elif alt41 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:178:61: ';'
                    char_literal109 = self.input.LT(1)
                    self.match(self.input, 74, self.FOLLOW_74_in_defaultXmlNamespaceStatement909)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_74.add(char_literal109)



                # AST Rewrite
                # elements: identifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 179:3: -> ^( DEFAULTNS identifier )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:179:6: ^( DEFAULTNS identifier )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(DEFAULTNS, "DEFAULTNS"), root_1)

                    self.adaptor.addChild(root_1, stream_identifier.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 18, defaultXmlNamespaceStatement_StartIndex)

            pass

        return retval

    # $ANTLR end defaultXmlNamespaceStatement

    class statementBlock_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start statementBlock
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:182:1: statementBlock : ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) );
    def statementBlock(self, ):

        retval = self.statementBlock_return()
        retval.start = self.input.LT(1)
        statementBlock_StartIndex = self.input.index()
        root_0 = None

        char_literal110 = None
        LT111 = None
        LT113 = None
        char_literal114 = None
        char_literal115 = None
        string_literal116 = None
        char_literal118 = None
        statementList112 = None

        expression117 = None


        char_literal110_tree = None
        LT111_tree = None
        LT113_tree = None
        char_literal114_tree = None
        char_literal115_tree = None
        string_literal116_tree = None
        char_literal118_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_90 = RewriteRuleTokenStream(self.adaptor, "token 90")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statementList = RewriteRuleSubtreeStream(self.adaptor, "rule statementList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 19):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:2: ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) )
                alt46 = 2
                LA46_0 = self.input.LA(1)

                if (LA46_0 == 81) :
                    LA46_1 = self.input.LA(2)

                    if (self.synpred67()) :
                        alt46 = 1
                    elif (True) :
                        alt46 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("182:1: statementBlock : ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) );", 46, 1, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("182:1: statementBlock : ( '{' ( LT )* ( statementList )? ( LT )* '}' -> ^( SCOPE 'let' ( statementList )? ) | '{' ( 'return' )? expression '}' -> ^( SCOPE 'let' ^( RETURN expression ) ) );", 46, 0, self.input)

                    raise nvae

                if alt46 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:4: '{' ( LT )* ( statementList )? ( LT )* '}'
                    char_literal110 = self.input.LT(1)
                    self.match(self.input, 81, self.FOLLOW_81_in_statementBlock931)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_81.add(char_literal110)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:8: ( LT )*
                    while True: #loop42
                        alt42 = 2
                        LA42_0 = self.input.LA(1)

                        if (LA42_0 == LT) :
                            LA42_2 = self.input.LA(2)

                            if (self.synpred64()) :
                                alt42 = 1




                        if alt42 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT111 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_statementBlock933)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT111)


                        else:
                            break #loop42


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:12: ( statementList )?
                    alt43 = 2
                    alt43 = self.dfa43.predict(self.input)
                    if alt43 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
                        self.following.append(self.FOLLOW_statementList_in_statementBlock936)
                        statementList112 = self.statementList()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_statementList.add(statementList112.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:27: ( LT )*
                    while True: #loop44
                        alt44 = 2
                        LA44_0 = self.input.LA(1)

                        if (LA44_0 == LT) :
                            alt44 = 1


                        if alt44 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT113 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_statementBlock939)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT113)


                        else:
                            break #loop44


                    char_literal114 = self.input.LT(1)
                    self.match(self.input, 82, self.FOLLOW_82_in_statementBlock942)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_82.add(char_literal114)
                    # AST Rewrite
                    # elements: 93, statementList
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 184:3: -> ^( SCOPE 'let' ( statementList )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:184:6: ^( SCOPE 'let' ( statementList )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromType(93, "93"))
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:184:20: ( statementList )?
                        if stream_statementList.hasNext():
                            self.adaptor.addChild(root_1, stream_statementList.next())


                        stream_statementList.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt46 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:185:4: '{' ( 'return' )? expression '}'
                    char_literal115 = self.input.LT(1)
                    self.match(self.input, 81, self.FOLLOW_81_in_statementBlock960)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_81.add(char_literal115)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:185:8: ( 'return' )?
                    alt45 = 2
                    LA45_0 = self.input.LA(1)

                    if (LA45_0 == 90) :
                        alt45 = 1
                    if alt45 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: 'return'
                        string_literal116 = self.input.LT(1)
                        self.match(self.input, 90, self.FOLLOW_90_in_statementBlock962)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_90.add(string_literal116)



                    self.following.append(self.FOLLOW_expression_in_statementBlock965)
                    expression117 = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(expression117.tree)
                    char_literal118 = self.input.LT(1)
                    self.match(self.input, 82, self.FOLLOW_82_in_statementBlock967)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_82.add(char_literal118)
                    # AST Rewrite
                    # elements: 93, expression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 186:3: -> ^( SCOPE 'let' ^( RETURN expression ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:6: ^( SCOPE 'let' ^( RETURN expression ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, self.adaptor.createFromType(93, "93"))
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:186:20: ^( RETURN expression )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(RETURN, "RETURN"), root_2)

                        self.adaptor.addChild(root_2, stream_expression.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 19, statementBlock_StartIndex)

            pass

        return retval

    # $ANTLR end statementBlock

    class statementList_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start statementList
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:189:1: statementList : statement ( ( LT )* statement )* ;
    def statementList(self, ):

        retval = self.statementList_return()
        retval.start = self.input.LT(1)
        statementList_StartIndex = self.input.index()
        root_0 = None

        LT120 = None
        statement119 = None

        statement121 = None


        LT120_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 20):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:2: ( statement ( ( LT )* statement )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:4: statement ( ( LT )* statement )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_statement_in_statementList996)
                statement119 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statement119.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:14: ( ( LT )* statement )*
                while True: #loop48
                    alt48 = 2
                    LA48 = self.input.LA(1)
                    if LA48 == LT:
                        LA48_1 = self.input.LA(2)

                        if (self.synpred70()) :
                            alt48 = 1


                    elif LA48 == 87:
                        LA48_3 = self.input.LA(2)

                        if (self.synpred70()) :
                            alt48 = 1


                    elif LA48 == StringLiteral or LA48 == XMLComment or LA48 == NumericLiteral or LA48 == Identifier or LA48 == RegularExpressionHacks or LA48 == 74 or LA48 == 75 or LA48 == 77 or LA48 == 79 or LA48 == 81 or LA48 == 83 or LA48 == 84 or LA48 == 88 or LA48 == 89 or LA48 == 90 or LA48 == 91 or LA48 == 92 or LA48 == 93 or LA48 == 94 or LA48 == 96 or LA48 == 98 or LA48 == 99 or LA48 == 100 or LA48 == 101 or LA48 == 103 or LA48 == 104 or LA48 == 105 or LA48 == 106 or LA48 == 108 or LA48 == 109 or LA48 == 110 or LA48 == 113 or LA48 == 143 or LA48 == 145 or LA48 == 146 or LA48 == 147 or LA48 == 148 or LA48 == 149 or LA48 == 150 or LA48 == 151 or LA48 == 152 or LA48 == 153 or LA48 == 154 or LA48 == 155 or LA48 == 156 or LA48 == 157:
                        alt48 = 1

                    if alt48 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:15: ( LT )* statement
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:17: ( LT )*
                        while True: #loop47
                            alt47 = 2
                            LA47_0 = self.input.LA(1)

                            if (LA47_0 == LT) :
                                LA47_2 = self.input.LA(2)

                                if (self.synpred69()) :
                                    alt47 = 1




                            if alt47 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT120 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_statementList999)
                                if self.failed:
                                    return retval


                            else:
                                break #loop47


                        self.following.append(self.FOLLOW_statement_in_statementList1003)
                        statement121 = self.statement()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, statement121.tree)


                    else:
                        break #loop48





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 20, statementList_StartIndex)

            pass

        return retval

    # $ANTLR end statementList

    class variableStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:193:1: variableStatement : (mod= 'var' | mod= 'const' | mod= 'let' ) ( LT )* variableDeclarationList ( LT | ';' ) -> ^( VARDEFS $mod variableDeclarationList ) ;
    def variableStatement(self, ):

        retval = self.variableStatement_return()
        retval.start = self.input.LT(1)
        variableStatement_StartIndex = self.input.index()
        root_0 = None

        mod = None
        LT122 = None
        LT124 = None
        char_literal125 = None
        variableDeclarationList123 = None


        mod_tree = None
        LT122_tree = None
        LT124_tree = None
        char_literal125_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_92 = RewriteRuleTokenStream(self.adaptor, "token 92")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_74 = RewriteRuleTokenStream(self.adaptor, "token 74")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 21):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:2: ( (mod= 'var' | mod= 'const' | mod= 'let' ) ( LT )* variableDeclarationList ( LT | ';' ) -> ^( VARDEFS $mod variableDeclarationList ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:4: (mod= 'var' | mod= 'const' | mod= 'let' ) ( LT )* variableDeclarationList ( LT | ';' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:4: (mod= 'var' | mod= 'const' | mod= 'let' )
                alt49 = 3
                LA49 = self.input.LA(1)
                if LA49 == 91:
                    alt49 = 1
                elif LA49 == 92:
                    alt49 = 2
                elif LA49 == 93:
                    alt49 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("194:4: (mod= 'var' | mod= 'const' | mod= 'let' )", 49, 0, self.input)

                    raise nvae

                if alt49 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:5: mod= 'var'
                    mod = self.input.LT(1)
                    self.match(self.input, 91, self.FOLLOW_91_in_variableStatement1019)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_91.add(mod)


                elif alt49 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:15: mod= 'const'
                    mod = self.input.LT(1)
                    self.match(self.input, 92, self.FOLLOW_92_in_variableStatement1023)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_92.add(mod)


                elif alt49 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:27: mod= 'let'
                    mod = self.input.LT(1)
                    self.match(self.input, 93, self.FOLLOW_93_in_variableStatement1027)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_93.add(mod)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:38: ( LT )*
                while True: #loop50
                    alt50 = 2
                    LA50_0 = self.input.LA(1)

                    if (LA50_0 == LT) :
                        alt50 = 1


                    if alt50 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT122 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_variableStatement1030)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT122)


                    else:
                        break #loop50


                self.following.append(self.FOLLOW_variableDeclarationList_in_variableStatement1033)
                variableDeclarationList123 = self.variableDeclarationList()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_variableDeclarationList.add(variableDeclarationList123.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:66: ( LT | ';' )
                alt51 = 2
                LA51_0 = self.input.LA(1)

                if (LA51_0 == LT) :
                    alt51 = 1
                elif (LA51_0 == 74) :
                    alt51 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("194:66: ( LT | ';' )", 51, 0, self.input)

                    raise nvae

                if alt51 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:67: LT
                    LT124 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_variableStatement1036)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT124)


                elif alt51 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:194:72: ';'
                    char_literal125 = self.input.LT(1)
                    self.match(self.input, 74, self.FOLLOW_74_in_variableStatement1040)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_74.add(char_literal125)



                # AST Rewrite
                # elements: variableDeclarationList, mod
                # token labels: mod
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0
                    stream_mod = RewriteRuleTokenStream(self.adaptor, "token mod", mod)

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 195:3: -> ^( VARDEFS $mod variableDeclarationList )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:195:6: ^( VARDEFS $mod variableDeclarationList )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_1)

                    self.adaptor.addChild(root_1, stream_mod.next())
                    self.adaptor.addChild(root_1, stream_variableDeclarationList.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 21, variableStatement_StartIndex)

            pass

        return retval

    # $ANTLR end variableStatement

    class variableDeclarationList_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclarationList
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:198:1: variableDeclarationList : variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )* ;
    def variableDeclarationList(self, ):

        retval = self.variableDeclarationList_return()
        retval.start = self.input.LT(1)
        variableDeclarationList_StartIndex = self.input.index()
        root_0 = None

        LT127 = None
        char_literal128 = None
        LT129 = None
        variableDeclaration126 = None

        variableDeclaration130 = None


        LT127_tree = None
        char_literal128_tree = None
        LT129_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 22):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:2: ( variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:4: variableDeclaration ( ( LT )* ',' ( LT )* variableDeclaration )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_variableDeclaration_in_variableDeclarationList1065)
                variableDeclaration126 = self.variableDeclaration()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, variableDeclaration126.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:24: ( ( LT )* ',' ( LT )* variableDeclaration )*
                while True: #loop54
                    alt54 = 2
                    alt54 = self.dfa54.predict(self.input)
                    if alt54 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:25: ( LT )* ',' ( LT )* variableDeclaration
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:27: ( LT )*
                        while True: #loop52
                            alt52 = 2
                            LA52_0 = self.input.LA(1)

                            if (LA52_0 == LT) :
                                alt52 = 1


                            if alt52 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT127 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationList1068)
                                if self.failed:
                                    return retval


                            else:
                                break #loop52


                        char_literal128 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_variableDeclarationList1072)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:199:37: ( LT )*
                        while True: #loop53
                            alt53 = 2
                            LA53_0 = self.input.LA(1)

                            if (LA53_0 == LT) :
                                alt53 = 1


                            if alt53 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT129 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationList1075)
                                if self.failed:
                                    return retval


                            else:
                                break #loop53


                        self.following.append(self.FOLLOW_variableDeclaration_in_variableDeclarationList1079)
                        variableDeclaration130 = self.variableDeclaration()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, variableDeclaration130.tree)


                    else:
                        break #loop54





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 22, variableDeclarationList_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclarationList

    class variableDeclarationListNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclarationListNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:202:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )* ;
    def variableDeclarationListNoIn(self, ):

        retval = self.variableDeclarationListNoIn_return()
        retval.start = self.input.LT(1)
        variableDeclarationListNoIn_StartIndex = self.input.index()
        root_0 = None

        LT132 = None
        char_literal133 = None
        LT134 = None
        variableDeclarationNoIn131 = None

        variableDeclarationNoIn135 = None


        LT132_tree = None
        char_literal133_tree = None
        LT134_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 23):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:203:2: ( variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:203:4: variableDeclarationNoIn ( ( LT )* ',' ( LT )* variableDeclarationNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1093)
                variableDeclarationNoIn131 = self.variableDeclarationNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, variableDeclarationNoIn131.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:203:28: ( ( LT )* ',' ( LT )* variableDeclarationNoIn )*
                while True: #loop57
                    alt57 = 2
                    alt57 = self.dfa57.predict(self.input)
                    if alt57 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:203:29: ( LT )* ',' ( LT )* variableDeclarationNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:203:31: ( LT )*
                        while True: #loop55
                            alt55 = 2
                            LA55_0 = self.input.LA(1)

                            if (LA55_0 == LT) :
                                alt55 = 1


                            if alt55 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT132 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationListNoIn1096)
                                if self.failed:
                                    return retval


                            else:
                                break #loop55


                        char_literal133 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_variableDeclarationListNoIn1100)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:203:41: ( LT )*
                        while True: #loop56
                            alt56 = 2
                            LA56_0 = self.input.LA(1)

                            if (LA56_0 == LT) :
                                alt56 = 1


                            if alt56 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT134 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationListNoIn1103)
                                if self.failed:
                                    return retval


                            else:
                                break #loop56


                        self.following.append(self.FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1107)
                        variableDeclarationNoIn135 = self.variableDeclarationNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, variableDeclarationNoIn135.tree)


                    else:
                        break #loop57





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 23, variableDeclarationListNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclarationListNoIn

    class variableDeclaration_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclaration
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:206:1: variableDeclaration : destructuringDeclaration ( ( LT )* initialiser )? -> ^( VARDEF destructuringDeclaration ( initialiser )? ) ;
    def variableDeclaration(self, ):

        retval = self.variableDeclaration_return()
        retval.start = self.input.LT(1)
        variableDeclaration_StartIndex = self.input.index()
        root_0 = None

        LT137 = None
        destructuringDeclaration136 = None

        initialiser138 = None


        LT137_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_initialiser = RewriteRuleSubtreeStream(self.adaptor, "rule initialiser")
        stream_destructuringDeclaration = RewriteRuleSubtreeStream(self.adaptor, "rule destructuringDeclaration")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 24):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:207:2: ( destructuringDeclaration ( ( LT )* initialiser )? -> ^( VARDEF destructuringDeclaration ( initialiser )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:207:4: destructuringDeclaration ( ( LT )* initialiser )?
                self.following.append(self.FOLLOW_destructuringDeclaration_in_variableDeclaration1121)
                destructuringDeclaration136 = self.destructuringDeclaration()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_destructuringDeclaration.add(destructuringDeclaration136.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:207:29: ( ( LT )* initialiser )?
                alt59 = 2
                alt59 = self.dfa59.predict(self.input)
                if alt59 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:207:30: ( LT )* initialiser
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:207:30: ( LT )*
                    while True: #loop58
                        alt58 = 2
                        LA58_0 = self.input.LA(1)

                        if (LA58_0 == LT) :
                            alt58 = 1


                        if alt58 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT137 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclaration1124)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT137)


                        else:
                            break #loop58


                    self.following.append(self.FOLLOW_initialiser_in_variableDeclaration1127)
                    initialiser138 = self.initialiser()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_initialiser.add(initialiser138.tree)



                # AST Rewrite
                # elements: initialiser, destructuringDeclaration
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 208:3: -> ^( VARDEF destructuringDeclaration ( initialiser )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:6: ^( VARDEF destructuringDeclaration ( initialiser )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEF, "VARDEF"), root_1)

                    self.adaptor.addChild(root_1, stream_destructuringDeclaration.next())
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:208:40: ( initialiser )?
                    if stream_initialiser.hasNext():
                        self.adaptor.addChild(root_1, stream_initialiser.next())


                    stream_initialiser.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 24, variableDeclaration_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclaration

    class destructuringDeclaration_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start destructuringDeclaration
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:211:1: destructuringDeclaration : ( identifier | '[' ( LT )* ( destructuringDeclaration )? ( ( LT )* ',' ( ( LT )* destructuringDeclaration )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( destructuringDeclaration )* ) );
    def destructuringDeclaration(self, ):

        retval = self.destructuringDeclaration_return()
        retval.start = self.input.LT(1)
        destructuringDeclaration_StartIndex = self.input.index()
        root_0 = None

        char_literal140 = None
        LT141 = None
        LT143 = None
        char_literal144 = None
        LT145 = None
        LT147 = None
        char_literal148 = None
        LT149 = None
        char_literal150 = None
        identifier139 = None

        destructuringDeclaration142 = None

        destructuringDeclaration146 = None


        char_literal140_tree = None
        LT141_tree = None
        LT143_tree = None
        char_literal144_tree = None
        LT145_tree = None
        LT147_tree = None
        char_literal148_tree = None
        LT149_tree = None
        char_literal150_tree = None
        stream_95 = RewriteRuleTokenStream(self.adaptor, "token 95")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_94 = RewriteRuleTokenStream(self.adaptor, "token 94")
        stream_85 = RewriteRuleTokenStream(self.adaptor, "token 85")
        stream_destructuringDeclaration = RewriteRuleSubtreeStream(self.adaptor, "rule destructuringDeclaration")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 25):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:212:2: ( identifier | '[' ( LT )* ( destructuringDeclaration )? ( ( LT )* ',' ( ( LT )* destructuringDeclaration )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( destructuringDeclaration )* ) )
                alt69 = 2
                LA69_0 = self.input.LA(1)

                if (LA69_0 == Identifier or (87 <= LA69_0 <= 89) or LA69_0 == 93 or LA69_0 == 101 or LA69_0 == 110 or (153 <= LA69_0 <= 154)) :
                    alt69 = 1
                elif (LA69_0 == 94) :
                    alt69 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("211:1: destructuringDeclaration : ( identifier | '[' ( LT )* ( destructuringDeclaration )? ( ( LT )* ',' ( ( LT )* destructuringDeclaration )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( destructuringDeclaration )* ) );", 69, 0, self.input)

                    raise nvae

                if alt69 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:212:4: identifier
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_identifier_in_destructuringDeclaration1154)
                    identifier139 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier139.tree)


                elif alt69 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:4: '[' ( LT )* ( destructuringDeclaration )? ( ( LT )* ',' ( ( LT )* destructuringDeclaration )? )* ( LT )* ( ',' ( LT )* )? ']'
                    char_literal140 = self.input.LT(1)
                    self.match(self.input, 94, self.FOLLOW_94_in_destructuringDeclaration1159)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_94.add(char_literal140)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:8: ( LT )*
                    while True: #loop60
                        alt60 = 2
                        LA60_0 = self.input.LA(1)

                        if (LA60_0 == LT) :
                            LA60_2 = self.input.LA(2)

                            if (self.synpred84()) :
                                alt60 = 1




                        if alt60 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT141 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_destructuringDeclaration1161)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT141)


                        else:
                            break #loop60


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:12: ( destructuringDeclaration )?
                    alt61 = 2
                    LA61_0 = self.input.LA(1)

                    if (LA61_0 == Identifier or (87 <= LA61_0 <= 89) or (93 <= LA61_0 <= 94) or LA61_0 == 101 or LA61_0 == 110 or (153 <= LA61_0 <= 154)) :
                        alt61 = 1
                    if alt61 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: destructuringDeclaration
                        self.following.append(self.FOLLOW_destructuringDeclaration_in_destructuringDeclaration1164)
                        destructuringDeclaration142 = self.destructuringDeclaration()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_destructuringDeclaration.add(destructuringDeclaration142.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:38: ( ( LT )* ',' ( ( LT )* destructuringDeclaration )? )*
                    while True: #loop65
                        alt65 = 2
                        alt65 = self.dfa65.predict(self.input)
                        if alt65 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:39: ( LT )* ',' ( ( LT )* destructuringDeclaration )?
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:39: ( LT )*
                            while True: #loop62
                                alt62 = 2
                                LA62_0 = self.input.LA(1)

                                if (LA62_0 == LT) :
                                    alt62 = 1


                                if alt62 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT143 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_destructuringDeclaration1168)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT143)


                                else:
                                    break #loop62


                            char_literal144 = self.input.LT(1)
                            self.match(self.input, 85, self.FOLLOW_85_in_destructuringDeclaration1171)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_85.add(char_literal144)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:47: ( ( LT )* destructuringDeclaration )?
                            alt64 = 2
                            alt64 = self.dfa64.predict(self.input)
                            if alt64 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:48: ( LT )* destructuringDeclaration
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:48: ( LT )*
                                while True: #loop63
                                    alt63 = 2
                                    LA63_0 = self.input.LA(1)

                                    if (LA63_0 == LT) :
                                        alt63 = 1


                                    if alt63 == 1:
                                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                        LT145 = self.input.LT(1)
                                        self.match(self.input, LT, self.FOLLOW_LT_in_destructuringDeclaration1174)
                                        if self.failed:
                                            return retval
                                        if self.backtracking == 0:
                                            stream_LT.add(LT145)


                                    else:
                                        break #loop63


                                self.following.append(self.FOLLOW_destructuringDeclaration_in_destructuringDeclaration1177)
                                destructuringDeclaration146 = self.destructuringDeclaration()
                                self.following.pop()
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_destructuringDeclaration.add(destructuringDeclaration146.tree)





                        else:
                            break #loop65


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:81: ( LT )*
                    while True: #loop66
                        alt66 = 2
                        LA66_0 = self.input.LA(1)

                        if (LA66_0 == LT) :
                            alt66 = 1


                        if alt66 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT147 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_destructuringDeclaration1183)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT147)


                        else:
                            break #loop66


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:85: ( ',' ( LT )* )?
                    alt68 = 2
                    LA68_0 = self.input.LA(1)

                    if (LA68_0 == 85) :
                        alt68 = 1
                    if alt68 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:86: ',' ( LT )*
                        char_literal148 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_destructuringDeclaration1187)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_85.add(char_literal148)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:90: ( LT )*
                        while True: #loop67
                            alt67 = 2
                            LA67_0 = self.input.LA(1)

                            if (LA67_0 == LT) :
                                alt67 = 1


                            if alt67 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT149 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_destructuringDeclaration1189)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT149)


                            else:
                                break #loop67





                    char_literal150 = self.input.LT(1)
                    self.match(self.input, 95, self.FOLLOW_95_in_destructuringDeclaration1194)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_95.add(char_literal150)
                    # AST Rewrite
                    # elements: destructuringDeclaration
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 214:3: -> ^( ARRAY ( destructuringDeclaration )* )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:214:6: ^( ARRAY ( destructuringDeclaration )* )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAY, "ARRAY"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:214:14: ( destructuringDeclaration )*
                        while stream_destructuringDeclaration.hasNext():
                            self.adaptor.addChild(root_1, stream_destructuringDeclaration.next())


                        stream_destructuringDeclaration.reset();

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 25, destructuringDeclaration_StartIndex)

            pass

        return retval

    # $ANTLR end destructuringDeclaration

    class variableDeclarationNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start variableDeclarationNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:217:1: variableDeclarationNoIn : ( identifier ( ( LT )* initialiserNoIn )? -> ^( VARDEF identifier ( initialiserNoIn )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? ) );
    def variableDeclarationNoIn(self, ):

        retval = self.variableDeclarationNoIn_return()
        retval.start = self.input.LT(1)
        variableDeclarationNoIn_StartIndex = self.input.index()
        root_0 = None

        LT152 = None
        char_literal154 = None
        LT155 = None
        LT157 = None
        char_literal158 = None
        LT159 = None
        LT161 = None
        char_literal162 = None
        LT163 = None
        char_literal164 = None
        LT165 = None
        identifier151 = None

        initialiserNoIn153 = None

        identifier156 = None

        identifier160 = None

        initialiserNoIn166 = None


        LT152_tree = None
        char_literal154_tree = None
        LT155_tree = None
        LT157_tree = None
        char_literal158_tree = None
        LT159_tree = None
        LT161_tree = None
        char_literal162_tree = None
        LT163_tree = None
        char_literal164_tree = None
        LT165_tree = None
        stream_95 = RewriteRuleTokenStream(self.adaptor, "token 95")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_94 = RewriteRuleTokenStream(self.adaptor, "token 94")
        stream_85 = RewriteRuleTokenStream(self.adaptor, "token 85")
        stream_initialiserNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule initialiserNoIn")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 26):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:2: ( identifier ( ( LT )* initialiserNoIn )? -> ^( VARDEF identifier ( initialiserNoIn )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? ) )
                alt83 = 2
                LA83_0 = self.input.LA(1)

                if (LA83_0 == Identifier or (87 <= LA83_0 <= 89) or LA83_0 == 93 or LA83_0 == 101 or LA83_0 == 110 or (153 <= LA83_0 <= 154)) :
                    alt83 = 1
                elif (LA83_0 == 94) :
                    alt83 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("217:1: variableDeclarationNoIn : ( identifier ( ( LT )* initialiserNoIn )? -> ^( VARDEF identifier ( initialiserNoIn )? ) | '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )? -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? ) );", 83, 0, self.input)

                    raise nvae

                if alt83 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:4: identifier ( ( LT )* initialiserNoIn )?
                    self.following.append(self.FOLLOW_identifier_in_variableDeclarationNoIn1217)
                    identifier151 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier151.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:15: ( ( LT )* initialiserNoIn )?
                    alt71 = 2
                    alt71 = self.dfa71.predict(self.input)
                    if alt71 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:16: ( LT )* initialiserNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:218:16: ( LT )*
                        while True: #loop70
                            alt70 = 2
                            LA70_0 = self.input.LA(1)

                            if (LA70_0 == LT) :
                                alt70 = 1


                            if alt70 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT152 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1220)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT152)


                            else:
                                break #loop70


                        self.following.append(self.FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1223)
                        initialiserNoIn153 = self.initialiserNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_initialiserNoIn.add(initialiserNoIn153.tree)



                    # AST Rewrite
                    # elements: initialiserNoIn, identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 219:3: -> ^( VARDEF identifier ( initialiserNoIn )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:219:6: ^( VARDEF identifier ( initialiserNoIn )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEF, "VARDEF"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:219:26: ( initialiserNoIn )?
                        if stream_initialiserNoIn.hasNext():
                            self.adaptor.addChild(root_1, stream_initialiserNoIn.next())


                        stream_initialiserNoIn.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt83 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:4: '[' ( LT )* ( identifier )? ( ( LT )* ',' ( ( LT )* identifier )? )* ( LT )* ( ',' ( LT )* )? ']' ( ( LT )* initialiserNoIn )?
                    char_literal154 = self.input.LT(1)
                    self.match(self.input, 94, self.FOLLOW_94_in_variableDeclarationNoIn1243)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_94.add(char_literal154)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:8: ( LT )*
                    while True: #loop72
                        alt72 = 2
                        LA72_0 = self.input.LA(1)

                        if (LA72_0 == LT) :
                            LA72_2 = self.input.LA(2)

                            if (self.synpred96()) :
                                alt72 = 1




                        if alt72 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT155 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1245)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT155)


                        else:
                            break #loop72


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:12: ( identifier )?
                    alt73 = 2
                    LA73_0 = self.input.LA(1)

                    if (LA73_0 == Identifier or (87 <= LA73_0 <= 89) or LA73_0 == 93 or LA73_0 == 101 or LA73_0 == 110 or (153 <= LA73_0 <= 154)) :
                        alt73 = 1
                    if alt73 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: identifier
                        self.following.append(self.FOLLOW_identifier_in_variableDeclarationNoIn1248)
                        identifier156 = self.identifier()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_identifier.add(identifier156.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:24: ( ( LT )* ',' ( ( LT )* identifier )? )*
                    while True: #loop77
                        alt77 = 2
                        alt77 = self.dfa77.predict(self.input)
                        if alt77 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:25: ( LT )* ',' ( ( LT )* identifier )?
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:25: ( LT )*
                            while True: #loop74
                                alt74 = 2
                                LA74_0 = self.input.LA(1)

                                if (LA74_0 == LT) :
                                    alt74 = 1


                                if alt74 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT157 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1252)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT157)


                                else:
                                    break #loop74


                            char_literal158 = self.input.LT(1)
                            self.match(self.input, 85, self.FOLLOW_85_in_variableDeclarationNoIn1255)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_85.add(char_literal158)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:33: ( ( LT )* identifier )?
                            alt76 = 2
                            alt76 = self.dfa76.predict(self.input)
                            if alt76 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:34: ( LT )* identifier
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:34: ( LT )*
                                while True: #loop75
                                    alt75 = 2
                                    LA75_0 = self.input.LA(1)

                                    if (LA75_0 == LT) :
                                        alt75 = 1


                                    if alt75 == 1:
                                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                        LT159 = self.input.LT(1)
                                        self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1258)
                                        if self.failed:
                                            return retval
                                        if self.backtracking == 0:
                                            stream_LT.add(LT159)


                                    else:
                                        break #loop75


                                self.following.append(self.FOLLOW_identifier_in_variableDeclarationNoIn1261)
                                identifier160 = self.identifier()
                                self.following.pop()
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_identifier.add(identifier160.tree)





                        else:
                            break #loop77


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:53: ( LT )*
                    while True: #loop78
                        alt78 = 2
                        LA78_0 = self.input.LA(1)

                        if (LA78_0 == LT) :
                            alt78 = 1


                        if alt78 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT161 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1267)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT161)


                        else:
                            break #loop78


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:57: ( ',' ( LT )* )?
                    alt80 = 2
                    LA80_0 = self.input.LA(1)

                    if (LA80_0 == 85) :
                        alt80 = 1
                    if alt80 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:58: ',' ( LT )*
                        char_literal162 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_variableDeclarationNoIn1271)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_85.add(char_literal162)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:62: ( LT )*
                        while True: #loop79
                            alt79 = 2
                            LA79_0 = self.input.LA(1)

                            if (LA79_0 == LT) :
                                alt79 = 1


                            if alt79 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT163 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1273)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT163)


                            else:
                                break #loop79





                    char_literal164 = self.input.LT(1)
                    self.match(self.input, 95, self.FOLLOW_95_in_variableDeclarationNoIn1278)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_95.add(char_literal164)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:72: ( ( LT )* initialiserNoIn )?
                    alt82 = 2
                    alt82 = self.dfa82.predict(self.input)
                    if alt82 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:73: ( LT )* initialiserNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:73: ( LT )*
                        while True: #loop81
                            alt81 = 2
                            LA81_0 = self.input.LA(1)

                            if (LA81_0 == LT) :
                                alt81 = 1


                            if alt81 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT165 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_variableDeclarationNoIn1281)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT165)


                            else:
                                break #loop81


                        self.following.append(self.FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1284)
                        initialiserNoIn166 = self.initialiserNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_initialiserNoIn.add(initialiserNoIn166.tree)



                    # AST Rewrite
                    # elements: initialiserNoIn, identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 221:3: -> ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:221:6: ^( VARDEF ^( ARRAY ( identifier )* ) ( initialiserNoIn )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEF, "VARDEF"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:221:15: ^( ARRAY ( identifier )* )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAY, "ARRAY"), root_2)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:221:23: ( identifier )*
                        while stream_identifier.hasNext():
                            self.adaptor.addChild(root_2, stream_identifier.next())


                        stream_identifier.reset();

                        self.adaptor.addChild(root_1, root_2)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:221:36: ( initialiserNoIn )?
                        if stream_initialiserNoIn.hasNext():
                            self.adaptor.addChild(root_1, stream_initialiserNoIn.next())


                        stream_initialiserNoIn.reset();

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 26, variableDeclarationNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end variableDeclarationNoIn

    class initialiser_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start initialiser
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:224:1: initialiser : '=' ( LT )* assignmentExpression -> assignmentExpression ;
    def initialiser(self, ):

        retval = self.initialiser_return()
        retval.start = self.input.LT(1)
        initialiser_StartIndex = self.input.index()
        root_0 = None

        char_literal167 = None
        LT168 = None
        assignmentExpression169 = None


        char_literal167_tree = None
        LT168_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_80 = RewriteRuleTokenStream(self.adaptor, "token 80")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 27):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:225:2: ( '=' ( LT )* assignmentExpression -> assignmentExpression )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:225:4: '=' ( LT )* assignmentExpression
                char_literal167 = self.input.LT(1)
                self.match(self.input, 80, self.FOLLOW_80_in_initialiser1316)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_80.add(char_literal167)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:225:8: ( LT )*
                while True: #loop84
                    alt84 = 2
                    LA84_0 = self.input.LA(1)

                    if (LA84_0 == LT) :
                        LA84_2 = self.input.LA(2)

                        if (self.synpred107()) :
                            alt84 = 1




                    if alt84 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT168 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_initialiser1318)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT168)


                    else:
                        break #loop84


                self.following.append(self.FOLLOW_assignmentExpression_in_initialiser1321)
                assignmentExpression169 = self.assignmentExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_assignmentExpression.add(assignmentExpression169.tree)
                # AST Rewrite
                # elements: assignmentExpression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 226:3: -> assignmentExpression
                    self.adaptor.addChild(root_0, stream_assignmentExpression.next())






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 27, initialiser_StartIndex)

            pass

        return retval

    # $ANTLR end initialiser

    class initialiserNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start initialiserNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:229:1: initialiserNoIn : '=' ( LT )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
    def initialiserNoIn(self, ):

        retval = self.initialiserNoIn_return()
        retval.start = self.input.LT(1)
        initialiserNoIn_StartIndex = self.input.index()
        root_0 = None

        char_literal170 = None
        LT171 = None
        assignmentExpressionNoIn172 = None


        char_literal170_tree = None
        LT171_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_80 = RewriteRuleTokenStream(self.adaptor, "token 80")
        stream_assignmentExpressionNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpressionNoIn")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 28):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:230:2: ( '=' ( LT )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:230:4: '=' ( LT )* assignmentExpressionNoIn
                char_literal170 = self.input.LT(1)
                self.match(self.input, 80, self.FOLLOW_80_in_initialiserNoIn1339)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_80.add(char_literal170)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:230:8: ( LT )*
                while True: #loop85
                    alt85 = 2
                    LA85_0 = self.input.LA(1)

                    if (LA85_0 == LT) :
                        LA85_2 = self.input.LA(2)

                        if (self.synpred108()) :
                            alt85 = 1




                    if alt85 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT171 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_initialiserNoIn1341)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT171)


                    else:
                        break #loop85


                self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1344)
                assignmentExpressionNoIn172 = self.assignmentExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_assignmentExpressionNoIn.add(assignmentExpressionNoIn172.tree)
                # AST Rewrite
                # elements: assignmentExpressionNoIn
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 231:3: -> assignmentExpressionNoIn
                    self.adaptor.addChild(root_0, stream_assignmentExpressionNoIn.next())






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 28, initialiserNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end initialiserNoIn

    class emptyStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start emptyStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:234:1: emptyStatement : ';' ;
    def emptyStatement(self, ):

        retval = self.emptyStatement_return()
        retval.start = self.input.LT(1)
        emptyStatement_StartIndex = self.input.index()
        root_0 = None

        char_literal173 = None

        char_literal173_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 29):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:235:2: ( ';' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:235:4: ';'
                root_0 = self.adaptor.nil()

                char_literal173 = self.input.LT(1)
                self.match(self.input, 74, self.FOLLOW_74_in_emptyStatement1362)
                if self.failed:
                    return retval



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 29, emptyStatement_StartIndex)

            pass

        return retval

    # $ANTLR end emptyStatement

    class expressionStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start expressionStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:238:1: expressionStatement : expression ( LT | ';' ) ;
    def expressionStatement(self, ):

        retval = self.expressionStatement_return()
        retval.start = self.input.LT(1)
        expressionStatement_StartIndex = self.input.index()
        root_0 = None

        set175 = None
        expression174 = None


        set175_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 30):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:239:2: ( expression ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:239:4: expression ( LT | ';' )
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_expression_in_expressionStatement1375)
                expression174 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, expression174.tree)
                set175 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 74:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_expressionStatement1377
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 30, expressionStatement_StartIndex)

            pass

        return retval

    # $ANTLR end expressionStatement

    class ifStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start ifStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:242:1: ifStatement : 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( ( LT )* 'else' ( LT )* statement )? -> ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ ) ;
    def ifStatement(self, ):

        retval = self.ifStatement_return()
        retval.start = self.input.LT(1)
        ifStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal176 = None
        LT177 = None
        char_literal178 = None
        LT179 = None
        LT181 = None
        char_literal182 = None
        LT183 = None
        LT185 = None
        string_literal186 = None
        LT187 = None
        expression180 = None

        statement184 = None

        statement188 = None


        string_literal176_tree = None
        LT177_tree = None
        char_literal178_tree = None
        LT179_tree = None
        LT181_tree = None
        char_literal182_tree = None
        LT183_tree = None
        LT185_tree = None
        string_literal186_tree = None
        LT187_tree = None
        stream_97 = RewriteRuleTokenStream(self.adaptor, "token 97")
        stream_96 = RewriteRuleTokenStream(self.adaptor, "token 96")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 31):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:2: ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( ( LT )* 'else' ( LT )* statement )? -> ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:4: 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement ( ( LT )* 'else' ( LT )* statement )?
                string_literal176 = self.input.LT(1)
                self.match(self.input, 96, self.FOLLOW_96_in_ifStatement1396)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_96.add(string_literal176)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:9: ( LT )*
                while True: #loop86
                    alt86 = 2
                    LA86_0 = self.input.LA(1)

                    if (LA86_0 == LT) :
                        alt86 = 1


                    if alt86 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT177 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1398)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT177)


                    else:
                        break #loop86


                char_literal178 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_ifStatement1401)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal178)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:17: ( LT )*
                while True: #loop87
                    alt87 = 2
                    LA87_0 = self.input.LA(1)

                    if (LA87_0 == LT) :
                        LA87_2 = self.input.LA(2)

                        if (self.synpred111()) :
                            alt87 = 1




                    if alt87 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT179 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1403)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT179)


                    else:
                        break #loop87


                self.following.append(self.FOLLOW_expression_in_ifStatement1406)
                expression180 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression180.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:32: ( LT )*
                while True: #loop88
                    alt88 = 2
                    LA88_0 = self.input.LA(1)

                    if (LA88_0 == LT) :
                        alt88 = 1


                    if alt88 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT181 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1408)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT181)


                    else:
                        break #loop88


                char_literal182 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_ifStatement1411)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal182)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:40: ( LT )*
                while True: #loop89
                    alt89 = 2
                    LA89_0 = self.input.LA(1)

                    if (LA89_0 == LT) :
                        LA89_2 = self.input.LA(2)

                        if (self.synpred113()) :
                            alt89 = 1




                    if alt89 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT183 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1413)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT183)


                    else:
                        break #loop89


                self.following.append(self.FOLLOW_statement_in_ifStatement1416)
                statement184 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement184.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:54: ( ( LT )* 'else' ( LT )* statement )?
                alt92 = 2
                LA92_0 = self.input.LA(1)

                if (LA92_0 == LT) :
                    LA92_1 = self.input.LA(2)

                    if (self.synpred116()) :
                        alt92 = 1
                elif (LA92_0 == 97) :
                    LA92_2 = self.input.LA(2)

                    if (self.synpred116()) :
                        alt92 = 1
                if alt92 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:55: ( LT )* 'else' ( LT )* statement
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:55: ( LT )*
                    while True: #loop90
                        alt90 = 2
                        LA90_0 = self.input.LA(1)

                        if (LA90_0 == LT) :
                            alt90 = 1


                        if alt90 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT185 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1419)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT185)


                        else:
                            break #loop90


                    string_literal186 = self.input.LT(1)
                    self.match(self.input, 97, self.FOLLOW_97_in_ifStatement1422)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_97.add(string_literal186)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:66: ( LT )*
                    while True: #loop91
                        alt91 = 2
                        LA91_0 = self.input.LA(1)

                        if (LA91_0 == LT) :
                            LA91_2 = self.input.LA(2)

                            if (self.synpred115()) :
                                alt91 = 1




                        if alt91 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT187 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_ifStatement1424)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT187)


                        else:
                            break #loop91


                    self.following.append(self.FOLLOW_statement_in_ifStatement1427)
                    statement188 = self.statement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statement.add(statement188.tree)



                # AST Rewrite
                # elements: statement, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 244:3: -> ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:6: ^( COND ^( TEST expression ) ( ^( CODE statement ) )+ )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(COND, "COND"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:13: ^( TEST expression )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_2)

                    self.adaptor.addChild(root_2, stream_expression.next())

                    self.adaptor.addChild(root_1, root_2)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:32: ( ^( CODE statement ) )+
                    if not (stream_statement.hasNext()):
                        raise RewriteEarlyExitException()

                    while stream_statement.hasNext():
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:244:32: ^( CODE statement )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_2)

                        self.adaptor.addChild(root_2, stream_statement.next())

                        self.adaptor.addChild(root_1, root_2)


                    stream_statement.reset()

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 31, ifStatement_StartIndex)

            pass

        return retval

    # $ANTLR end ifStatement

    class iterationStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start iterationStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:247:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
    def iterationStatement(self, ):

        retval = self.iterationStatement_return()
        retval.start = self.input.LT(1)
        iterationStatement_StartIndex = self.input.index()
        root_0 = None

        doWhileStatement189 = None

        whileStatement190 = None

        forStatement191 = None

        forInStatement192 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 32):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
                alt93 = 4
                LA93 = self.input.LA(1)
                if LA93 == 98:
                    alt93 = 1
                elif LA93 == 99:
                    alt93 = 2
                elif LA93 == 100:
                    LA93_3 = self.input.LA(2)

                    if (self.synpred119()) :
                        alt93 = 3
                    elif (True) :
                        alt93 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("247:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );", 93, 3, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("247:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );", 93, 0, self.input)

                    raise nvae

                if alt93 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:248:4: doWhileStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_doWhileStatement_in_iterationStatement1462)
                    doWhileStatement189 = self.doWhileStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, doWhileStatement189.tree)


                elif alt93 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:249:4: whileStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_whileStatement_in_iterationStatement1467)
                    whileStatement190 = self.whileStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, whileStatement190.tree)


                elif alt93 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:250:4: forStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_forStatement_in_iterationStatement1472)
                    forStatement191 = self.forStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, forStatement191.tree)


                elif alt93 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:251:4: forInStatement
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_forInStatement_in_iterationStatement1477)
                    forInStatement192 = self.forInStatement()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, forInStatement192.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 32, iterationStatement_StartIndex)

            pass

        return retval

    # $ANTLR end iterationStatement

    class doWhileStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start doWhileStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:254:1: doWhileStatement : 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' ) -> ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) ) ;
    def doWhileStatement(self, ):

        retval = self.doWhileStatement_return()
        retval.start = self.input.LT(1)
        doWhileStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal193 = None
        LT194 = None
        LT196 = None
        string_literal197 = None
        LT198 = None
        char_literal199 = None
        char_literal201 = None
        LT202 = None
        char_literal203 = None
        statement195 = None

        expression200 = None


        string_literal193_tree = None
        LT194_tree = None
        LT196_tree = None
        string_literal197_tree = None
        LT198_tree = None
        char_literal199_tree = None
        char_literal201_tree = None
        LT202_tree = None
        char_literal203_tree = None
        stream_98 = RewriteRuleTokenStream(self.adaptor, "token 98")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_99 = RewriteRuleTokenStream(self.adaptor, "token 99")
        stream_74 = RewriteRuleTokenStream(self.adaptor, "token 74")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 33):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:2: ( 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' ) -> ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:4: 'do' ( LT )* statement ( LT )* 'while' ( LT )* '(' expression ')' ( LT | ';' )
                string_literal193 = self.input.LT(1)
                self.match(self.input, 98, self.FOLLOW_98_in_doWhileStatement1489)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_98.add(string_literal193)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:9: ( LT )*
                while True: #loop94
                    alt94 = 2
                    LA94_0 = self.input.LA(1)

                    if (LA94_0 == LT) :
                        LA94_2 = self.input.LA(2)

                        if (self.synpred120()) :
                            alt94 = 1




                    if alt94 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT194 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1491)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT194)


                    else:
                        break #loop94


                self.following.append(self.FOLLOW_statement_in_doWhileStatement1494)
                statement195 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement195.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:23: ( LT )*
                while True: #loop95
                    alt95 = 2
                    LA95_0 = self.input.LA(1)

                    if (LA95_0 == LT) :
                        alt95 = 1


                    if alt95 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT196 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1496)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT196)


                    else:
                        break #loop95


                string_literal197 = self.input.LT(1)
                self.match(self.input, 99, self.FOLLOW_99_in_doWhileStatement1499)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_99.add(string_literal197)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:35: ( LT )*
                while True: #loop96
                    alt96 = 2
                    LA96_0 = self.input.LA(1)

                    if (LA96_0 == LT) :
                        alt96 = 1


                    if alt96 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT198 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1501)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT198)


                    else:
                        break #loop96


                char_literal199 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_doWhileStatement1504)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal199)
                self.following.append(self.FOLLOW_expression_in_doWhileStatement1506)
                expression200 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression200.tree)
                char_literal201 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_doWhileStatement1508)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal201)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:58: ( LT | ';' )
                alt97 = 2
                LA97_0 = self.input.LA(1)

                if (LA97_0 == LT) :
                    alt97 = 1
                elif (LA97_0 == 74) :
                    alt97 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("255:58: ( LT | ';' )", 97, 0, self.input)

                    raise nvae

                if alt97 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:59: LT
                    LT202 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_doWhileStatement1511)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT202)


                elif alt97 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:64: ';'
                    char_literal203 = self.input.LT(1)
                    self.match(self.input, 74, self.FOLLOW_74_in_doWhileStatement1515)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_74.add(char_literal203)



                # AST Rewrite
                # elements: expression, statement, 93
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 256:3: -> ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:256:6: ^( SCOPE 'let' NONE ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) ) )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(93, "93"))
                    self.adaptor.addChild(root_1, self.adaptor.createFromType(NONE, "NONE"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:256:25: ^( CONDLOOP ^( CODE statement ) ^( TEST expression ) )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CONDLOOP, "CONDLOOP"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:256:36: ^( CODE statement )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                    self.adaptor.addChild(root_3, stream_statement.next())

                    self.adaptor.addChild(root_2, root_3)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:256:54: ^( TEST expression )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_3)

                    self.adaptor.addChild(root_3, stream_expression.next())

                    self.adaptor.addChild(root_2, root_3)

                    self.adaptor.addChild(root_1, root_2)

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 33, doWhileStatement_StartIndex)

            pass

        return retval

    # $ANTLR end doWhileStatement

    class whileStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start whileStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:259:1: whileStatement : 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( CODE expression ) statement ) ;
    def whileStatement(self, ):

        retval = self.whileStatement_return()
        retval.start = self.input.LT(1)
        whileStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal204 = None
        LT205 = None
        char_literal206 = None
        LT207 = None
        LT209 = None
        char_literal210 = None
        LT211 = None
        expression208 = None

        statement212 = None


        string_literal204_tree = None
        LT205_tree = None
        char_literal206_tree = None
        LT207_tree = None
        LT209_tree = None
        char_literal210_tree = None
        LT211_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_99 = RewriteRuleTokenStream(self.adaptor, "token 99")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 34):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:2: ( 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( CODE expression ) statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:4: 'while' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement
                string_literal204 = self.input.LT(1)
                self.match(self.input, 99, self.FOLLOW_99_in_whileStatement1556)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_99.add(string_literal204)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:12: ( LT )*
                while True: #loop98
                    alt98 = 2
                    LA98_0 = self.input.LA(1)

                    if (LA98_0 == LT) :
                        alt98 = 1


                    if alt98 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT205 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1558)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT205)


                    else:
                        break #loop98


                char_literal206 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_whileStatement1561)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal206)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:20: ( LT )*
                while True: #loop99
                    alt99 = 2
                    LA99_0 = self.input.LA(1)

                    if (LA99_0 == LT) :
                        LA99_2 = self.input.LA(2)

                        if (self.synpred125()) :
                            alt99 = 1




                    if alt99 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT207 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1563)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT207)


                    else:
                        break #loop99


                self.following.append(self.FOLLOW_expression_in_whileStatement1566)
                expression208 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression208.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:35: ( LT )*
                while True: #loop100
                    alt100 = 2
                    LA100_0 = self.input.LA(1)

                    if (LA100_0 == LT) :
                        alt100 = 1


                    if alt100 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT209 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1568)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT209)


                    else:
                        break #loop100


                char_literal210 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_whileStatement1571)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal210)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:43: ( LT )*
                while True: #loop101
                    alt101 = 2
                    LA101_0 = self.input.LA(1)

                    if (LA101_0 == LT) :
                        LA101_2 = self.input.LA(2)

                        if (self.synpred127()) :
                            alt101 = 1




                    if alt101 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT211 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_whileStatement1573)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT211)


                    else:
                        break #loop101


                self.following.append(self.FOLLOW_statement_in_whileStatement1576)
                statement212 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement212.tree)
                # AST Rewrite
                # elements: statement, 93, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 261:3: -> ^( SCOPE 'let' ^( CODE expression ) statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:261:6: ^( SCOPE 'let' ^( CODE expression ) statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(93, "93"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:261:20: ^( CODE expression )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_2)

                    self.adaptor.addChild(root_2, stream_expression.next())

                    self.adaptor.addChild(root_1, root_2)
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 34, whileStatement_StartIndex)

            pass

        return retval

    # $ANTLR end whileStatement

    class forStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:264:1: forStatement : 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* test= expression )? ( LT )* ';' ( ( LT )* update= expression )? ( LT )* ')' ( LT )* body= statement -> ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) ) ;
    def forStatement(self, ):

        retval = self.forStatement_return()
        retval.start = self.input.LT(1)
        forStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal213 = None
        LT214 = None
        char_literal215 = None
        LT216 = None
        LT218 = None
        char_literal219 = None
        LT220 = None
        LT221 = None
        char_literal222 = None
        LT223 = None
        LT224 = None
        char_literal225 = None
        LT226 = None
        test = None

        update = None

        body = None

        forStatementInitialiserPart217 = None


        string_literal213_tree = None
        LT214_tree = None
        char_literal215_tree = None
        LT216_tree = None
        LT218_tree = None
        char_literal219_tree = None
        LT220_tree = None
        LT221_tree = None
        char_literal222_tree = None
        LT223_tree = None
        LT224_tree = None
        char_literal225_tree = None
        LT226_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_74 = RewriteRuleTokenStream(self.adaptor, "token 74")
        stream_100 = RewriteRuleTokenStream(self.adaptor, "token 100")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_forStatementInitialiserPart = RewriteRuleSubtreeStream(self.adaptor, "rule forStatementInitialiserPart")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 35):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:2: ( 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* test= expression )? ( LT )* ';' ( ( LT )* update= expression )? ( LT )* ')' ( LT )* body= statement -> ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:4: 'for' ( LT )* '(' ( ( LT )* forStatementInitialiserPart )? ( LT )* ';' ( ( LT )* test= expression )? ( LT )* ';' ( ( LT )* update= expression )? ( LT )* ')' ( LT )* body= statement
                string_literal213 = self.input.LT(1)
                self.match(self.input, 100, self.FOLLOW_100_in_forStatement1606)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_100.add(string_literal213)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:10: ( LT )*
                while True: #loop102
                    alt102 = 2
                    LA102_0 = self.input.LA(1)

                    if (LA102_0 == LT) :
                        alt102 = 1


                    if alt102 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT214 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1608)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT214)


                    else:
                        break #loop102


                char_literal215 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_forStatement1611)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal215)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:18: ( ( LT )* forStatementInitialiserPart )?
                alt104 = 2
                alt104 = self.dfa104.predict(self.input)
                if alt104 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:19: ( LT )* forStatementInitialiserPart
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:19: ( LT )*
                    while True: #loop103
                        alt103 = 2
                        LA103_0 = self.input.LA(1)

                        if (LA103_0 == LT) :
                            LA103_2 = self.input.LA(2)

                            if (self.synpred129()) :
                                alt103 = 1




                        if alt103 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT216 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1614)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT216)


                        else:
                            break #loop103


                    self.following.append(self.FOLLOW_forStatementInitialiserPart_in_forStatement1617)
                    forStatementInitialiserPart217 = self.forStatementInitialiserPart()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_forStatementInitialiserPart.add(forStatementInitialiserPart217.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:53: ( LT )*
                while True: #loop105
                    alt105 = 2
                    LA105_0 = self.input.LA(1)

                    if (LA105_0 == LT) :
                        alt105 = 1


                    if alt105 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT218 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1621)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT218)


                    else:
                        break #loop105


                char_literal219 = self.input.LT(1)
                self.match(self.input, 74, self.FOLLOW_74_in_forStatement1624)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_74.add(char_literal219)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:61: ( ( LT )* test= expression )?
                alt107 = 2
                alt107 = self.dfa107.predict(self.input)
                if alt107 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:62: ( LT )* test= expression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:62: ( LT )*
                    while True: #loop106
                        alt106 = 2
                        LA106_0 = self.input.LA(1)

                        if (LA106_0 == LT) :
                            LA106_2 = self.input.LA(2)

                            if (self.synpred132()) :
                                alt106 = 1




                        if alt106 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT220 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1627)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT220)


                        else:
                            break #loop106


                    self.following.append(self.FOLLOW_expression_in_forStatement1632)
                    test = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(test.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:84: ( LT )*
                while True: #loop108
                    alt108 = 2
                    LA108_0 = self.input.LA(1)

                    if (LA108_0 == LT) :
                        alt108 = 1


                    if alt108 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT221 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1636)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT221)


                    else:
                        break #loop108


                char_literal222 = self.input.LT(1)
                self.match(self.input, 74, self.FOLLOW_74_in_forStatement1639)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_74.add(char_literal222)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:92: ( ( LT )* update= expression )?
                alt110 = 2
                alt110 = self.dfa110.predict(self.input)
                if alt110 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:93: ( LT )* update= expression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:93: ( LT )*
                    while True: #loop109
                        alt109 = 2
                        LA109_0 = self.input.LA(1)

                        if (LA109_0 == LT) :
                            LA109_2 = self.input.LA(2)

                            if (self.synpred135()) :
                                alt109 = 1




                        if alt109 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT223 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1642)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT223)


                        else:
                            break #loop109


                    self.following.append(self.FOLLOW_expression_in_forStatement1647)
                    update = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(update.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:117: ( LT )*
                while True: #loop111
                    alt111 = 2
                    LA111_0 = self.input.LA(1)

                    if (LA111_0 == LT) :
                        alt111 = 1


                    if alt111 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT224 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1651)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT224)


                    else:
                        break #loop111


                char_literal225 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_forStatement1654)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal225)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:125: ( LT )*
                while True: #loop112
                    alt112 = 2
                    LA112_0 = self.input.LA(1)

                    if (LA112_0 == LT) :
                        LA112_2 = self.input.LA(2)

                        if (self.synpred138()) :
                            alt112 = 1




                    if alt112 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT226 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forStatement1656)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT226)


                    else:
                        break #loop112


                self.following.append(self.FOLLOW_statement_in_forStatement1661)
                body = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(body.tree)
                # AST Rewrite
                # elements: update, 93, body, test, forStatementInitialiserPart
                # token labels: 
                # rule labels: update, body, retval, test
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if update is not None:
                        stream_update = RewriteRuleSubtreeStream(self.adaptor, "token update", update.tree)
                    else:
                        stream_update = RewriteRuleSubtreeStream(self.adaptor, "token update", None)


                    if body is not None:
                        stream_body = RewriteRuleSubtreeStream(self.adaptor, "token body", body.tree)
                    else:
                        stream_body = RewriteRuleSubtreeStream(self.adaptor, "token body", None)


                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    if test is not None:
                        stream_test = RewriteRuleSubtreeStream(self.adaptor, "token test", test.tree)
                    else:
                        stream_test = RewriteRuleSubtreeStream(self.adaptor, "token test", None)


                    root_0 = self.adaptor.nil()
                    # 266:3: -> ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:6: ^( SCOPE 'let' ^( CODE ( forStatementInitialiserPart )? ) ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? ) )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(93, "93"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:20: ^( CODE ( forStatementInitialiserPart )? )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:27: ( forStatementInitialiserPart )?
                    if stream_forStatementInitialiserPart.hasNext():
                        self.adaptor.addChild(root_2, stream_forStatementInitialiserPart.next())


                    stream_forStatementInitialiserPart.reset();

                    self.adaptor.addChild(root_1, root_2)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:57: ^( CONDLOOP ( ^( TEST $test) )? ^( CODE $body) ( ^( CODE $update) )? )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CONDLOOP, "CONDLOOP"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:68: ( ^( TEST $test) )?
                    if stream_test.hasNext():
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:68: ^( TEST $test)
                        root_3 = self.adaptor.nil()
                        root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_3)

                        self.adaptor.addChild(root_3, stream_test.next())

                        self.adaptor.addChild(root_2, root_3)


                    stream_test.reset();
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:83: ^( CODE $body)
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                    self.adaptor.addChild(root_3, stream_body.next())

                    self.adaptor.addChild(root_2, root_3)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:97: ( ^( CODE $update) )?
                    if stream_update.hasNext():
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:266:97: ^( CODE $update)
                        root_3 = self.adaptor.nil()
                        root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                        self.adaptor.addChild(root_3, stream_update.next())

                        self.adaptor.addChild(root_2, root_3)


                    stream_update.reset();

                    self.adaptor.addChild(root_1, root_2)

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 35, forStatement_StartIndex)

            pass

        return retval

    # $ANTLR end forStatement

    class forStatementInitialiserPart_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forStatementInitialiserPart
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:269:1: forStatementInitialiserPart : ( expressionNoIn | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationListNoIn -> ^( VARDEFS $mod variableDeclarationListNoIn ) );
    def forStatementInitialiserPart(self, ):

        retval = self.forStatementInitialiserPart_return()
        retval.start = self.input.LT(1)
        forStatementInitialiserPart_StartIndex = self.input.index()
        root_0 = None

        mod = None
        LT228 = None
        expressionNoIn227 = None

        variableDeclarationListNoIn229 = None


        mod_tree = None
        LT228_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_variableDeclarationListNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationListNoIn")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 36):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:2: ( expressionNoIn | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationListNoIn -> ^( VARDEFS $mod variableDeclarationListNoIn ) )
                alt115 = 2
                alt115 = self.dfa115.predict(self.input)
                if alt115 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:4: expressionNoIn
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_expressionNoIn_in_forStatementInitialiserPart1717)
                    expressionNoIn227 = self.expressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, expressionNoIn227.tree)


                elif alt115 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:271:4: (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationListNoIn
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:271:4: (mod= 'var' | mod= 'let' )
                    alt113 = 2
                    LA113_0 = self.input.LA(1)

                    if (LA113_0 == 91) :
                        alt113 = 1
                    elif (LA113_0 == 93) :
                        alt113 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("271:4: (mod= 'var' | mod= 'let' )", 113, 0, self.input)

                        raise nvae

                    if alt113 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:271:5: mod= 'var'
                        mod = self.input.LT(1)
                        self.match(self.input, 91, self.FOLLOW_91_in_forStatementInitialiserPart1725)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_91.add(mod)


                    elif alt113 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:271:15: mod= 'let'
                        mod = self.input.LT(1)
                        self.match(self.input, 93, self.FOLLOW_93_in_forStatementInitialiserPart1729)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_93.add(mod)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:271:26: ( LT )*
                    while True: #loop114
                        alt114 = 2
                        LA114_0 = self.input.LA(1)

                        if (LA114_0 == LT) :
                            alt114 = 1


                        if alt114 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT228 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forStatementInitialiserPart1732)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT228)


                        else:
                            break #loop114


                    self.following.append(self.FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1735)
                    variableDeclarationListNoIn229 = self.variableDeclarationListNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationListNoIn.add(variableDeclarationListNoIn229.tree)
                    # AST Rewrite
                    # elements: variableDeclarationListNoIn, mod
                    # token labels: mod
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_mod = RewriteRuleTokenStream(self.adaptor, "token mod", mod)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 272:3: -> ^( VARDEFS $mod variableDeclarationListNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:272:6: ^( VARDEFS $mod variableDeclarationListNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_1)

                        self.adaptor.addChild(root_1, stream_mod.next())
                        self.adaptor.addChild(root_1, stream_variableDeclarationListNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 36, forStatementInitialiserPart_StartIndex)

            pass

        return retval

    # $ANTLR end forStatementInitialiserPart

    class forInStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forInStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:275:1: forInStatement : 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement ) ;
    def forInStatement(self, ):

        retval = self.forInStatement_return()
        retval.start = self.input.LT(1)
        forInStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal230 = None
        LT231 = None
        string_literal232 = None
        LT233 = None
        char_literal234 = None
        LT235 = None
        LT237 = None
        string_literal238 = None
        LT239 = None
        LT241 = None
        char_literal242 = None
        LT243 = None
        forInStatementInitialiserPart236 = None

        expression240 = None

        statement244 = None


        string_literal230_tree = None
        LT231_tree = None
        string_literal232_tree = None
        LT233_tree = None
        char_literal234_tree = None
        LT235_tree = None
        LT237_tree = None
        string_literal238_tree = None
        LT239_tree = None
        LT241_tree = None
        char_literal242_tree = None
        LT243_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_102 = RewriteRuleTokenStream(self.adaptor, "token 102")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_101 = RewriteRuleTokenStream(self.adaptor, "token 101")
        stream_100 = RewriteRuleTokenStream(self.adaptor, "token 100")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_forInStatementInitialiserPart = RewriteRuleSubtreeStream(self.adaptor, "rule forInStatementInitialiserPart")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 37):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:2: ( 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:4: 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* forInStatementInitialiserPart ( LT )* 'in' ( LT )* expression ( LT )* ')' ( LT )* statement
                string_literal230 = self.input.LT(1)
                self.match(self.input, 100, self.FOLLOW_100_in_forInStatement1760)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_100.add(string_literal230)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:10: ( LT )*
                while True: #loop116
                    alt116 = 2
                    LA116_0 = self.input.LA(1)

                    if (LA116_0 == LT) :
                        LA116_2 = self.input.LA(2)

                        if (self.synpred142()) :
                            alt116 = 1




                    if alt116 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT231 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1762)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT231)


                    else:
                        break #loop116


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:14: ( 'each' )?
                alt117 = 2
                LA117_0 = self.input.LA(1)

                if (LA117_0 == 101) :
                    alt117 = 1
                if alt117 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: 'each'
                    string_literal232 = self.input.LT(1)
                    self.match(self.input, 101, self.FOLLOW_101_in_forInStatement1765)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_101.add(string_literal232)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:22: ( LT )*
                while True: #loop118
                    alt118 = 2
                    LA118_0 = self.input.LA(1)

                    if (LA118_0 == LT) :
                        alt118 = 1


                    if alt118 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT233 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1768)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT233)


                    else:
                        break #loop118


                char_literal234 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_forInStatement1771)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal234)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:30: ( LT )*
                while True: #loop119
                    alt119 = 2
                    LA119_0 = self.input.LA(1)

                    if (LA119_0 == LT) :
                        LA119_2 = self.input.LA(2)

                        if (self.synpred145()) :
                            alt119 = 1




                    if alt119 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT235 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1773)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT235)


                    else:
                        break #loop119


                self.following.append(self.FOLLOW_forInStatementInitialiserPart_in_forInStatement1776)
                forInStatementInitialiserPart236 = self.forInStatementInitialiserPart()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_forInStatementInitialiserPart.add(forInStatementInitialiserPart236.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:64: ( LT )*
                while True: #loop120
                    alt120 = 2
                    LA120_0 = self.input.LA(1)

                    if (LA120_0 == LT) :
                        alt120 = 1


                    if alt120 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT237 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1778)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT237)


                    else:
                        break #loop120


                string_literal238 = self.input.LT(1)
                self.match(self.input, 102, self.FOLLOW_102_in_forInStatement1781)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_102.add(string_literal238)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:73: ( LT )*
                while True: #loop121
                    alt121 = 2
                    LA121_0 = self.input.LA(1)

                    if (LA121_0 == LT) :
                        LA121_2 = self.input.LA(2)

                        if (self.synpred147()) :
                            alt121 = 1




                    if alt121 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT239 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1783)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT239)


                    else:
                        break #loop121


                self.following.append(self.FOLLOW_expression_in_forInStatement1786)
                expression240 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression240.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:88: ( LT )*
                while True: #loop122
                    alt122 = 2
                    LA122_0 = self.input.LA(1)

                    if (LA122_0 == LT) :
                        alt122 = 1


                    if alt122 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT241 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1788)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT241)


                    else:
                        break #loop122


                char_literal242 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_forInStatement1791)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal242)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:96: ( LT )*
                while True: #loop123
                    alt123 = 2
                    LA123_0 = self.input.LA(1)

                    if (LA123_0 == LT) :
                        LA123_2 = self.input.LA(2)

                        if (self.synpred149()) :
                            alt123 = 1




                    if alt123 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT243 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_forInStatement1793)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT243)


                    else:
                        break #loop123


                self.following.append(self.FOLLOW_statement_in_forInStatement1796)
                statement244 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement244.tree)
                # AST Rewrite
                # elements: 93, expression, statement, forInStatementInitialiserPart
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 277:3: -> ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:277:6: ^( SCOPE 'let' ^( IN forInStatementInitialiserPart expression ) statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(93, "93"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:277:20: ^( IN forInStatementInitialiserPart expression )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(IN, "IN"), root_2)

                    self.adaptor.addChild(root_2, stream_forInStatementInitialiserPart.next())
                    self.adaptor.addChild(root_2, stream_expression.next())

                    self.adaptor.addChild(root_1, root_2)
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 37, forInStatement_StartIndex)

            pass

        return retval

    # $ANTLR end forInStatement

    class forInStatementInitialiserPart_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start forInStatementInitialiserPart
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:280:1: forInStatementInitialiserPart : ( leftHandSideExpression | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationNoIn -> ^( VARDEFS $mod variableDeclarationNoIn ) );
    def forInStatementInitialiserPart(self, ):

        retval = self.forInStatementInitialiserPart_return()
        retval.start = self.input.LT(1)
        forInStatementInitialiserPart_StartIndex = self.input.index()
        root_0 = None

        mod = None
        LT246 = None
        leftHandSideExpression245 = None

        variableDeclarationNoIn247 = None


        mod_tree = None
        LT246_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_91 = RewriteRuleTokenStream(self.adaptor, "token 91")
        stream_variableDeclarationNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationNoIn")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 38):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:281:2: ( leftHandSideExpression | (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationNoIn -> ^( VARDEFS $mod variableDeclarationNoIn ) )
                alt126 = 2
                alt126 = self.dfa126.predict(self.input)
                if alt126 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:281:4: leftHandSideExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1828)
                    leftHandSideExpression245 = self.leftHandSideExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, leftHandSideExpression245.tree)


                elif alt126 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:282:4: (mod= 'var' | mod= 'let' ) ( LT )* variableDeclarationNoIn
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:282:4: (mod= 'var' | mod= 'let' )
                    alt124 = 2
                    LA124_0 = self.input.LA(1)

                    if (LA124_0 == 91) :
                        alt124 = 1
                    elif (LA124_0 == 93) :
                        alt124 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("282:4: (mod= 'var' | mod= 'let' )", 124, 0, self.input)

                        raise nvae

                    if alt124 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:282:5: mod= 'var'
                        mod = self.input.LT(1)
                        self.match(self.input, 91, self.FOLLOW_91_in_forInStatementInitialiserPart1836)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_91.add(mod)


                    elif alt124 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:282:15: mod= 'let'
                        mod = self.input.LT(1)
                        self.match(self.input, 93, self.FOLLOW_93_in_forInStatementInitialiserPart1840)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_93.add(mod)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:282:26: ( LT )*
                    while True: #loop125
                        alt125 = 2
                        LA125_0 = self.input.LA(1)

                        if (LA125_0 == LT) :
                            alt125 = 1


                        if alt125 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT246 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_forInStatementInitialiserPart1843)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT246)


                        else:
                            break #loop125


                    self.following.append(self.FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1846)
                    variableDeclarationNoIn247 = self.variableDeclarationNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationNoIn.add(variableDeclarationNoIn247.tree)
                    # AST Rewrite
                    # elements: mod, variableDeclarationNoIn
                    # token labels: mod
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_mod = RewriteRuleTokenStream(self.adaptor, "token mod", mod)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 283:3: -> ^( VARDEFS $mod variableDeclarationNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:283:6: ^( VARDEFS $mod variableDeclarationNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_1)

                        self.adaptor.addChild(root_1, stream_mod.next())
                        self.adaptor.addChild(root_1, stream_variableDeclarationNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 38, forInStatementInitialiserPart_StartIndex)

            pass

        return retval

    # $ANTLR end forInStatementInitialiserPart

    class continueStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start continueStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:286:1: continueStatement : 'continue' ( identifier )? ( LT | ';' ) ;
    def continueStatement(self, ):

        retval = self.continueStatement_return()
        retval.start = self.input.LT(1)
        continueStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal248 = None
        set250 = None
        identifier249 = None


        string_literal248_tree = None
        set250_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 39):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:287:2: ( 'continue' ( identifier )? ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:287:4: 'continue' ( identifier )? ( LT | ';' )
                root_0 = self.adaptor.nil()

                string_literal248 = self.input.LT(1)
                self.match(self.input, 103, self.FOLLOW_103_in_continueStatement1870)
                if self.failed:
                    return retval

                string_literal248_tree = self.adaptor.createWithPayload(string_literal248)
                self.adaptor.addChild(root_0, string_literal248_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:287:15: ( identifier )?
                alt127 = 2
                LA127_0 = self.input.LA(1)

                if (LA127_0 == Identifier or (87 <= LA127_0 <= 89) or LA127_0 == 93 or LA127_0 == 101 or LA127_0 == 110 or (153 <= LA127_0 <= 154)) :
                    alt127 = 1
                if alt127 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: identifier
                    self.following.append(self.FOLLOW_identifier_in_continueStatement1872)
                    identifier249 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier249.tree)



                set250 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 74:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_continueStatement1875
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 39, continueStatement_StartIndex)

            pass

        return retval

    # $ANTLR end continueStatement

    class breakStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start breakStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:290:1: breakStatement : 'break' ( identifier )? ( LT | ';' ) ;
    def breakStatement(self, ):

        retval = self.breakStatement_return()
        retval.start = self.input.LT(1)
        breakStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal251 = None
        set253 = None
        identifier252 = None


        string_literal251_tree = None
        set253_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 40):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:291:2: ( 'break' ( identifier )? ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:291:4: 'break' ( identifier )? ( LT | ';' )
                root_0 = self.adaptor.nil()

                string_literal251 = self.input.LT(1)
                self.match(self.input, 104, self.FOLLOW_104_in_breakStatement1893)
                if self.failed:
                    return retval

                string_literal251_tree = self.adaptor.createWithPayload(string_literal251)
                self.adaptor.addChild(root_0, string_literal251_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:291:12: ( identifier )?
                alt128 = 2
                LA128_0 = self.input.LA(1)

                if (LA128_0 == Identifier or (87 <= LA128_0 <= 89) or LA128_0 == 93 or LA128_0 == 101 or LA128_0 == 110 or (153 <= LA128_0 <= 154)) :
                    alt128 = 1
                if alt128 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: identifier
                    self.following.append(self.FOLLOW_identifier_in_breakStatement1895)
                    identifier252 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier252.tree)



                set253 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 74:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_breakStatement1898
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 40, breakStatement_StartIndex)

            pass

        return retval

    # $ANTLR end breakStatement

    class returnStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start returnStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:294:1: returnStatement : 'return' ( expression )? ( LT | ';' ) -> ^( RETURN ( expression )? ) ;
    def returnStatement(self, ):

        retval = self.returnStatement_return()
        retval.start = self.input.LT(1)
        returnStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal254 = None
        LT256 = None
        char_literal257 = None
        expression255 = None


        string_literal254_tree = None
        LT256_tree = None
        char_literal257_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_90 = RewriteRuleTokenStream(self.adaptor, "token 90")
        stream_74 = RewriteRuleTokenStream(self.adaptor, "token 74")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 41):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:2: ( 'return' ( expression )? ( LT | ';' ) -> ^( RETURN ( expression )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:4: 'return' ( expression )? ( LT | ';' )
                string_literal254 = self.input.LT(1)
                self.match(self.input, 90, self.FOLLOW_90_in_returnStatement1916)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_90.add(string_literal254)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:13: ( expression )?
                alt129 = 2
                LA129_0 = self.input.LA(1)

                if ((StringLiteral <= LA129_0 <= RegularExpressionHacks) or LA129_0 == 75 or LA129_0 == 77 or LA129_0 == 79 or LA129_0 == 81 or (83 <= LA129_0 <= 84) or (87 <= LA129_0 <= 89) or (93 <= LA129_0 <= 94) or LA129_0 == 101 or LA129_0 == 110 or LA129_0 == 113 or LA129_0 == 143 or (145 <= LA129_0 <= 157)) :
                    alt129 = 1
                elif (LA129_0 == LT) :
                    LA129_2 = self.input.LA(2)

                    if (self.synpred157()) :
                        alt129 = 1
                if alt129 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: expression
                    self.following.append(self.FOLLOW_expression_in_returnStatement1918)
                    expression255 = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(expression255.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:25: ( LT | ';' )
                alt130 = 2
                LA130_0 = self.input.LA(1)

                if (LA130_0 == LT) :
                    alt130 = 1
                elif (LA130_0 == 74) :
                    alt130 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("295:25: ( LT | ';' )", 130, 0, self.input)

                    raise nvae

                if alt130 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:26: LT
                    LT256 = self.input.LT(1)
                    self.match(self.input, LT, self.FOLLOW_LT_in_returnStatement1922)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_LT.add(LT256)


                elif alt130 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:31: ';'
                    char_literal257 = self.input.LT(1)
                    self.match(self.input, 74, self.FOLLOW_74_in_returnStatement1926)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_74.add(char_literal257)



                # AST Rewrite
                # elements: expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 296:3: -> ^( RETURN ( expression )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:296:6: ^( RETURN ( expression )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(RETURN, "RETURN"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:296:15: ( expression )?
                    if stream_expression.hasNext():
                        self.adaptor.addChild(root_1, stream_expression.next())


                    stream_expression.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 41, returnStatement_StartIndex)

            pass

        return retval

    # $ANTLR end returnStatement

    class withStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start withStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:299:1: withStatement : 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WITH expression statement ) ;
    def withStatement(self, ):

        retval = self.withStatement_return()
        retval.start = self.input.LT(1)
        withStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal258 = None
        LT259 = None
        char_literal260 = None
        LT261 = None
        LT263 = None
        char_literal264 = None
        LT265 = None
        expression262 = None

        statement266 = None


        string_literal258_tree = None
        LT259_tree = None
        char_literal260_tree = None
        LT261_tree = None
        LT263_tree = None
        char_literal264_tree = None
        LT265_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_105 = RewriteRuleTokenStream(self.adaptor, "token 105")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 42):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:2: ( 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement -> ^( WITH expression statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:4: 'with' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* statement
                string_literal258 = self.input.LT(1)
                self.match(self.input, 105, self.FOLLOW_105_in_withStatement1950)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_105.add(string_literal258)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:11: ( LT )*
                while True: #loop131
                    alt131 = 2
                    LA131_0 = self.input.LA(1)

                    if (LA131_0 == LT) :
                        alt131 = 1


                    if alt131 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT259 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1952)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT259)


                    else:
                        break #loop131


                char_literal260 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_withStatement1955)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal260)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:19: ( LT )*
                while True: #loop132
                    alt132 = 2
                    LA132_0 = self.input.LA(1)

                    if (LA132_0 == LT) :
                        LA132_2 = self.input.LA(2)

                        if (self.synpred160()) :
                            alt132 = 1




                    if alt132 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT261 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1957)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT261)


                    else:
                        break #loop132


                self.following.append(self.FOLLOW_expression_in_withStatement1960)
                expression262 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression262.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:34: ( LT )*
                while True: #loop133
                    alt133 = 2
                    LA133_0 = self.input.LA(1)

                    if (LA133_0 == LT) :
                        alt133 = 1


                    if alt133 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT263 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1962)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT263)


                    else:
                        break #loop133


                char_literal264 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_withStatement1965)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal264)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:42: ( LT )*
                while True: #loop134
                    alt134 = 2
                    LA134_0 = self.input.LA(1)

                    if (LA134_0 == LT) :
                        LA134_2 = self.input.LA(2)

                        if (self.synpred162()) :
                            alt134 = 1




                    if alt134 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT265 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_withStatement1967)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT265)


                    else:
                        break #loop134


                self.following.append(self.FOLLOW_statement_in_withStatement1970)
                statement266 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement266.tree)
                # AST Rewrite
                # elements: statement, expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 301:3: -> ^( WITH expression statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:301:6: ^( WITH expression statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(WITH, "WITH"), root_1)

                    self.adaptor.addChild(root_1, stream_expression.next())
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 42, withStatement_StartIndex)

            pass

        return retval

    # $ANTLR end withStatement

    class letStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start letStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:304:1: letStatement : let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* statement -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement ) ;
    def letStatement(self, ):

        retval = self.letStatement_return()
        retval.start = self.input.LT(1)
        letStatement_StartIndex = self.input.index()
        root_0 = None

        let = None
        LT267 = None
        char_literal268 = None
        LT269 = None
        LT271 = None
        char_literal272 = None
        LT273 = None
        variableDeclarationList270 = None

        statement274 = None


        let_tree = None
        LT267_tree = None
        char_literal268_tree = None
        LT269_tree = None
        LT271_tree = None
        char_literal272_tree = None
        LT273_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_statement = RewriteRuleSubtreeStream(self.adaptor, "rule statement")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 43):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:2: (let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* statement -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:4: let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* statement
                let = self.input.LT(1)
                self.match(self.input, 93, self.FOLLOW_93_in_letStatement1995)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_93.add(let)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:14: ( LT )*
                while True: #loop135
                    alt135 = 2
                    LA135_0 = self.input.LA(1)

                    if (LA135_0 == LT) :
                        alt135 = 1


                    if alt135 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT267 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement1997)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT267)


                    else:
                        break #loop135


                char_literal268 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_letStatement2000)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal268)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:22: ( LT )*
                while True: #loop136
                    alt136 = 2
                    LA136_0 = self.input.LA(1)

                    if (LA136_0 == LT) :
                        alt136 = 1


                    if alt136 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT269 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement2002)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT269)


                    else:
                        break #loop136


                self.following.append(self.FOLLOW_variableDeclarationList_in_letStatement2005)
                variableDeclarationList270 = self.variableDeclarationList()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_variableDeclarationList.add(variableDeclarationList270.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:50: ( LT )*
                while True: #loop137
                    alt137 = 2
                    LA137_0 = self.input.LA(1)

                    if (LA137_0 == LT) :
                        alt137 = 1


                    if alt137 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT271 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement2007)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT271)


                    else:
                        break #loop137


                char_literal272 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_letStatement2010)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal272)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:58: ( LT )*
                while True: #loop138
                    alt138 = 2
                    LA138_0 = self.input.LA(1)

                    if (LA138_0 == LT) :
                        LA138_2 = self.input.LA(2)

                        if (self.synpred166()) :
                            alt138 = 1




                    if alt138 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT273 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_letStatement2012)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT273)


                    else:
                        break #loop138


                self.following.append(self.FOLLOW_statement_in_letStatement2015)
                statement274 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statement.add(statement274.tree)
                # AST Rewrite
                # elements: let, variableDeclarationList, statement, let
                # token labels: let
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0
                    stream_let = RewriteRuleTokenStream(self.adaptor, "token let", let)

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 306:3: -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:306:6: ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) statement )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, stream_let.next())
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:306:19: ^( VARDEFS $let variableDeclarationList )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_2)

                    self.adaptor.addChild(root_2, stream_let.next())
                    self.adaptor.addChild(root_2, stream_variableDeclarationList.next())

                    self.adaptor.addChild(root_1, root_2)
                    self.adaptor.addChild(root_1, stream_statement.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 43, letStatement_StartIndex)

            pass

        return retval

    # $ANTLR end letStatement

    class labelledStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start labelledStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:309:1: labelledStatement : identifier ( LT )* ':' ( LT )* statement ;
    def labelledStatement(self, ):

        retval = self.labelledStatement_return()
        retval.start = self.input.LT(1)
        labelledStatement_StartIndex = self.input.index()
        root_0 = None

        LT276 = None
        char_literal277 = None
        LT278 = None
        identifier275 = None

        statement279 = None


        LT276_tree = None
        char_literal277_tree = None
        LT278_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 44):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:2: ( identifier ( LT )* ':' ( LT )* statement )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:4: identifier ( LT )* ':' ( LT )* statement
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_identifier_in_labelledStatement2048)
                identifier275 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, identifier275.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:17: ( LT )*
                while True: #loop139
                    alt139 = 2
                    LA139_0 = self.input.LA(1)

                    if (LA139_0 == LT) :
                        alt139 = 1


                    if alt139 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT276 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_labelledStatement2050)
                        if self.failed:
                            return retval


                    else:
                        break #loop139


                char_literal277 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_labelledStatement2054)
                if self.failed:
                    return retval

                char_literal277_tree = self.adaptor.createWithPayload(char_literal277)
                self.adaptor.addChild(root_0, char_literal277_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:26: ( LT )*
                while True: #loop140
                    alt140 = 2
                    LA140_0 = self.input.LA(1)

                    if (LA140_0 == LT) :
                        LA140_2 = self.input.LA(2)

                        if (self.synpred168()) :
                            alt140 = 1




                    if alt140 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT278 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_labelledStatement2056)
                        if self.failed:
                            return retval


                    else:
                        break #loop140


                self.following.append(self.FOLLOW_statement_in_labelledStatement2060)
                statement279 = self.statement()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statement279.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 44, labelledStatement_StartIndex)

            pass

        return retval

    # $ANTLR end labelledStatement

    class switchStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start switchStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:314:1: switchStatement : 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock -> ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) ) ;
    def switchStatement(self, ):

        retval = self.switchStatement_return()
        retval.start = self.input.LT(1)
        switchStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal280 = None
        LT281 = None
        char_literal282 = None
        LT283 = None
        LT285 = None
        char_literal286 = None
        LT287 = None
        expression284 = None

        caseBlock288 = None


        string_literal280_tree = None
        LT281_tree = None
        char_literal282_tree = None
        LT283_tree = None
        LT285_tree = None
        char_literal286_tree = None
        LT287_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_106 = RewriteRuleTokenStream(self.adaptor, "token 106")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_caseBlock = RewriteRuleSubtreeStream(self.adaptor, "rule caseBlock")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 45):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:2: ( 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock -> ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:4: 'switch' ( LT )* '(' ( LT )* expression ( LT )* ')' ( LT )* caseBlock
                string_literal280 = self.input.LT(1)
                self.match(self.input, 106, self.FOLLOW_106_in_switchStatement2072)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_106.add(string_literal280)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:13: ( LT )*
                while True: #loop141
                    alt141 = 2
                    LA141_0 = self.input.LA(1)

                    if (LA141_0 == LT) :
                        alt141 = 1


                    if alt141 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT281 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2074)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT281)


                    else:
                        break #loop141


                char_literal282 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_switchStatement2077)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal282)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:21: ( LT )*
                while True: #loop142
                    alt142 = 2
                    LA142_0 = self.input.LA(1)

                    if (LA142_0 == LT) :
                        LA142_2 = self.input.LA(2)

                        if (self.synpred170()) :
                            alt142 = 1




                    if alt142 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT283 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2079)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT283)


                    else:
                        break #loop142


                self.following.append(self.FOLLOW_expression_in_switchStatement2082)
                expression284 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression284.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:36: ( LT )*
                while True: #loop143
                    alt143 = 2
                    LA143_0 = self.input.LA(1)

                    if (LA143_0 == LT) :
                        alt143 = 1


                    if alt143 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT285 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2084)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT285)


                    else:
                        break #loop143


                char_literal286 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_switchStatement2087)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal286)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:44: ( LT )*
                while True: #loop144
                    alt144 = 2
                    LA144_0 = self.input.LA(1)

                    if (LA144_0 == LT) :
                        alt144 = 1


                    if alt144 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT287 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_switchStatement2089)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT287)


                    else:
                        break #loop144


                self.following.append(self.FOLLOW_caseBlock_in_switchStatement2092)
                caseBlock288 = self.caseBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_caseBlock.add(caseBlock288.tree)
                # AST Rewrite
                # elements: expression, 93, caseBlock
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 316:3: -> ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:316:6: ^( SCOPE 'let' NONE ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) ) )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                    self.adaptor.addChild(root_1, self.adaptor.createFromType(93, "93"))
                    self.adaptor.addChild(root_1, self.adaptor.createFromType(NONE, "NONE"))
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:316:25: ^( TESTVAL ^( CODE expression ) ^( COND caseBlock ) )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(TESTVAL, "TESTVAL"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:316:35: ^( CODE expression )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_3)

                    self.adaptor.addChild(root_3, stream_expression.next())

                    self.adaptor.addChild(root_2, root_3)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:316:54: ^( COND caseBlock )
                    root_3 = self.adaptor.nil()
                    root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(COND, "COND"), root_3)

                    self.adaptor.addChild(root_3, stream_caseBlock.next())

                    self.adaptor.addChild(root_2, root_3)

                    self.adaptor.addChild(root_1, root_2)

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 45, switchStatement_StartIndex)

            pass

        return retval

    # $ANTLR end switchStatement

    class caseBlock_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start caseBlock
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:320:1: caseBlock : '{' ( ( LT )* caseClause )* ( ( LT )* defaultClause ( ( LT )* caseClause )* )? ( LT )* '}' -> ( caseClause )+ ( defaultClause )? ;
    def caseBlock(self, ):

        retval = self.caseBlock_return()
        retval.start = self.input.LT(1)
        caseBlock_StartIndex = self.input.index()
        root_0 = None

        char_literal289 = None
        LT290 = None
        LT292 = None
        LT294 = None
        LT296 = None
        char_literal297 = None
        caseClause291 = None

        defaultClause293 = None

        caseClause295 = None


        char_literal289_tree = None
        LT290_tree = None
        LT292_tree = None
        LT294_tree = None
        LT296_tree = None
        char_literal297_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_caseClause = RewriteRuleSubtreeStream(self.adaptor, "rule caseClause")
        stream_defaultClause = RewriteRuleSubtreeStream(self.adaptor, "rule defaultClause")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 46):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:2: ( '{' ( ( LT )* caseClause )* ( ( LT )* defaultClause ( ( LT )* caseClause )* )? ( LT )* '}' -> ( caseClause )+ ( defaultClause )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:4: '{' ( ( LT )* caseClause )* ( ( LT )* defaultClause ( ( LT )* caseClause )* )? ( LT )* '}'
                char_literal289 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_caseBlock2132)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal289)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:8: ( ( LT )* caseClause )*
                while True: #loop146
                    alt146 = 2
                    alt146 = self.dfa146.predict(self.input)
                    if alt146 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:9: ( LT )* caseClause
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:9: ( LT )*
                        while True: #loop145
                            alt145 = 2
                            LA145_0 = self.input.LA(1)

                            if (LA145_0 == LT) :
                                alt145 = 1


                            if alt145 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT290 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2135)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT290)


                            else:
                                break #loop145


                        self.following.append(self.FOLLOW_caseClause_in_caseBlock2138)
                        caseClause291 = self.caseClause()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_caseClause.add(caseClause291.tree)


                    else:
                        break #loop146


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:26: ( ( LT )* defaultClause ( ( LT )* caseClause )* )?
                alt150 = 2
                alt150 = self.dfa150.predict(self.input)
                if alt150 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:27: ( LT )* defaultClause ( ( LT )* caseClause )*
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:27: ( LT )*
                    while True: #loop147
                        alt147 = 2
                        LA147_0 = self.input.LA(1)

                        if (LA147_0 == LT) :
                            alt147 = 1


                        if alt147 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT292 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2143)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT292)


                        else:
                            break #loop147


                    self.following.append(self.FOLLOW_defaultClause_in_caseBlock2146)
                    defaultClause293 = self.defaultClause()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_defaultClause.add(defaultClause293.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:45: ( ( LT )* caseClause )*
                    while True: #loop149
                        alt149 = 2
                        alt149 = self.dfa149.predict(self.input)
                        if alt149 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:46: ( LT )* caseClause
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:46: ( LT )*
                            while True: #loop148
                                alt148 = 2
                                LA148_0 = self.input.LA(1)

                                if (LA148_0 == LT) :
                                    alt148 = 1


                                if alt148 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT294 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2149)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT294)


                                else:
                                    break #loop148


                            self.following.append(self.FOLLOW_caseClause_in_caseBlock2152)
                            caseClause295 = self.caseClause()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_caseClause.add(caseClause295.tree)


                        else:
                            break #loop149





                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:321:65: ( LT )*
                while True: #loop151
                    alt151 = 2
                    LA151_0 = self.input.LA(1)

                    if (LA151_0 == LT) :
                        alt151 = 1


                    if alt151 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT296 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseBlock2158)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT296)


                    else:
                        break #loop151


                char_literal297 = self.input.LT(1)
                self.match(self.input, 82, self.FOLLOW_82_in_caseBlock2161)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_82.add(char_literal297)
                # AST Rewrite
                # elements: defaultClause, caseClause
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 322:3: -> ( caseClause )+ ( defaultClause )?
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:322:6: ( caseClause )+
                    if not (stream_caseClause.hasNext()):
                        raise RewriteEarlyExitException()

                    while stream_caseClause.hasNext():
                        self.adaptor.addChild(root_0, stream_caseClause.next())


                    stream_caseClause.reset()
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:322:18: ( defaultClause )?
                    if stream_defaultClause.hasNext():
                        self.adaptor.addChild(root_0, stream_defaultClause.next())


                    stream_defaultClause.reset();






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 46, caseBlock_StartIndex)

            pass

        return retval

    # $ANTLR end caseBlock

    class caseClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start caseClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:326:1: caseClause : 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )? -> ^( TEST expression ) ^( CODE ( statementList )? ) ;
    def caseClause(self, ):

        retval = self.caseClause_return()
        retval.start = self.input.LT(1)
        caseClause_StartIndex = self.input.index()
        root_0 = None

        string_literal298 = None
        LT299 = None
        LT301 = None
        char_literal302 = None
        LT303 = None
        expression300 = None

        statementList304 = None


        string_literal298_tree = None
        LT299_tree = None
        LT301_tree = None
        char_literal302_tree = None
        LT303_tree = None
        stream_78 = RewriteRuleTokenStream(self.adaptor, "token 78")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_107 = RewriteRuleTokenStream(self.adaptor, "token 107")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statementList = RewriteRuleSubtreeStream(self.adaptor, "rule statementList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 47):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:2: ( 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )? -> ^( TEST expression ) ^( CODE ( statementList )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:4: 'case' ( LT )* expression ( LT )* ':' ( LT )* ( statementList )?
                string_literal298 = self.input.LT(1)
                self.match(self.input, 107, self.FOLLOW_107_in_caseClause2183)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_107.add(string_literal298)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:11: ( LT )*
                while True: #loop152
                    alt152 = 2
                    LA152_0 = self.input.LA(1)

                    if (LA152_0 == LT) :
                        LA152_2 = self.input.LA(2)

                        if (self.synpred180()) :
                            alt152 = 1




                    if alt152 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT299 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseClause2185)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT299)


                    else:
                        break #loop152


                self.following.append(self.FOLLOW_expression_in_caseClause2188)
                expression300 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression300.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:26: ( LT )*
                while True: #loop153
                    alt153 = 2
                    LA153_0 = self.input.LA(1)

                    if (LA153_0 == LT) :
                        alt153 = 1


                    if alt153 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT301 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseClause2190)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT301)


                    else:
                        break #loop153


                char_literal302 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_caseClause2193)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_78.add(char_literal302)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:34: ( LT )*
                while True: #loop154
                    alt154 = 2
                    LA154_0 = self.input.LA(1)

                    if (LA154_0 == LT) :
                        LA154_2 = self.input.LA(2)

                        if (self.synpred182()) :
                            alt154 = 1




                    if alt154 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT303 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_caseClause2195)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT303)


                    else:
                        break #loop154


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:38: ( statementList )?
                alt155 = 2
                LA155 = self.input.LA(1)
                if LA155 == StringLiteral or LA155 == XMLComment or LA155 == NumericLiteral or LA155 == Identifier or LA155 == RegularExpressionHacks or LA155 == 74 or LA155 == 75 or LA155 == 77 or LA155 == 79 or LA155 == 81 or LA155 == 83 or LA155 == 84 or LA155 == 88 or LA155 == 89 or LA155 == 90 or LA155 == 91 or LA155 == 92 or LA155 == 93 or LA155 == 94 or LA155 == 96 or LA155 == 98 or LA155 == 99 or LA155 == 100 or LA155 == 101 or LA155 == 103 or LA155 == 104 or LA155 == 105 or LA155 == 106 or LA155 == 108 or LA155 == 109 or LA155 == 110 or LA155 == 113 or LA155 == 143 or LA155 == 145 or LA155 == 146 or LA155 == 147 or LA155 == 148 or LA155 == 149 or LA155 == 150 or LA155 == 151 or LA155 == 152 or LA155 == 153 or LA155 == 154 or LA155 == 155 or LA155 == 156 or LA155 == 157:
                    alt155 = 1
                elif LA155 == LT:
                    LA155_7 = self.input.LA(2)

                    if (self.synpred183()) :
                        alt155 = 1
                elif LA155 == 87:
                    LA155_34 = self.input.LA(2)

                    if (self.synpred183()) :
                        alt155 = 1
                if alt155 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
                    self.following.append(self.FOLLOW_statementList_in_caseClause2198)
                    statementList304 = self.statementList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementList.add(statementList304.tree)



                # AST Rewrite
                # elements: expression, statementList
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 328:3: -> ^( TEST expression ) ^( CODE ( statementList )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:328:6: ^( TEST expression )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_1)

                    self.adaptor.addChild(root_1, stream_expression.next())

                    self.adaptor.addChild(root_0, root_1)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:328:25: ^( CODE ( statementList )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:328:32: ( statementList )?
                    if stream_statementList.hasNext():
                        self.adaptor.addChild(root_1, stream_statementList.next())


                    stream_statementList.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 47, caseClause_StartIndex)

            pass

        return retval

    # $ANTLR end caseClause

    class defaultClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start defaultClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:332:1: defaultClause : 'default' ( LT )* ':' ( LT )* ( statementList )? -> ^( CODE ( statementList )? ) ;
    def defaultClause(self, ):

        retval = self.defaultClause_return()
        retval.start = self.input.LT(1)
        defaultClause_StartIndex = self.input.index()
        root_0 = None

        string_literal305 = None
        LT306 = None
        char_literal307 = None
        LT308 = None
        statementList309 = None


        string_literal305_tree = None
        LT306_tree = None
        char_literal307_tree = None
        LT308_tree = None
        stream_78 = RewriteRuleTokenStream(self.adaptor, "token 78")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_87 = RewriteRuleTokenStream(self.adaptor, "token 87")
        stream_statementList = RewriteRuleSubtreeStream(self.adaptor, "rule statementList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 48):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:2: ( 'default' ( LT )* ':' ( LT )* ( statementList )? -> ^( CODE ( statementList )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:4: 'default' ( LT )* ':' ( LT )* ( statementList )?
                string_literal305 = self.input.LT(1)
                self.match(self.input, 87, self.FOLLOW_87_in_defaultClause2229)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_87.add(string_literal305)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:14: ( LT )*
                while True: #loop156
                    alt156 = 2
                    LA156_0 = self.input.LA(1)

                    if (LA156_0 == LT) :
                        alt156 = 1


                    if alt156 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT306 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultClause2231)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT306)


                    else:
                        break #loop156


                char_literal307 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_defaultClause2234)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_78.add(char_literal307)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:22: ( LT )*
                while True: #loop157
                    alt157 = 2
                    LA157_0 = self.input.LA(1)

                    if (LA157_0 == LT) :
                        LA157_2 = self.input.LA(2)

                        if (self.synpred185()) :
                            alt157 = 1




                    if alt157 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT308 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_defaultClause2236)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT308)


                    else:
                        break #loop157


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:26: ( statementList )?
                alt158 = 2
                alt158 = self.dfa158.predict(self.input)
                if alt158 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
                    self.following.append(self.FOLLOW_statementList_in_defaultClause2239)
                    statementList309 = self.statementList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementList.add(statementList309.tree)



                # AST Rewrite
                # elements: statementList
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 334:3: -> ^( CODE ( statementList )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:6: ^( CODE ( statementList )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:334:13: ( statementList )?
                    if stream_statementList.hasNext():
                        self.adaptor.addChild(root_1, stream_statementList.next())


                    stream_statementList.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 48, defaultClause_StartIndex)

            pass

        return retval

    # $ANTLR end defaultClause

    class throwStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start throwStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:337:1: throwStatement : 'throw' expression ( LT | ';' ) ;
    def throwStatement(self, ):

        retval = self.throwStatement_return()
        retval.start = self.input.LT(1)
        throwStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal310 = None
        set312 = None
        expression311 = None


        string_literal310_tree = None
        set312_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 49):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:338:2: ( 'throw' expression ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:338:4: 'throw' expression ( LT | ';' )
                root_0 = self.adaptor.nil()

                string_literal310 = self.input.LT(1)
                self.match(self.input, 108, self.FOLLOW_108_in_throwStatement2262)
                if self.failed:
                    return retval

                string_literal310_tree = self.adaptor.createWithPayload(string_literal310)
                self.adaptor.addChild(root_0, string_literal310_tree)

                self.following.append(self.FOLLOW_expression_in_throwStatement2264)
                expression311 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, expression311.tree)
                set312 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 74:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_throwStatement2266
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 49, throwStatement_StartIndex)

            pass

        return retval

    # $ANTLR end throwStatement

    class tryStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start tryStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:341:1: tryStatement : 'try' ( LT )* statementBlock ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? ) ;
    def tryStatement(self, ):

        retval = self.tryStatement_return()
        retval.start = self.input.LT(1)
        tryStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal313 = None
        LT314 = None
        LT316 = None
        LT319 = None
        statementBlock315 = None

        finallyClause317 = None

        catchClause318 = None

        finallyClause320 = None


        string_literal313_tree = None
        LT314_tree = None
        LT316_tree = None
        LT319_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 50):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:2: ( 'try' ( LT )* statementBlock ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:4: 'try' ( LT )* statementBlock ( LT )* ( finallyClause | catchClause ( ( LT )* finallyClause )? )
                root_0 = self.adaptor.nil()

                string_literal313 = self.input.LT(1)
                self.match(self.input, 109, self.FOLLOW_109_in_tryStatement2284)
                if self.failed:
                    return retval

                string_literal313_tree = self.adaptor.createWithPayload(string_literal313)
                self.adaptor.addChild(root_0, string_literal313_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:12: ( LT )*
                while True: #loop159
                    alt159 = 2
                    LA159_0 = self.input.LA(1)

                    if (LA159_0 == LT) :
                        alt159 = 1


                    if alt159 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT314 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_tryStatement2286)
                        if self.failed:
                            return retval


                    else:
                        break #loop159


                self.following.append(self.FOLLOW_statementBlock_in_tryStatement2290)
                statementBlock315 = self.statementBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statementBlock315.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:32: ( LT )*
                while True: #loop160
                    alt160 = 2
                    LA160_0 = self.input.LA(1)

                    if (LA160_0 == LT) :
                        alt160 = 1


                    if alt160 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT316 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_tryStatement2292)
                        if self.failed:
                            return retval


                    else:
                        break #loop160


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:35: ( finallyClause | catchClause ( ( LT )* finallyClause )? )
                alt163 = 2
                LA163_0 = self.input.LA(1)

                if (LA163_0 == 112) :
                    alt163 = 1
                elif (LA163_0 == 111) :
                    alt163 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("342:35: ( finallyClause | catchClause ( ( LT )* finallyClause )? )", 163, 0, self.input)

                    raise nvae

                if alt163 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:36: finallyClause
                    self.following.append(self.FOLLOW_finallyClause_in_tryStatement2297)
                    finallyClause317 = self.finallyClause()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, finallyClause317.tree)


                elif alt163 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:52: catchClause ( ( LT )* finallyClause )?
                    self.following.append(self.FOLLOW_catchClause_in_tryStatement2301)
                    catchClause318 = self.catchClause()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, catchClause318.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:64: ( ( LT )* finallyClause )?
                    alt162 = 2
                    alt162 = self.dfa162.predict(self.input)
                    if alt162 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:65: ( LT )* finallyClause
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:342:67: ( LT )*
                        while True: #loop161
                            alt161 = 2
                            LA161_0 = self.input.LA(1)

                            if (LA161_0 == LT) :
                                alt161 = 1


                            if alt161 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT319 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_tryStatement2304)
                                if self.failed:
                                    return retval


                            else:
                                break #loop161


                        self.following.append(self.FOLLOW_finallyClause_in_tryStatement2308)
                        finallyClause320 = self.finallyClause()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, finallyClause320.tree)









                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 50, tryStatement_StartIndex)

            pass

        return retval

    # $ANTLR end tryStatement

    class yieldStatement_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start yieldStatement
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:345:1: yieldStatement : 'yield' ( LT )* expression ( LT | ';' ) ;
    def yieldStatement(self, ):

        retval = self.yieldStatement_return()
        retval.start = self.input.LT(1)
        yieldStatement_StartIndex = self.input.index()
        root_0 = None

        string_literal321 = None
        LT322 = None
        set324 = None
        expression323 = None


        string_literal321_tree = None
        LT322_tree = None
        set324_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 51):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:346:2: ( 'yield' ( LT )* expression ( LT | ';' ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:346:4: 'yield' ( LT )* expression ( LT | ';' )
                root_0 = self.adaptor.nil()

                string_literal321 = self.input.LT(1)
                self.match(self.input, 110, self.FOLLOW_110_in_yieldStatement2322)
                if self.failed:
                    return retval

                string_literal321_tree = self.adaptor.createWithPayload(string_literal321)
                self.adaptor.addChild(root_0, string_literal321_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:346:14: ( LT )*
                while True: #loop164
                    alt164 = 2
                    LA164_0 = self.input.LA(1)

                    if (LA164_0 == LT) :
                        LA164_2 = self.input.LA(2)

                        if (self.synpred193()) :
                            alt164 = 1




                    if alt164 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT322 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_yieldStatement2324)
                        if self.failed:
                            return retval


                    else:
                        break #loop164


                self.following.append(self.FOLLOW_expression_in_yieldStatement2328)
                expression323 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, expression323.tree)
                set324 = self.input.LT(1)
                if self.input.LA(1) == LT or self.input.LA(1) == 74:
                    self.input.consume();
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_yieldStatement2330
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 51, yieldStatement_StartIndex)

            pass

        return retval

    # $ANTLR end yieldStatement

    class catchClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start catchClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:349:1: catchClause : 'catch' ( LT )* '(' ( LT )* identifier ( LT )* ( 'if' ( LT )* expression ( LT )* )? ')' ( LT )* statementBlock -> ^( CATCH identifier ^( TEST ( expression )? ) statementBlock ) ;
    def catchClause(self, ):

        retval = self.catchClause_return()
        retval.start = self.input.LT(1)
        catchClause_StartIndex = self.input.index()
        root_0 = None

        string_literal325 = None
        LT326 = None
        char_literal327 = None
        LT328 = None
        LT330 = None
        string_literal331 = None
        LT332 = None
        LT334 = None
        char_literal335 = None
        LT336 = None
        identifier329 = None

        expression333 = None

        statementBlock337 = None


        string_literal325_tree = None
        LT326_tree = None
        char_literal327_tree = None
        LT328_tree = None
        LT330_tree = None
        string_literal331_tree = None
        LT332_tree = None
        LT334_tree = None
        char_literal335_tree = None
        LT336_tree = None
        stream_96 = RewriteRuleTokenStream(self.adaptor, "token 96")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_111 = RewriteRuleTokenStream(self.adaptor, "token 111")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_statementBlock = RewriteRuleSubtreeStream(self.adaptor, "rule statementBlock")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 52):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:2: ( 'catch' ( LT )* '(' ( LT )* identifier ( LT )* ( 'if' ( LT )* expression ( LT )* )? ')' ( LT )* statementBlock -> ^( CATCH identifier ^( TEST ( expression )? ) statementBlock ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:4: 'catch' ( LT )* '(' ( LT )* identifier ( LT )* ( 'if' ( LT )* expression ( LT )* )? ')' ( LT )* statementBlock
                string_literal325 = self.input.LT(1)
                self.match(self.input, 111, self.FOLLOW_111_in_catchClause2348)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_111.add(string_literal325)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:12: ( LT )*
                while True: #loop165
                    alt165 = 2
                    LA165_0 = self.input.LA(1)

                    if (LA165_0 == LT) :
                        alt165 = 1


                    if alt165 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT326 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2350)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT326)


                    else:
                        break #loop165


                char_literal327 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_catchClause2353)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal327)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:20: ( LT )*
                while True: #loop166
                    alt166 = 2
                    LA166_0 = self.input.LA(1)

                    if (LA166_0 == LT) :
                        alt166 = 1


                    if alt166 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT328 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2355)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT328)


                    else:
                        break #loop166


                self.following.append(self.FOLLOW_identifier_in_catchClause2358)
                identifier329 = self.identifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_identifier.add(identifier329.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:35: ( LT )*
                while True: #loop167
                    alt167 = 2
                    LA167_0 = self.input.LA(1)

                    if (LA167_0 == LT) :
                        alt167 = 1


                    if alt167 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT330 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2360)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT330)


                    else:
                        break #loop167


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:39: ( 'if' ( LT )* expression ( LT )* )?
                alt170 = 2
                LA170_0 = self.input.LA(1)

                if (LA170_0 == 96) :
                    alt170 = 1
                if alt170 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:40: 'if' ( LT )* expression ( LT )*
                    string_literal331 = self.input.LT(1)
                    self.match(self.input, 96, self.FOLLOW_96_in_catchClause2364)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_96.add(string_literal331)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:45: ( LT )*
                    while True: #loop168
                        alt168 = 2
                        LA168_0 = self.input.LA(1)

                        if (LA168_0 == LT) :
                            LA168_2 = self.input.LA(2)

                            if (self.synpred198()) :
                                alt168 = 1




                        if alt168 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT332 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2366)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT332)


                        else:
                            break #loop168


                    self.following.append(self.FOLLOW_expression_in_catchClause2369)
                    expression333 = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(expression333.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:60: ( LT )*
                    while True: #loop169
                        alt169 = 2
                        LA169_0 = self.input.LA(1)

                        if (LA169_0 == LT) :
                            alt169 = 1


                        if alt169 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT334 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2371)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT334)


                        else:
                            break #loop169





                char_literal335 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_catchClause2376)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal335)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:70: ( LT )*
                while True: #loop171
                    alt171 = 2
                    LA171_0 = self.input.LA(1)

                    if (LA171_0 == LT) :
                        alt171 = 1


                    if alt171 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT336 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_catchClause2378)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT336)


                    else:
                        break #loop171


                self.following.append(self.FOLLOW_statementBlock_in_catchClause2381)
                statementBlock337 = self.statementBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_statementBlock.add(statementBlock337.tree)
                # AST Rewrite
                # elements: statementBlock, expression, identifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 351:3: -> ^( CATCH identifier ^( TEST ( expression )? ) statementBlock )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:6: ^( CATCH identifier ^( TEST ( expression )? ) statementBlock )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(CATCH, "CATCH"), root_1)

                    self.adaptor.addChild(root_1, stream_identifier.next())
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:25: ^( TEST ( expression )? )
                    root_2 = self.adaptor.nil()
                    root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_2)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:351:32: ( expression )?
                    if stream_expression.hasNext():
                        self.adaptor.addChild(root_2, stream_expression.next())


                    stream_expression.reset();

                    self.adaptor.addChild(root_1, root_2)
                    self.adaptor.addChild(root_1, stream_statementBlock.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 52, catchClause_StartIndex)

            pass

        return retval

    # $ANTLR end catchClause

    class finallyClause_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start finallyClause
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:354:1: finallyClause : 'finally' ( LT )* statementBlock ;
    def finallyClause(self, ):

        retval = self.finallyClause_return()
        retval.start = self.input.LT(1)
        finallyClause_StartIndex = self.input.index()
        root_0 = None

        string_literal338 = None
        LT339 = None
        statementBlock340 = None


        string_literal338_tree = None
        LT339_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 53):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:355:2: ( 'finally' ( LT )* statementBlock )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:355:4: 'finally' ( LT )* statementBlock
                root_0 = self.adaptor.nil()

                string_literal338 = self.input.LT(1)
                self.match(self.input, 112, self.FOLLOW_112_in_finallyClause2412)
                if self.failed:
                    return retval

                string_literal338_tree = self.adaptor.createWithPayload(string_literal338)
                self.adaptor.addChild(root_0, string_literal338_tree)

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:355:16: ( LT )*
                while True: #loop172
                    alt172 = 2
                    LA172_0 = self.input.LA(1)

                    if (LA172_0 == LT) :
                        alt172 = 1


                    if alt172 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT339 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_finallyClause2414)
                        if self.failed:
                            return retval


                    else:
                        break #loop172


                self.following.append(self.FOLLOW_statementBlock_in_finallyClause2418)
                statementBlock340 = self.statementBlock()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, statementBlock340.tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 53, finallyClause_StartIndex)

            pass

        return retval

    # $ANTLR end finallyClause

    class expression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start expression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:359:1: expression : assignmentExpression ( ( LT )* ',' ( LT )* assignmentExpression )* ;
    def expression(self, ):

        retval = self.expression_return()
        retval.start = self.input.LT(1)
        expression_StartIndex = self.input.index()
        root_0 = None

        LT342 = None
        char_literal343 = None
        LT344 = None
        assignmentExpression341 = None

        assignmentExpression345 = None


        LT342_tree = None
        char_literal343_tree = None
        LT344_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 54):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:2: ( assignmentExpression ( ( LT )* ',' ( LT )* assignmentExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:4: assignmentExpression ( ( LT )* ',' ( LT )* assignmentExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_assignmentExpression_in_expression2430)
                assignmentExpression341 = self.assignmentExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, assignmentExpression341.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:25: ( ( LT )* ',' ( LT )* assignmentExpression )*
                while True: #loop175
                    alt175 = 2
                    alt175 = self.dfa175.predict(self.input)
                    if alt175 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:26: ( LT )* ',' ( LT )* assignmentExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:28: ( LT )*
                        while True: #loop173
                            alt173 = 2
                            LA173_0 = self.input.LA(1)

                            if (LA173_0 == LT) :
                                alt173 = 1


                            if alt173 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT342 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expression2433)
                                if self.failed:
                                    return retval


                            else:
                                break #loop173


                        char_literal343 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_expression2437)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:38: ( LT )*
                        while True: #loop174
                            alt174 = 2
                            LA174_0 = self.input.LA(1)

                            if (LA174_0 == LT) :
                                LA174_2 = self.input.LA(2)

                                if (self.synpred204()) :
                                    alt174 = 1




                            if alt174 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT344 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expression2440)
                                if self.failed:
                                    return retval


                            else:
                                break #loop174


                        self.following.append(self.FOLLOW_assignmentExpression_in_expression2444)
                        assignmentExpression345 = self.assignmentExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, assignmentExpression345.tree)


                    else:
                        break #loop175





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 54, expression_StartIndex)

            pass

        return retval

    # $ANTLR end expression

    class expressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start expressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:363:1: expressionNoIn : assignmentExpressionNoIn ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )* ;
    def expressionNoIn(self, ):

        retval = self.expressionNoIn_return()
        retval.start = self.input.LT(1)
        expressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT347 = None
        char_literal348 = None
        LT349 = None
        assignmentExpressionNoIn346 = None

        assignmentExpressionNoIn350 = None


        LT347_tree = None
        char_literal348_tree = None
        LT349_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 55):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:2: ( assignmentExpressionNoIn ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:4: assignmentExpressionNoIn ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2458)
                assignmentExpressionNoIn346 = self.assignmentExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, assignmentExpressionNoIn346.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:29: ( ( LT )* ',' ( LT )* assignmentExpressionNoIn )*
                while True: #loop178
                    alt178 = 2
                    alt178 = self.dfa178.predict(self.input)
                    if alt178 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:30: ( LT )* ',' ( LT )* assignmentExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:32: ( LT )*
                        while True: #loop176
                            alt176 = 2
                            LA176_0 = self.input.LA(1)

                            if (LA176_0 == LT) :
                                alt176 = 1


                            if alt176 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT347 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expressionNoIn2461)
                                if self.failed:
                                    return retval


                            else:
                                break #loop176


                        char_literal348 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_expressionNoIn2465)
                        if self.failed:
                            return retval
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:42: ( LT )*
                        while True: #loop177
                            alt177 = 2
                            LA177_0 = self.input.LA(1)

                            if (LA177_0 == LT) :
                                LA177_2 = self.input.LA(2)

                                if (self.synpred207()) :
                                    alt177 = 1




                            if alt177 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT349 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_expressionNoIn2468)
                                if self.failed:
                                    return retval


                            else:
                                break #loop177


                        self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2472)
                        assignmentExpressionNoIn350 = self.assignmentExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, assignmentExpressionNoIn350.tree)


                    else:
                        break #loop178





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 55, expressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end expressionNoIn

    class assignmentExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start assignmentExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );
    def assignmentExpression(self, ):

        retval = self.assignmentExpression_return()
        retval.start = self.input.LT(1)
        assignmentExpression_StartIndex = self.input.index()
        root_0 = None

        let = None
        LT352 = None
        LT354 = None
        LT356 = None
        char_literal357 = None
        LT358 = None
        LT360 = None
        char_literal361 = None
        LT362 = None
        LT365 = None
        string_literal366 = None
        LT367 = None
        char_literal368 = None
        LT369 = None
        LT371 = None
        string_literal372 = None
        LT373 = None
        LT374 = None
        char_literal375 = None
        string_literal376 = None
        LT377 = None
        char_literal378 = None
        LT379 = None
        LT380 = None
        char_literal381 = None
        inexp = None

        testexp = None

        leftHandSideExpression351 = None

        assignmentOperator353 = None

        assignmentExpression355 = None

        variableDeclarationList359 = None

        assignmentExpression363 = None

        conditionalExpression364 = None

        identifier370 = None

        conditionalExpression382 = None


        let_tree = None
        LT352_tree = None
        LT354_tree = None
        LT356_tree = None
        char_literal357_tree = None
        LT358_tree = None
        LT360_tree = None
        char_literal361_tree = None
        LT362_tree = None
        LT365_tree = None
        string_literal366_tree = None
        LT367_tree = None
        char_literal368_tree = None
        LT369_tree = None
        LT371_tree = None
        string_literal372_tree = None
        LT373_tree = None
        LT374_tree = None
        char_literal375_tree = None
        string_literal376_tree = None
        LT377_tree = None
        char_literal378_tree = None
        LT379_tree = None
        LT380_tree = None
        char_literal381_tree = None
        stream_96 = RewriteRuleTokenStream(self.adaptor, "token 96")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_102 = RewriteRuleTokenStream(self.adaptor, "token 102")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_100 = RewriteRuleTokenStream(self.adaptor, "token 100")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_assignmentOperator = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentOperator")
        stream_leftHandSideExpression = RewriteRuleSubtreeStream(self.adaptor, "rule leftHandSideExpression")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        stream_conditionalExpression = RewriteRuleSubtreeStream(self.adaptor, "rule conditionalExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 56):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:2: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression )
                alt195 = 4
                LA195 = self.input.LA(1)
                if LA195 == 152:
                    LA195_1 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 1, self.input)

                        raise nvae

                elif LA195 == LT:
                    LA195_2 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 2, self.input)

                        raise nvae

                elif LA195 == 75:
                    LA195_3 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 3, self.input)

                        raise nvae

                elif LA195 == 81:
                    LA195_4 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 4, self.input)

                        raise nvae

                elif LA195 == XMLComment:
                    LA195_5 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 5, self.input)

                        raise nvae

                elif LA195 == 93:
                    LA195_6 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred216()) :
                        alt195 = 2
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 6, self.input)

                        raise nvae

                elif LA195 == 155:
                    LA195_7 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 7, self.input)

                        raise nvae

                elif LA195 == 156:
                    LA195_8 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 8, self.input)

                        raise nvae

                elif LA195 == 157:
                    LA195_9 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 9, self.input)

                        raise nvae

                elif LA195 == StringLiteral:
                    LA195_10 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 10, self.input)

                        raise nvae

                elif LA195 == NumericLiteral:
                    LA195_11 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 11, self.input)

                        raise nvae

                elif LA195 == 77:
                    LA195_12 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 12, self.input)

                        raise nvae

                elif LA195 == RegularExpressionHacks:
                    LA195_13 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 13, self.input)

                        raise nvae

                elif LA195 == 94:
                    LA195_14 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 14, self.input)

                        raise nvae

                elif LA195 == 84:
                    LA195_15 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 15, self.input)

                        raise nvae

                elif LA195 == 83:
                    LA195_16 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 16, self.input)

                        raise nvae

                elif LA195 == 113:
                    LA195_17 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 17, self.input)

                        raise nvae

                elif LA195 == Identifier or LA195 == 87 or LA195 == 88 or LA195 == 89 or LA195 == 101 or LA195 == 110 or LA195 == 153 or LA195 == 154:
                    LA195_18 = self.input.LA(2)

                    if (self.synpred211()) :
                        alt195 = 1
                    elif (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 18, self.input)

                        raise nvae

                elif LA195 == 79 or LA195 == 143 or LA195 == 145 or LA195 == 146 or LA195 == 147 or LA195 == 148 or LA195 == 149 or LA195 == 150 or LA195 == 151:
                    LA195_19 = self.input.LA(2)

                    if (self.synpred227()) :
                        alt195 = 3
                    elif (True) :
                        alt195 = 4
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 19, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("367:1: assignmentExpression : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression ) | conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )? -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? ) | conditionalExpression );", 195, 0, self.input)

                    raise nvae

                if alt195 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression
                    self.following.append(self.FOLLOW_leftHandSideExpression_in_assignmentExpression2486)
                    leftHandSideExpression351 = self.leftHandSideExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_leftHandSideExpression.add(leftHandSideExpression351.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:27: ( LT )*
                    while True: #loop179
                        alt179 = 2
                        LA179_0 = self.input.LA(1)

                        if (LA179_0 == LT) :
                            alt179 = 1


                        if alt179 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT352 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2488)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT352)


                        else:
                            break #loop179


                    self.following.append(self.FOLLOW_assignmentOperator_in_assignmentExpression2491)
                    assignmentOperator353 = self.assignmentOperator()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentOperator.add(assignmentOperator353.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:50: ( LT )*
                    while True: #loop180
                        alt180 = 2
                        LA180_0 = self.input.LA(1)

                        if (LA180_0 == LT) :
                            LA180_2 = self.input.LA(2)

                            if (self.synpred210()) :
                                alt180 = 1




                        if alt180 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT354 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2493)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT354)


                        else:
                            break #loop180


                    self.following.append(self.FOLLOW_assignmentExpression_in_assignmentExpression2496)
                    assignmentExpression355 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression355.tree)
                    # AST Rewrite
                    # elements: assignmentExpression, leftHandSideExpression, assignmentOperator
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 369:3: -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:369:6: ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ASSIGN, "ASSIGN"), root_1)

                        self.adaptor.addChild(root_1, stream_leftHandSideExpression.next())
                        self.adaptor.addChild(root_1, stream_assignmentOperator.next())
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt195 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:4: let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression
                    let = self.input.LT(1)
                    self.match(self.input, 93, self.FOLLOW_93_in_assignmentExpression2517)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_93.add(let)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:14: ( LT )*
                    while True: #loop181
                        alt181 = 2
                        LA181_0 = self.input.LA(1)

                        if (LA181_0 == LT) :
                            alt181 = 1


                        if alt181 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT356 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2519)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT356)


                        else:
                            break #loop181


                    char_literal357 = self.input.LT(1)
                    self.match(self.input, 84, self.FOLLOW_84_in_assignmentExpression2522)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_84.add(char_literal357)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:22: ( LT )*
                    while True: #loop182
                        alt182 = 2
                        LA182_0 = self.input.LA(1)

                        if (LA182_0 == LT) :
                            alt182 = 1


                        if alt182 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT358 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2524)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT358)


                        else:
                            break #loop182


                    self.following.append(self.FOLLOW_variableDeclarationList_in_assignmentExpression2527)
                    variableDeclarationList359 = self.variableDeclarationList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationList.add(variableDeclarationList359.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:50: ( LT )*
                    while True: #loop183
                        alt183 = 2
                        LA183_0 = self.input.LA(1)

                        if (LA183_0 == LT) :
                            alt183 = 1


                        if alt183 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT360 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2529)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT360)


                        else:
                            break #loop183


                    char_literal361 = self.input.LT(1)
                    self.match(self.input, 86, self.FOLLOW_86_in_assignmentExpression2532)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_86.add(char_literal361)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:58: ( LT )*
                    while True: #loop184
                        alt184 = 2
                        LA184_0 = self.input.LA(1)

                        if (LA184_0 == LT) :
                            LA184_2 = self.input.LA(2)

                            if (self.synpred215()) :
                                alt184 = 1




                        if alt184 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT362 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2534)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT362)


                        else:
                            break #loop184


                    self.following.append(self.FOLLOW_assignmentExpression_in_assignmentExpression2537)
                    assignmentExpression363 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression363.tree)
                    # AST Rewrite
                    # elements: let, variableDeclarationList, let, assignmentExpression
                    # token labels: let
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_let = RewriteRuleTokenStream(self.adaptor, "token let", let)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 371:3: -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:371:6: ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, stream_let.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:371:19: ^( VARDEFS $let variableDeclarationList )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_2)

                        self.adaptor.addChild(root_2, stream_let.next())
                        self.adaptor.addChild(root_2, stream_variableDeclarationList.next())

                        self.adaptor.addChild(root_1, root_2)
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt195 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:4: conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* inexp= expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )?
                    self.following.append(self.FOLLOW_conditionalExpression_in_assignmentExpression2566)
                    conditionalExpression364 = self.conditionalExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_conditionalExpression.add(conditionalExpression364.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:26: ( LT )*
                    while True: #loop185
                        alt185 = 2
                        LA185_0 = self.input.LA(1)

                        if (LA185_0 == LT) :
                            alt185 = 1


                        if alt185 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT365 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2568)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT365)


                        else:
                            break #loop185


                    string_literal366 = self.input.LT(1)
                    self.match(self.input, 100, self.FOLLOW_100_in_assignmentExpression2571)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_100.add(string_literal366)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:36: ( LT )*
                    while True: #loop186
                        alt186 = 2
                        LA186_0 = self.input.LA(1)

                        if (LA186_0 == LT) :
                            alt186 = 1


                        if alt186 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT367 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2573)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT367)


                        else:
                            break #loop186


                    char_literal368 = self.input.LT(1)
                    self.match(self.input, 84, self.FOLLOW_84_in_assignmentExpression2576)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_84.add(char_literal368)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:44: ( LT )*
                    while True: #loop187
                        alt187 = 2
                        LA187_0 = self.input.LA(1)

                        if (LA187_0 == LT) :
                            alt187 = 1


                        if alt187 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT369 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2578)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT369)


                        else:
                            break #loop187


                    self.following.append(self.FOLLOW_identifier_in_assignmentExpression2581)
                    identifier370 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier370.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:59: ( LT )*
                    while True: #loop188
                        alt188 = 2
                        LA188_0 = self.input.LA(1)

                        if (LA188_0 == LT) :
                            alt188 = 1


                        if alt188 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT371 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2583)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT371)


                        else:
                            break #loop188


                    string_literal372 = self.input.LT(1)
                    self.match(self.input, 102, self.FOLLOW_102_in_assignmentExpression2586)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_102.add(string_literal372)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:68: ( LT )*
                    while True: #loop189
                        alt189 = 2
                        LA189_0 = self.input.LA(1)

                        if (LA189_0 == LT) :
                            LA189_2 = self.input.LA(2)

                            if (self.synpred221()) :
                                alt189 = 1




                        if alt189 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT373 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2588)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT373)


                        else:
                            break #loop189


                    self.following.append(self.FOLLOW_expression_in_assignmentExpression2593)
                    inexp = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(inexp.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:89: ( LT )*
                    while True: #loop190
                        alt190 = 2
                        LA190_0 = self.input.LA(1)

                        if (LA190_0 == LT) :
                            alt190 = 1


                        if alt190 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT374 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2595)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT374)


                        else:
                            break #loop190


                    char_literal375 = self.input.LT(1)
                    self.match(self.input, 86, self.FOLLOW_86_in_assignmentExpression2598)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_86.add(char_literal375)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:97: ( 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')' )?
                    alt194 = 2
                    LA194_0 = self.input.LA(1)

                    if (LA194_0 == 96) :
                        alt194 = 1
                    if alt194 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:98: 'if' ( LT )* '(' ( LT )* testexp= expression ( LT )* ')'
                        string_literal376 = self.input.LT(1)
                        self.match(self.input, 96, self.FOLLOW_96_in_assignmentExpression2601)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_96.add(string_literal376)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:103: ( LT )*
                        while True: #loop191
                            alt191 = 2
                            LA191_0 = self.input.LA(1)

                            if (LA191_0 == LT) :
                                alt191 = 1


                            if alt191 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT377 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2603)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT377)


                            else:
                                break #loop191


                        char_literal378 = self.input.LT(1)
                        self.match(self.input, 84, self.FOLLOW_84_in_assignmentExpression2606)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_84.add(char_literal378)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:111: ( LT )*
                        while True: #loop192
                            alt192 = 2
                            LA192_0 = self.input.LA(1)

                            if (LA192_0 == LT) :
                                LA192_2 = self.input.LA(2)

                                if (self.synpred224()) :
                                    alt192 = 1




                            if alt192 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT379 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2608)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT379)


                            else:
                                break #loop192


                        self.following.append(self.FOLLOW_expression_in_assignmentExpression2613)
                        testexp = self.expression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_expression.add(testexp.tree)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:134: ( LT )*
                        while True: #loop193
                            alt193 = 2
                            LA193_0 = self.input.LA(1)

                            if (LA193_0 == LT) :
                                alt193 = 1


                            if alt193 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT380 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpression2615)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT380)


                            else:
                                break #loop193


                        char_literal381 = self.input.LT(1)
                        self.match(self.input, 86, self.FOLLOW_86_in_assignmentExpression2618)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_86.add(char_literal381)



                    # AST Rewrite
                    # elements: inexp, identifier, testexp, conditionalExpression
                    # token labels: 
                    # rule labels: retval, inexp, testexp
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        if inexp is not None:
                            stream_inexp = RewriteRuleSubtreeStream(self.adaptor, "token inexp", inexp.tree)
                        else:
                            stream_inexp = RewriteRuleSubtreeStream(self.adaptor, "token inexp", None)


                        if testexp is not None:
                            stream_testexp = RewriteRuleSubtreeStream(self.adaptor, "token testexp", testexp.tree)
                        else:
                            stream_testexp = RewriteRuleSubtreeStream(self.adaptor, "token testexp", None)


                        root_0 = self.adaptor.nil()
                        # 374:3: -> ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:374:6: ^( GENEXP ^( CODE conditionalExpression ) ^( IN identifier $inexp) ( ^( TEST $testexp) )? )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(GENEXP, "GENEXP"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:374:15: ^( CODE conditionalExpression )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(CODE, "CODE"), root_2)

                        self.adaptor.addChild(root_2, stream_conditionalExpression.next())

                        self.adaptor.addChild(root_1, root_2)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:374:45: ^( IN identifier $inexp)
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(IN, "IN"), root_2)

                        self.adaptor.addChild(root_2, stream_identifier.next())
                        self.adaptor.addChild(root_2, stream_inexp.next())

                        self.adaptor.addChild(root_1, root_2)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:374:69: ( ^( TEST $testexp) )?
                        if stream_testexp.hasNext():
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:374:69: ^( TEST $testexp)
                            root_2 = self.adaptor.nil()
                            root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(TEST, "TEST"), root_2)

                            self.adaptor.addChild(root_2, stream_testexp.next())

                            self.adaptor.addChild(root_1, root_2)


                        stream_testexp.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt195 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:375:4: conditionalExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_conditionalExpression_in_assignmentExpression2656)
                    conditionalExpression382 = self.conditionalExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, conditionalExpression382.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 56, assignmentExpression_StartIndex)

            pass

        return retval

    # $ANTLR end assignmentExpression

    class assignmentExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start assignmentExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );
    def assignmentExpressionNoIn(self, ):

        retval = self.assignmentExpressionNoIn_return()
        retval.start = self.input.LT(1)
        assignmentExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        let = None
        LT384 = None
        LT386 = None
        LT388 = None
        char_literal389 = None
        LT390 = None
        LT392 = None
        char_literal393 = None
        LT394 = None
        leftHandSideExpression383 = None

        assignmentOperator385 = None

        assignmentExpressionNoIn387 = None

        variableDeclarationList391 = None

        assignmentExpressionNoIn395 = None

        conditionalExpressionNoIn396 = None


        let_tree = None
        LT384_tree = None
        LT386_tree = None
        LT388_tree = None
        char_literal389_tree = None
        LT390_tree = None
        LT392_tree = None
        char_literal393_tree = None
        LT394_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_93 = RewriteRuleTokenStream(self.adaptor, "token 93")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_assignmentOperator = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentOperator")
        stream_assignmentExpressionNoIn = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpressionNoIn")
        stream_leftHandSideExpression = RewriteRuleSubtreeStream(self.adaptor, "rule leftHandSideExpression")
        stream_variableDeclarationList = RewriteRuleSubtreeStream(self.adaptor, "rule variableDeclarationList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 57):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:2: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn )
                alt202 = 3
                LA202 = self.input.LA(1)
                if LA202 == 152:
                    LA202_1 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 1, self.input)

                        raise nvae

                elif LA202 == LT:
                    LA202_2 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 2, self.input)

                        raise nvae

                elif LA202 == 75:
                    LA202_3 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 3, self.input)

                        raise nvae

                elif LA202 == 81:
                    LA202_4 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 4, self.input)

                        raise nvae

                elif LA202 == XMLComment:
                    LA202_5 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 5, self.input)

                        raise nvae

                elif LA202 == 93:
                    LA202_6 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (self.synpred235()) :
                        alt202 = 2
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 6, self.input)

                        raise nvae

                elif LA202 == 155:
                    LA202_7 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 7, self.input)

                        raise nvae

                elif LA202 == 156:
                    LA202_8 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 8, self.input)

                        raise nvae

                elif LA202 == 157:
                    LA202_9 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 9, self.input)

                        raise nvae

                elif LA202 == StringLiteral:
                    LA202_10 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 10, self.input)

                        raise nvae

                elif LA202 == NumericLiteral:
                    LA202_11 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 11, self.input)

                        raise nvae

                elif LA202 == 77:
                    LA202_12 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 12, self.input)

                        raise nvae

                elif LA202 == RegularExpressionHacks:
                    LA202_13 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 13, self.input)

                        raise nvae

                elif LA202 == 94:
                    LA202_14 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 14, self.input)

                        raise nvae

                elif LA202 == 84:
                    LA202_15 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 15, self.input)

                        raise nvae

                elif LA202 == 83:
                    LA202_16 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 16, self.input)

                        raise nvae

                elif LA202 == 113:
                    LA202_17 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 17, self.input)

                        raise nvae

                elif LA202 == Identifier or LA202 == 87 or LA202 == 88 or LA202 == 89 or LA202 == 101 or LA202 == 110 or LA202 == 153 or LA202 == 154:
                    LA202_18 = self.input.LA(2)

                    if (self.synpred230()) :
                        alt202 = 1
                    elif (True) :
                        alt202 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 18, self.input)

                        raise nvae

                elif LA202 == 79 or LA202 == 143 or LA202 == 145 or LA202 == 146 or LA202 == 147 or LA202 == 148 or LA202 == 149 or LA202 == 150 or LA202 == 151:
                    alt202 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("378:1: assignmentExpressionNoIn : ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn ) | let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn ) | conditionalExpressionNoIn );", 202, 0, self.input)

                    raise nvae

                if alt202 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn
                    self.following.append(self.FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2668)
                    leftHandSideExpression383 = self.leftHandSideExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_leftHandSideExpression.add(leftHandSideExpression383.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:27: ( LT )*
                    while True: #loop196
                        alt196 = 2
                        LA196_0 = self.input.LA(1)

                        if (LA196_0 == LT) :
                            alt196 = 1


                        if alt196 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT384 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2670)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT384)


                        else:
                            break #loop196


                    self.following.append(self.FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2673)
                    assignmentOperator385 = self.assignmentOperator()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentOperator.add(assignmentOperator385.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:50: ( LT )*
                    while True: #loop197
                        alt197 = 2
                        LA197_0 = self.input.LA(1)

                        if (LA197_0 == LT) :
                            LA197_2 = self.input.LA(2)

                            if (self.synpred229()) :
                                alt197 = 1




                        if alt197 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT386 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2675)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT386)


                        else:
                            break #loop197


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2678)
                    assignmentExpressionNoIn387 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpressionNoIn.add(assignmentExpressionNoIn387.tree)
                    # AST Rewrite
                    # elements: leftHandSideExpression, assignmentOperator, assignmentExpressionNoIn
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 380:3: -> ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:380:6: ^( ASSIGN leftHandSideExpression assignmentOperator assignmentExpressionNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ASSIGN, "ASSIGN"), root_1)

                        self.adaptor.addChild(root_1, stream_leftHandSideExpression.next())
                        self.adaptor.addChild(root_1, stream_assignmentOperator.next())
                        self.adaptor.addChild(root_1, stream_assignmentExpressionNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt202 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:4: let= 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn
                    let = self.input.LT(1)
                    self.match(self.input, 93, self.FOLLOW_93_in_assignmentExpressionNoIn2699)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_93.add(let)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:14: ( LT )*
                    while True: #loop198
                        alt198 = 2
                        LA198_0 = self.input.LA(1)

                        if (LA198_0 == LT) :
                            alt198 = 1


                        if alt198 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT388 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2701)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT388)


                        else:
                            break #loop198


                    char_literal389 = self.input.LT(1)
                    self.match(self.input, 84, self.FOLLOW_84_in_assignmentExpressionNoIn2704)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_84.add(char_literal389)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:22: ( LT )*
                    while True: #loop199
                        alt199 = 2
                        LA199_0 = self.input.LA(1)

                        if (LA199_0 == LT) :
                            alt199 = 1


                        if alt199 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT390 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2706)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT390)


                        else:
                            break #loop199


                    self.following.append(self.FOLLOW_variableDeclarationList_in_assignmentExpressionNoIn2709)
                    variableDeclarationList391 = self.variableDeclarationList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_variableDeclarationList.add(variableDeclarationList391.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:50: ( LT )*
                    while True: #loop200
                        alt200 = 2
                        LA200_0 = self.input.LA(1)

                        if (LA200_0 == LT) :
                            alt200 = 1


                        if alt200 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT392 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2711)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT392)


                        else:
                            break #loop200


                    char_literal393 = self.input.LT(1)
                    self.match(self.input, 86, self.FOLLOW_86_in_assignmentExpressionNoIn2714)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_86.add(char_literal393)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:58: ( LT )*
                    while True: #loop201
                        alt201 = 2
                        LA201_0 = self.input.LA(1)

                        if (LA201_0 == LT) :
                            LA201_2 = self.input.LA(2)

                            if (self.synpred234()) :
                                alt201 = 1




                        if alt201 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT394 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_assignmentExpressionNoIn2716)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT394)


                        else:
                            break #loop201


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2719)
                    assignmentExpressionNoIn395 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpressionNoIn.add(assignmentExpressionNoIn395.tree)
                    # AST Rewrite
                    # elements: let, variableDeclarationList, assignmentExpressionNoIn, let
                    # token labels: let
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_let = RewriteRuleTokenStream(self.adaptor, "token let", let)

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 382:3: -> ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:382:6: ^( SCOPE $let ^( VARDEFS $let variableDeclarationList ) assignmentExpressionNoIn )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(SCOPE, "SCOPE"), root_1)

                        self.adaptor.addChild(root_1, stream_let.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:382:19: ^( VARDEFS $let variableDeclarationList )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARDEFS, "VARDEFS"), root_2)

                        self.adaptor.addChild(root_2, stream_let.next())
                        self.adaptor.addChild(root_2, stream_variableDeclarationList.next())

                        self.adaptor.addChild(root_1, root_2)
                        self.adaptor.addChild(root_1, stream_assignmentExpressionNoIn.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt202 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:383:4: conditionalExpressionNoIn
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2746)
                    conditionalExpressionNoIn396 = self.conditionalExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, conditionalExpressionNoIn396.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 57, assignmentExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end assignmentExpressionNoIn

    class leftHandSideExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start leftHandSideExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:386:1: leftHandSideExpression : ( callExpression | newExpression );
    def leftHandSideExpression(self, ):

        retval = self.leftHandSideExpression_return()
        retval.start = self.input.LT(1)
        leftHandSideExpression_StartIndex = self.input.index()
        root_0 = None

        callExpression397 = None

        newExpression398 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 58):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:387:2: ( callExpression | newExpression )
                alt203 = 2
                LA203 = self.input.LA(1)
                if LA203 == 152:
                    LA203_1 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 1, self.input)

                        raise nvae

                elif LA203 == LT:
                    LA203_2 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 2, self.input)

                        raise nvae

                elif LA203 == 75:
                    LA203_3 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 3, self.input)

                        raise nvae

                elif LA203 == 81:
                    LA203_4 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 4, self.input)

                        raise nvae

                elif LA203 == XMLComment:
                    LA203_5 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 5, self.input)

                        raise nvae

                elif LA203 == Identifier or LA203 == 87 or LA203 == 88 or LA203 == 89 or LA203 == 93 or LA203 == 101 or LA203 == 110 or LA203 == 153 or LA203 == 154:
                    LA203_6 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 6, self.input)

                        raise nvae

                elif LA203 == 155:
                    LA203_7 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 7, self.input)

                        raise nvae

                elif LA203 == 156:
                    LA203_8 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 8, self.input)

                        raise nvae

                elif LA203 == 157:
                    LA203_9 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 9, self.input)

                        raise nvae

                elif LA203 == StringLiteral:
                    LA203_10 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 10, self.input)

                        raise nvae

                elif LA203 == NumericLiteral:
                    LA203_11 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 11, self.input)

                        raise nvae

                elif LA203 == 77:
                    LA203_12 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 12, self.input)

                        raise nvae

                elif LA203 == RegularExpressionHacks:
                    LA203_13 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 13, self.input)

                        raise nvae

                elif LA203 == 94:
                    LA203_14 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 14, self.input)

                        raise nvae

                elif LA203 == 84:
                    LA203_15 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 15, self.input)

                        raise nvae

                elif LA203 == 83:
                    LA203_16 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 16, self.input)

                        raise nvae

                elif LA203 == 113:
                    LA203_17 = self.input.LA(2)

                    if (self.synpred236()) :
                        alt203 = 1
                    elif (True) :
                        alt203 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 17, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("386:1: leftHandSideExpression : ( callExpression | newExpression );", 203, 0, self.input)

                    raise nvae

                if alt203 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:387:4: callExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_callExpression_in_leftHandSideExpression2758)
                    callExpression397 = self.callExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, callExpression397.tree)


                elif alt203 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:388:4: newExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_newExpression_in_leftHandSideExpression2763)
                    newExpression398 = self.newExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, newExpression398.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 58, leftHandSideExpression_StartIndex)

            pass

        return retval

    # $ANTLR end leftHandSideExpression

    class newExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start newExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:391:1: newExpression : ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) );
    def newExpression(self, ):

        retval = self.newExpression_return()
        retval.start = self.input.LT(1)
        newExpression_StartIndex = self.input.index()
        root_0 = None

        string_literal400 = None
        LT401 = None
        memberExpression399 = None

        newExpression402 = None


        string_literal400_tree = None
        LT401_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_113 = RewriteRuleTokenStream(self.adaptor, "token 113")
        stream_newExpression = RewriteRuleSubtreeStream(self.adaptor, "rule newExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 59):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:392:2: ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) )
                alt205 = 2
                LA205_0 = self.input.LA(1)

                if ((LT <= LA205_0 <= RegularExpressionHacks) or LA205_0 == 75 or LA205_0 == 77 or LA205_0 == 81 or (83 <= LA205_0 <= 84) or (87 <= LA205_0 <= 89) or (93 <= LA205_0 <= 94) or LA205_0 == 101 or LA205_0 == 110 or (152 <= LA205_0 <= 157)) :
                    alt205 = 1
                elif (LA205_0 == 113) :
                    LA205_17 = self.input.LA(2)

                    if (self.synpred237()) :
                        alt205 = 1
                    elif (True) :
                        alt205 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("391:1: newExpression : ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) );", 205, 17, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("391:1: newExpression : ( memberExpression | 'new' ( LT )* newExpression -> ^( NEW newExpression ) );", 205, 0, self.input)

                    raise nvae

                if alt205 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:392:4: memberExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_memberExpression_in_newExpression2775)
                    memberExpression399 = self.memberExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, memberExpression399.tree)


                elif alt205 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:393:4: 'new' ( LT )* newExpression
                    string_literal400 = self.input.LT(1)
                    self.match(self.input, 113, self.FOLLOW_113_in_newExpression2780)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_113.add(string_literal400)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:393:10: ( LT )*
                    while True: #loop204
                        alt204 = 2
                        LA204_0 = self.input.LA(1)

                        if (LA204_0 == LT) :
                            LA204_2 = self.input.LA(2)

                            if (self.synpred238()) :
                                alt204 = 1




                        if alt204 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT401 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_newExpression2782)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT401)


                        else:
                            break #loop204


                    self.following.append(self.FOLLOW_newExpression_in_newExpression2785)
                    newExpression402 = self.newExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_newExpression.add(newExpression402.tree)
                    # AST Rewrite
                    # elements: newExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 394:3: -> ^( NEW newExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:394:6: ^( NEW newExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(NEW, "NEW"), root_1)

                        self.adaptor.addChild(root_1, stream_newExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 59, newExpression_StartIndex)

            pass

        return retval

    # $ANTLR end newExpression

    class memberExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start memberExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:397:1: memberExpression : ( primaryExpression ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* ) | functionExpression ( ( LT )* memberExpressionSuffix )* | 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* ) );
    def memberExpression(self, ):

        retval = self.memberExpression_return()
        retval.start = self.input.LT(1)
        memberExpression_StartIndex = self.input.index()
        root_0 = None

        LT404 = None
        LT407 = None
        string_literal409 = None
        LT410 = None
        LT412 = None
        LT414 = None
        primaryExpression403 = None

        memberExpressionSuffix405 = None

        functionExpression406 = None

        memberExpressionSuffix408 = None

        memberExpression411 = None

        arguments413 = None

        memberExpressionSuffix415 = None


        LT404_tree = None
        LT407_tree = None
        string_literal409_tree = None
        LT410_tree = None
        LT412_tree = None
        LT414_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_113 = RewriteRuleTokenStream(self.adaptor, "token 113")
        stream_memberExpression = RewriteRuleSubtreeStream(self.adaptor, "rule memberExpression")
        stream_arguments = RewriteRuleSubtreeStream(self.adaptor, "rule arguments")
        stream_primaryExpression = RewriteRuleSubtreeStream(self.adaptor, "rule primaryExpression")
        stream_memberExpressionSuffix = RewriteRuleSubtreeStream(self.adaptor, "rule memberExpressionSuffix")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 60):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:2: ( primaryExpression ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* ) | functionExpression ( ( LT )* memberExpressionSuffix )* | 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* ) )
                alt214 = 3
                LA214 = self.input.LA(1)
                if LA214 == LT or LA214 == StringLiteral or LA214 == XMLComment or LA214 == NumericLiteral or LA214 == Identifier or LA214 == RegularExpressionHacks or LA214 == 75 or LA214 == 77 or LA214 == 81 or LA214 == 84 or LA214 == 87 or LA214 == 88 or LA214 == 89 or LA214 == 93 or LA214 == 94 or LA214 == 101 or LA214 == 110 or LA214 == 152 or LA214 == 153 or LA214 == 154 or LA214 == 155 or LA214 == 156 or LA214 == 157:
                    alt214 = 1
                elif LA214 == 83:
                    alt214 = 2
                elif LA214 == 113:
                    alt214 = 3
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("397:1: memberExpression : ( primaryExpression ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* ) | functionExpression ( ( LT )* memberExpressionSuffix )* | 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )* -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* ) );", 214, 0, self.input)

                    raise nvae

                if alt214 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:4: primaryExpression ( ( LT )* memberExpressionSuffix )*
                    self.following.append(self.FOLLOW_primaryExpression_in_memberExpression2807)
                    primaryExpression403 = self.primaryExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_primaryExpression.add(primaryExpression403.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:22: ( ( LT )* memberExpressionSuffix )*
                    while True: #loop207
                        alt207 = 2
                        LA207 = self.input.LA(1)
                        if LA207 == LT:
                            LA207_1 = self.input.LA(2)

                            if (self.synpred240()) :
                                alt207 = 1


                        elif LA207 == 94:
                            LA207_17 = self.input.LA(2)

                            if (self.synpred240()) :
                                alt207 = 1


                        elif LA207 == 114:
                            LA207_18 = self.input.LA(2)

                            if (self.synpred240()) :
                                alt207 = 1


                        elif LA207 == 78:
                            LA207_19 = self.input.LA(2)

                            if (self.synpred240()) :
                                alt207 = 1



                        if alt207 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:23: ( LT )* memberExpressionSuffix
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:23: ( LT )*
                            while True: #loop206
                                alt206 = 2
                                LA206_0 = self.input.LA(1)

                                if (LA206_0 == LT) :
                                    alt206 = 1


                                if alt206 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT404 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2810)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT404)


                                else:
                                    break #loop206


                            self.following.append(self.FOLLOW_memberExpressionSuffix_in_memberExpression2813)
                            memberExpressionSuffix405 = self.memberExpressionSuffix()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_memberExpressionSuffix.add(memberExpressionSuffix405.tree)


                        else:
                            break #loop207


                    # AST Rewrite
                    # elements: primaryExpression, memberExpressionSuffix
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 399:3: -> ^( VEXPR primaryExpression ( memberExpressionSuffix )* )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:399:6: ^( VEXPR primaryExpression ( memberExpressionSuffix )* )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VEXPR, "VEXPR"), root_1)

                        self.adaptor.addChild(root_1, stream_primaryExpression.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:399:32: ( memberExpressionSuffix )*
                        while stream_memberExpressionSuffix.hasNext():
                            self.adaptor.addChild(root_1, stream_memberExpressionSuffix.next())


                        stream_memberExpressionSuffix.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt214 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:4: functionExpression ( ( LT )* memberExpressionSuffix )*
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_functionExpression_in_memberExpression2833)
                    functionExpression406 = self.functionExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, functionExpression406.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:23: ( ( LT )* memberExpressionSuffix )*
                    while True: #loop209
                        alt209 = 2
                        LA209 = self.input.LA(1)
                        if LA209 == LT:
                            LA209_1 = self.input.LA(2)

                            if (self.synpred243()) :
                                alt209 = 1


                        elif LA209 == 94:
                            LA209_3 = self.input.LA(2)

                            if (self.synpred243()) :
                                alt209 = 1


                        elif LA209 == 114:
                            LA209_4 = self.input.LA(2)

                            if (self.synpred243()) :
                                alt209 = 1


                        elif LA209 == 78:
                            LA209_5 = self.input.LA(2)

                            if (self.synpred243()) :
                                alt209 = 1



                        if alt209 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:24: ( LT )* memberExpressionSuffix
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:26: ( LT )*
                            while True: #loop208
                                alt208 = 2
                                LA208_0 = self.input.LA(1)

                                if (LA208_0 == LT) :
                                    alt208 = 1


                                if alt208 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT407 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2836)
                                    if self.failed:
                                        return retval


                                else:
                                    break #loop208


                            self.following.append(self.FOLLOW_memberExpressionSuffix_in_memberExpression2840)
                            memberExpressionSuffix408 = self.memberExpressionSuffix()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, memberExpressionSuffix408.tree)


                        else:
                            break #loop209




                elif alt214 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:4: 'new' ( LT )* memberExpression ( LT )* arguments ( ( LT )* memberExpressionSuffix )*
                    string_literal409 = self.input.LT(1)
                    self.match(self.input, 113, self.FOLLOW_113_in_memberExpression2847)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_113.add(string_literal409)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:10: ( LT )*
                    while True: #loop210
                        alt210 = 2
                        LA210_0 = self.input.LA(1)

                        if (LA210_0 == LT) :
                            LA210_2 = self.input.LA(2)

                            if (self.synpred245()) :
                                alt210 = 1




                        if alt210 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT410 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2849)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT410)


                        else:
                            break #loop210


                    self.following.append(self.FOLLOW_memberExpression_in_memberExpression2852)
                    memberExpression411 = self.memberExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_memberExpression.add(memberExpression411.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:31: ( LT )*
                    while True: #loop211
                        alt211 = 2
                        LA211_0 = self.input.LA(1)

                        if (LA211_0 == LT) :
                            alt211 = 1


                        if alt211 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT412 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2854)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT412)


                        else:
                            break #loop211


                    self.following.append(self.FOLLOW_arguments_in_memberExpression2857)
                    arguments413 = self.arguments()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_arguments.add(arguments413.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:45: ( ( LT )* memberExpressionSuffix )*
                    while True: #loop213
                        alt213 = 2
                        LA213 = self.input.LA(1)
                        if LA213 == LT:
                            LA213_1 = self.input.LA(2)

                            if (self.synpred248()) :
                                alt213 = 1


                        elif LA213 == 94:
                            LA213_17 = self.input.LA(2)

                            if (self.synpred248()) :
                                alt213 = 1


                        elif LA213 == 114:
                            LA213_18 = self.input.LA(2)

                            if (self.synpred248()) :
                                alt213 = 1


                        elif LA213 == 78:
                            LA213_19 = self.input.LA(2)

                            if (self.synpred248()) :
                                alt213 = 1



                        if alt213 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:46: ( LT )* memberExpressionSuffix
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:46: ( LT )*
                            while True: #loop212
                                alt212 = 2
                                LA212_0 = self.input.LA(1)

                                if (LA212_0 == LT) :
                                    alt212 = 1


                                if alt212 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT414 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_memberExpression2860)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT414)


                                else:
                                    break #loop212


                            self.following.append(self.FOLLOW_memberExpressionSuffix_in_memberExpression2863)
                            memberExpressionSuffix415 = self.memberExpressionSuffix()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_memberExpressionSuffix.add(memberExpressionSuffix415.tree)


                        else:
                            break #loop213


                    # AST Rewrite
                    # elements: memberExpression, memberExpressionSuffix, arguments
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 402:3: -> ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:402:6: ^( VEXPR ^( NEW ^( CALL memberExpression arguments ) ) ( memberExpressionSuffix )* )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VEXPR, "VEXPR"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:402:14: ^( NEW ^( CALL memberExpression arguments ) )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(NEW, "NEW"), root_2)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:402:20: ^( CALL memberExpression arguments )
                        root_3 = self.adaptor.nil()
                        root_3 = self.adaptor.becomeRoot(self.adaptor.createFromType(CALL, "CALL"), root_3)

                        self.adaptor.addChild(root_3, stream_memberExpression.next())
                        self.adaptor.addChild(root_3, stream_arguments.next())

                        self.adaptor.addChild(root_2, root_3)

                        self.adaptor.addChild(root_1, root_2)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:402:56: ( memberExpressionSuffix )*
                        while stream_memberExpressionSuffix.hasNext():
                            self.adaptor.addChild(root_1, stream_memberExpressionSuffix.next())


                        stream_memberExpressionSuffix.reset();

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 60, memberExpression_StartIndex)

            pass

        return retval

    # $ANTLR end memberExpression

    class memberExpressionSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start memberExpressionSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:405:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );
    def memberExpressionSuffix(self, ):

        retval = self.memberExpressionSuffix_return()
        retval.start = self.input.LT(1)
        memberExpressionSuffix_StartIndex = self.input.index()
        root_0 = None

        indexSuffix416 = None

        propertyReferenceSuffix417 = None

        descendentSuffix418 = None

        namespaceSuffix419 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 61):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:406:2: ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix )
                alt215 = 4
                LA215 = self.input.LA(1)
                if LA215 == 94:
                    alt215 = 1
                elif LA215 == 114:
                    LA215_2 = self.input.LA(2)

                    if (LA215_2 == 114) :
                        alt215 = 3
                    elif (LA215_2 == LT or LA215_2 == Identifier or (87 <= LA215_2 <= 89) or LA215_2 == 93 or LA215_2 == 101 or LA215_2 == 110 or LA215_2 == 115 or (153 <= LA215_2 <= 154)) :
                        alt215 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("405:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 215, 2, self.input)

                        raise nvae

                elif LA215 == 78:
                    alt215 = 4
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("405:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 215, 0, self.input)

                    raise nvae

                if alt215 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:406:4: indexSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_indexSuffix_in_memberExpressionSuffix2900)
                    indexSuffix416 = self.indexSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, indexSuffix416.tree)


                elif alt215 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:407:4: propertyReferenceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2905)
                    propertyReferenceSuffix417 = self.propertyReferenceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, propertyReferenceSuffix417.tree)


                elif alt215 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:408:4: descendentSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_descendentSuffix_in_memberExpressionSuffix2910)
                    descendentSuffix418 = self.descendentSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, descendentSuffix418.tree)


                elif alt215 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:409:4: namespaceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_namespaceSuffix_in_memberExpressionSuffix2916)
                    namespaceSuffix419 = self.namespaceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, namespaceSuffix419.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 61, memberExpressionSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end memberExpressionSuffix

    class callExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start callExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:415:1: callExpression : memberExpression ( LT )* ( '.' )? ( LT )* arguments ( ( LT )* callExpressionSuffix )* -> ^( CALL memberExpression arguments ( callExpressionSuffix )* ) ;
    def callExpression(self, ):

        retval = self.callExpression_return()
        retval.start = self.input.LT(1)
        callExpression_StartIndex = self.input.index()
        root_0 = None

        LT421 = None
        char_literal422 = None
        LT423 = None
        LT425 = None
        memberExpression420 = None

        arguments424 = None

        callExpressionSuffix426 = None


        LT421_tree = None
        char_literal422_tree = None
        LT423_tree = None
        LT425_tree = None
        stream_114 = RewriteRuleTokenStream(self.adaptor, "token 114")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_memberExpression = RewriteRuleSubtreeStream(self.adaptor, "rule memberExpression")
        stream_arguments = RewriteRuleSubtreeStream(self.adaptor, "rule arguments")
        stream_callExpressionSuffix = RewriteRuleSubtreeStream(self.adaptor, "rule callExpressionSuffix")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 62):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:2: ( memberExpression ( LT )* ( '.' )? ( LT )* arguments ( ( LT )* callExpressionSuffix )* -> ^( CALL memberExpression arguments ( callExpressionSuffix )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:4: memberExpression ( LT )* ( '.' )? ( LT )* arguments ( ( LT )* callExpressionSuffix )*
                self.following.append(self.FOLLOW_memberExpression_in_callExpression2931)
                memberExpression420 = self.memberExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_memberExpression.add(memberExpression420.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:21: ( LT )*
                while True: #loop216
                    alt216 = 2
                    LA216_0 = self.input.LA(1)

                    if (LA216_0 == LT) :
                        LA216_2 = self.input.LA(2)

                        if (self.synpred252()) :
                            alt216 = 1




                    if alt216 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT421 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_callExpression2933)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT421)


                    else:
                        break #loop216


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:25: ( '.' )?
                alt217 = 2
                LA217_0 = self.input.LA(1)

                if (LA217_0 == 114) :
                    alt217 = 1
                if alt217 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: '.'
                    char_literal422 = self.input.LT(1)
                    self.match(self.input, 114, self.FOLLOW_114_in_callExpression2936)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_114.add(char_literal422)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:30: ( LT )*
                while True: #loop218
                    alt218 = 2
                    LA218_0 = self.input.LA(1)

                    if (LA218_0 == LT) :
                        alt218 = 1


                    if alt218 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT423 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_callExpression2939)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT423)


                    else:
                        break #loop218


                self.following.append(self.FOLLOW_arguments_in_callExpression2942)
                arguments424 = self.arguments()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_arguments.add(arguments424.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:44: ( ( LT )* callExpressionSuffix )*
                while True: #loop220
                    alt220 = 2
                    LA220 = self.input.LA(1)
                    if LA220 == LT:
                        LA220_1 = self.input.LA(2)

                        if (self.synpred256()) :
                            alt220 = 1


                    elif LA220 == 94:
                        LA220_17 = self.input.LA(2)

                        if (self.synpred256()) :
                            alt220 = 1


                    elif LA220 == 114:
                        LA220_18 = self.input.LA(2)

                        if (self.synpred256()) :
                            alt220 = 1


                    elif LA220 == 78:
                        LA220_19 = self.input.LA(2)

                        if (self.synpred256()) :
                            alt220 = 1


                    elif LA220 == 84:
                        LA220_20 = self.input.LA(2)

                        if (self.synpred256()) :
                            alt220 = 1



                    if alt220 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:45: ( LT )* callExpressionSuffix
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:45: ( LT )*
                        while True: #loop219
                            alt219 = 2
                            LA219_0 = self.input.LA(1)

                            if (LA219_0 == LT) :
                                alt219 = 1


                            if alt219 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT425 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_callExpression2945)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT425)


                            else:
                                break #loop219


                        self.following.append(self.FOLLOW_callExpressionSuffix_in_callExpression2948)
                        callExpressionSuffix426 = self.callExpressionSuffix()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_callExpressionSuffix.add(callExpressionSuffix426.tree)


                    else:
                        break #loop220


                # AST Rewrite
                # elements: callExpressionSuffix, arguments, memberExpression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 417:3: -> ^( CALL memberExpression arguments ( callExpressionSuffix )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:6: ^( CALL memberExpression arguments ( callExpressionSuffix )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(CALL, "CALL"), root_1)

                    self.adaptor.addChild(root_1, stream_memberExpression.next())
                    self.adaptor.addChild(root_1, stream_arguments.next())
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:417:40: ( callExpressionSuffix )*
                    while stream_callExpressionSuffix.hasNext():
                        self.adaptor.addChild(root_1, stream_callExpressionSuffix.next())


                    stream_callExpressionSuffix.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 62, callExpression_StartIndex)

            pass

        return retval

    # $ANTLR end callExpression

    class callExpressionSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start callExpressionSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:420:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );
    def callExpressionSuffix(self, ):

        retval = self.callExpressionSuffix_return()
        retval.start = self.input.LT(1)
        callExpressionSuffix_StartIndex = self.input.index()
        root_0 = None

        arguments427 = None

        indexSuffix428 = None

        propertyReferenceSuffix429 = None

        descendentSuffix430 = None

        namespaceSuffix431 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 63):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:421:2: ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix )
                alt221 = 5
                LA221 = self.input.LA(1)
                if LA221 == 84:
                    alt221 = 1
                elif LA221 == 94:
                    alt221 = 2
                elif LA221 == 114:
                    LA221_3 = self.input.LA(2)

                    if (LA221_3 == 114) :
                        alt221 = 4
                    elif (LA221_3 == LT or LA221_3 == Identifier or (87 <= LA221_3 <= 89) or LA221_3 == 93 or LA221_3 == 101 or LA221_3 == 110 or LA221_3 == 115 or (153 <= LA221_3 <= 154)) :
                        alt221 = 3
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("420:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 221, 3, self.input)

                        raise nvae

                elif LA221 == 78:
                    alt221 = 5
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("420:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix | descendentSuffix | namespaceSuffix );", 221, 0, self.input)

                    raise nvae

                if alt221 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:421:4: arguments
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_arguments_in_callExpressionSuffix2977)
                    arguments427 = self.arguments()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, arguments427.tree)


                elif alt221 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:422:4: indexSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_indexSuffix_in_callExpressionSuffix2982)
                    indexSuffix428 = self.indexSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, indexSuffix428.tree)


                elif alt221 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:423:4: propertyReferenceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2987)
                    propertyReferenceSuffix429 = self.propertyReferenceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, propertyReferenceSuffix429.tree)


                elif alt221 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:424:4: descendentSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_descendentSuffix_in_callExpressionSuffix2992)
                    descendentSuffix430 = self.descendentSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, descendentSuffix430.tree)


                elif alt221 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:425:4: namespaceSuffix
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_namespaceSuffix_in_callExpressionSuffix2998)
                    namespaceSuffix431 = self.namespaceSuffix()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, namespaceSuffix431.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 63, callExpressionSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end callExpressionSuffix

    class arguments_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start arguments
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:431:1: arguments : '(' ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )? ( LT )* ')' -> ^( ARGS ( assignmentExpression )* ) ;
    def arguments(self, ):

        retval = self.arguments_return()
        retval.start = self.input.LT(1)
        arguments_StartIndex = self.input.index()
        root_0 = None

        char_literal432 = None
        LT433 = None
        LT435 = None
        char_literal436 = None
        LT437 = None
        LT439 = None
        LT440 = None
        char_literal441 = None
        assignmentExpression434 = None

        assignmentExpression438 = None


        char_literal432_tree = None
        LT433_tree = None
        LT435_tree = None
        char_literal436_tree = None
        LT437_tree = None
        LT439_tree = None
        LT440_tree = None
        char_literal441_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_85 = RewriteRuleTokenStream(self.adaptor, "token 85")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 64):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:2: ( '(' ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )? ( LT )* ')' -> ^( ARGS ( assignmentExpression )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:4: '(' ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )? ( LT )* ')'
                char_literal432 = self.input.LT(1)
                self.match(self.input, 84, self.FOLLOW_84_in_arguments3013)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_84.add(char_literal432)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:8: ( ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )* )?
                alt227 = 2
                alt227 = self.dfa227.predict(self.input)
                if alt227 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:9: ( LT )* assignmentExpression ( LT )* ( ',' ( LT )* assignmentExpression ( LT )* )*
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:9: ( LT )*
                    while True: #loop222
                        alt222 = 2
                        LA222_0 = self.input.LA(1)

                        if (LA222_0 == LT) :
                            LA222_2 = self.input.LA(2)

                            if (self.synpred261()) :
                                alt222 = 1




                        if alt222 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT433 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arguments3016)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT433)


                        else:
                            break #loop222


                    self.following.append(self.FOLLOW_assignmentExpression_in_arguments3019)
                    assignmentExpression434 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression434.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:34: ( LT )*
                    while True: #loop223
                        alt223 = 2
                        LA223_0 = self.input.LA(1)

                        if (LA223_0 == LT) :
                            LA223_2 = self.input.LA(2)

                            if (self.synpred262()) :
                                alt223 = 1




                        if alt223 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT435 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arguments3021)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT435)


                        else:
                            break #loop223


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:38: ( ',' ( LT )* assignmentExpression ( LT )* )*
                    while True: #loop226
                        alt226 = 2
                        LA226_0 = self.input.LA(1)

                        if (LA226_0 == 85) :
                            alt226 = 1


                        if alt226 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:39: ',' ( LT )* assignmentExpression ( LT )*
                            char_literal436 = self.input.LT(1)
                            self.match(self.input, 85, self.FOLLOW_85_in_arguments3025)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_85.add(char_literal436)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:43: ( LT )*
                            while True: #loop224
                                alt224 = 2
                                LA224_0 = self.input.LA(1)

                                if (LA224_0 == LT) :
                                    LA224_2 = self.input.LA(2)

                                    if (self.synpred263()) :
                                        alt224 = 1




                                if alt224 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT437 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_arguments3027)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT437)


                                else:
                                    break #loop224


                            self.following.append(self.FOLLOW_assignmentExpression_in_arguments3030)
                            assignmentExpression438 = self.assignmentExpression()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_assignmentExpression.add(assignmentExpression438.tree)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:68: ( LT )*
                            while True: #loop225
                                alt225 = 2
                                LA225_0 = self.input.LA(1)

                                if (LA225_0 == LT) :
                                    LA225_1 = self.input.LA(2)

                                    if (self.synpred264()) :
                                        alt225 = 1




                                if alt225 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT439 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_arguments3032)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT439)


                                else:
                                    break #loop225




                        else:
                            break #loop226





                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:76: ( LT )*
                while True: #loop228
                    alt228 = 2
                    LA228_0 = self.input.LA(1)

                    if (LA228_0 == LT) :
                        alt228 = 1


                    if alt228 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT440 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_arguments3039)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT440)


                    else:
                        break #loop228


                char_literal441 = self.input.LT(1)
                self.match(self.input, 86, self.FOLLOW_86_in_arguments3042)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_86.add(char_literal441)
                # AST Rewrite
                # elements: assignmentExpression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 433:3: -> ^( ARGS ( assignmentExpression )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:433:6: ^( ARGS ( assignmentExpression )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARGS, "ARGS"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:433:13: ( assignmentExpression )*
                    while stream_assignmentExpression.hasNext():
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())


                    stream_assignmentExpression.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 64, arguments_StartIndex)

            pass

        return retval

    # $ANTLR end arguments

    class indexSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start indexSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:436:1: indexSuffix : '[' ( LT )* expression ( LT )* ']' -> ^( INDEXREF expression ) ;
    def indexSuffix(self, ):

        retval = self.indexSuffix_return()
        retval.start = self.input.LT(1)
        indexSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal442 = None
        LT443 = None
        LT445 = None
        char_literal446 = None
        expression444 = None


        char_literal442_tree = None
        LT443_tree = None
        LT445_tree = None
        char_literal446_tree = None
        stream_95 = RewriteRuleTokenStream(self.adaptor, "token 95")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_94 = RewriteRuleTokenStream(self.adaptor, "token 94")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 65):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:2: ( '[' ( LT )* expression ( LT )* ']' -> ^( INDEXREF expression ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:4: '[' ( LT )* expression ( LT )* ']'
                char_literal442 = self.input.LT(1)
                self.match(self.input, 94, self.FOLLOW_94_in_indexSuffix3065)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_94.add(char_literal442)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:8: ( LT )*
                while True: #loop229
                    alt229 = 2
                    LA229_0 = self.input.LA(1)

                    if (LA229_0 == LT) :
                        LA229_2 = self.input.LA(2)

                        if (self.synpred268()) :
                            alt229 = 1




                    if alt229 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT443 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_indexSuffix3067)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT443)


                    else:
                        break #loop229


                self.following.append(self.FOLLOW_expression_in_indexSuffix3070)
                expression444 = self.expression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_expression.add(expression444.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:23: ( LT )*
                while True: #loop230
                    alt230 = 2
                    LA230_0 = self.input.LA(1)

                    if (LA230_0 == LT) :
                        alt230 = 1


                    if alt230 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT445 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_indexSuffix3072)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT445)


                    else:
                        break #loop230


                char_literal446 = self.input.LT(1)
                self.match(self.input, 95, self.FOLLOW_95_in_indexSuffix3075)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_95.add(char_literal446)
                # AST Rewrite
                # elements: expression
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 438:3: -> ^( INDEXREF expression )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:438:6: ^( INDEXREF expression )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(INDEXREF, "INDEXREF"), root_1)

                    self.adaptor.addChild(root_1, stream_expression.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 65, indexSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end indexSuffix

    class propertyReferenceSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start propertyReferenceSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:441:1: propertyReferenceSuffix : '.' ( LT )* e4xIdentifier -> ^( PROPREF e4xIdentifier ) ;
    def propertyReferenceSuffix(self, ):

        retval = self.propertyReferenceSuffix_return()
        retval.start = self.input.LT(1)
        propertyReferenceSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal447 = None
        LT448 = None
        e4xIdentifier449 = None


        char_literal447_tree = None
        LT448_tree = None
        stream_114 = RewriteRuleTokenStream(self.adaptor, "token 114")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_e4xIdentifier = RewriteRuleSubtreeStream(self.adaptor, "rule e4xIdentifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 66):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:442:2: ( '.' ( LT )* e4xIdentifier -> ^( PROPREF e4xIdentifier ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:442:4: '.' ( LT )* e4xIdentifier
                char_literal447 = self.input.LT(1)
                self.match(self.input, 114, self.FOLLOW_114_in_propertyReferenceSuffix3098)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_114.add(char_literal447)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:442:8: ( LT )*
                while True: #loop231
                    alt231 = 2
                    LA231_0 = self.input.LA(1)

                    if (LA231_0 == LT) :
                        alt231 = 1


                    if alt231 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT448 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_propertyReferenceSuffix3100)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT448)


                    else:
                        break #loop231


                self.following.append(self.FOLLOW_e4xIdentifier_in_propertyReferenceSuffix3103)
                e4xIdentifier449 = self.e4xIdentifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_e4xIdentifier.add(e4xIdentifier449.tree)
                # AST Rewrite
                # elements: e4xIdentifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 443:3: -> ^( PROPREF e4xIdentifier )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:443:6: ^( PROPREF e4xIdentifier )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROPREF, "PROPREF"), root_1)

                    self.adaptor.addChild(root_1, stream_e4xIdentifier.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 66, propertyReferenceSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end propertyReferenceSuffix

    class descendentSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start descendentSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:446:1: descendentSuffix : '.' '.' ( LT )* e4xIdentifier -> ^( DESCREF e4xIdentifier ) ;
    def descendentSuffix(self, ):

        retval = self.descendentSuffix_return()
        retval.start = self.input.LT(1)
        descendentSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal450 = None
        char_literal451 = None
        LT452 = None
        e4xIdentifier453 = None


        char_literal450_tree = None
        char_literal451_tree = None
        LT452_tree = None
        stream_114 = RewriteRuleTokenStream(self.adaptor, "token 114")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_e4xIdentifier = RewriteRuleSubtreeStream(self.adaptor, "rule e4xIdentifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 67):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:447:2: ( '.' '.' ( LT )* e4xIdentifier -> ^( DESCREF e4xIdentifier ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:447:4: '.' '.' ( LT )* e4xIdentifier
                char_literal450 = self.input.LT(1)
                self.match(self.input, 114, self.FOLLOW_114_in_descendentSuffix3124)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_114.add(char_literal450)
                char_literal451 = self.input.LT(1)
                self.match(self.input, 114, self.FOLLOW_114_in_descendentSuffix3126)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_114.add(char_literal451)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:447:12: ( LT )*
                while True: #loop232
                    alt232 = 2
                    LA232_0 = self.input.LA(1)

                    if (LA232_0 == LT) :
                        alt232 = 1


                    if alt232 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT452 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_descendentSuffix3128)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT452)


                    else:
                        break #loop232


                self.following.append(self.FOLLOW_e4xIdentifier_in_descendentSuffix3131)
                e4xIdentifier453 = self.e4xIdentifier()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_e4xIdentifier.add(e4xIdentifier453.tree)
                # AST Rewrite
                # elements: e4xIdentifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 448:3: -> ^( DESCREF e4xIdentifier )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:448:6: ^( DESCREF e4xIdentifier )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(DESCREF, "DESCREF"), root_1)

                    self.adaptor.addChild(root_1, stream_e4xIdentifier.next())

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 67, descendentSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end descendentSuffix

    class namespaceSuffix_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start namespaceSuffix
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:451:1: namespaceSuffix : ':' ':' ( LT )* ( e4xIdentifier )? -> ^( NSREF ( e4xIdentifier )? ) ;
    def namespaceSuffix(self, ):

        retval = self.namespaceSuffix_return()
        retval.start = self.input.LT(1)
        namespaceSuffix_StartIndex = self.input.index()
        root_0 = None

        char_literal454 = None
        char_literal455 = None
        LT456 = None
        e4xIdentifier457 = None


        char_literal454_tree = None
        char_literal455_tree = None
        LT456_tree = None
        stream_78 = RewriteRuleTokenStream(self.adaptor, "token 78")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_e4xIdentifier = RewriteRuleSubtreeStream(self.adaptor, "rule e4xIdentifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 68):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:2: ( ':' ':' ( LT )* ( e4xIdentifier )? -> ^( NSREF ( e4xIdentifier )? ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:4: ':' ':' ( LT )* ( e4xIdentifier )?
                char_literal454 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_namespaceSuffix3152)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_78.add(char_literal454)
                char_literal455 = self.input.LT(1)
                self.match(self.input, 78, self.FOLLOW_78_in_namespaceSuffix3154)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_78.add(char_literal455)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:12: ( LT )*
                while True: #loop233
                    alt233 = 2
                    LA233_0 = self.input.LA(1)

                    if (LA233_0 == LT) :
                        LA233_2 = self.input.LA(2)

                        if (self.synpred272()) :
                            alt233 = 1




                    if alt233 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT456 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_namespaceSuffix3156)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT456)


                    else:
                        break #loop233


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:16: ( e4xIdentifier )?
                alt234 = 2
                LA234_0 = self.input.LA(1)

                if (LA234_0 == Identifier or (87 <= LA234_0 <= 89) or LA234_0 == 93 or LA234_0 == 101 or LA234_0 == 110 or (153 <= LA234_0 <= 154)) :
                    alt234 = 1
                elif (LA234_0 == 115) :
                    LA234_2 = self.input.LA(2)

                    if (self.synpred273()) :
                        alt234 = 1
                if alt234 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: e4xIdentifier
                    self.following.append(self.FOLLOW_e4xIdentifier_in_namespaceSuffix3159)
                    e4xIdentifier457 = self.e4xIdentifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_e4xIdentifier.add(e4xIdentifier457.tree)



                # AST Rewrite
                # elements: e4xIdentifier
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 453:3: -> ^( NSREF ( e4xIdentifier )? )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:453:6: ^( NSREF ( e4xIdentifier )? )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(NSREF, "NSREF"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:453:14: ( e4xIdentifier )?
                    if stream_e4xIdentifier.hasNext():
                        self.adaptor.addChild(root_1, stream_e4xIdentifier.next())


                    stream_e4xIdentifier.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 68, namespaceSuffix_StartIndex)

            pass

        return retval

    # $ANTLR end namespaceSuffix

    class e4xIdentifier_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start e4xIdentifier
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:456:1: e4xIdentifier : ( identifier | '*' );
    def e4xIdentifier(self, ):

        retval = self.e4xIdentifier_return()
        retval.start = self.input.LT(1)
        e4xIdentifier_StartIndex = self.input.index()
        root_0 = None

        char_literal459 = None
        identifier458 = None


        char_literal459_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 69):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:457:2: ( identifier | '*' )
                alt235 = 2
                LA235_0 = self.input.LA(1)

                if (LA235_0 == Identifier or (87 <= LA235_0 <= 89) or LA235_0 == 93 or LA235_0 == 101 or LA235_0 == 110 or (153 <= LA235_0 <= 154)) :
                    alt235 = 1
                elif (LA235_0 == 115) :
                    alt235 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("456:1: e4xIdentifier : ( identifier | '*' );", 235, 0, self.input)

                    raise nvae

                if alt235 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:457:4: identifier
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_identifier_in_e4xIdentifier3182)
                    identifier458 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier458.tree)


                elif alt235 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:458:4: '*'
                    root_0 = self.adaptor.nil()

                    char_literal459 = self.input.LT(1)
                    self.match(self.input, 115, self.FOLLOW_115_in_e4xIdentifier3187)
                    if self.failed:
                        return retval

                    char_literal459_tree = self.adaptor.createWithPayload(char_literal459)
                    self.adaptor.addChild(root_0, char_literal459_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 69, e4xIdentifier_StartIndex)

            pass

        return retval

    # $ANTLR end e4xIdentifier

    class assignmentOperator_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start assignmentOperator
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:461:1: assignmentOperator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' );
    def assignmentOperator(self, ):

        retval = self.assignmentOperator_return()
        retval.start = self.input.LT(1)
        assignmentOperator_StartIndex = self.input.index()
        root_0 = None

        set460 = None

        set460_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 70):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:462:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                root_0 = self.adaptor.nil()

                set460 = self.input.LT(1)
                if self.input.LA(1) == 80 or (116 <= self.input.LA(1) <= 126):
                    self.input.consume();
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set460))
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_assignmentOperator0
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 70, assignmentOperator_StartIndex)

            pass

        return retval

    # $ANTLR end assignmentOperator

    class conditionalExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start conditionalExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:465:1: conditionalExpression : logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )? ;
    def conditionalExpression(self, ):

        retval = self.conditionalExpression_return()
        retval.start = self.input.LT(1)
        conditionalExpression_StartIndex = self.input.index()
        root_0 = None

        LT462 = None
        char_literal463 = None
        LT464 = None
        LT466 = None
        char_literal467 = None
        LT468 = None
        logicalORExpression461 = None

        assignmentExpression465 = None

        assignmentExpression469 = None


        LT462_tree = None
        char_literal463_tree = None
        LT464_tree = None
        LT466_tree = None
        char_literal467_tree = None
        LT468_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 71):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:2: ( logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:4: logicalORExpression ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )?
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalORExpression_in_conditionalExpression3254)
                logicalORExpression461 = self.logicalORExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalORExpression461.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:24: ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )?
                alt240 = 2
                LA240_0 = self.input.LA(1)

                if (LA240_0 == LT) :
                    LA240_1 = self.input.LA(2)

                    if (self.synpred290()) :
                        alt240 = 1
                elif (LA240_0 == 127) :
                    LA240_2 = self.input.LA(2)

                    if (self.synpred290()) :
                        alt240 = 1
                if alt240 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:25: ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:27: ( LT )*
                    while True: #loop236
                        alt236 = 2
                        LA236_0 = self.input.LA(1)

                        if (LA236_0 == LT) :
                            alt236 = 1


                        if alt236 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT462 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3257)
                            if self.failed:
                                return retval


                        else:
                            break #loop236


                    char_literal463 = self.input.LT(1)
                    self.match(self.input, 127, self.FOLLOW_127_in_conditionalExpression3261)
                    if self.failed:
                        return retval

                    char_literal463_tree = self.adaptor.createWithPayload(char_literal463)
                    self.adaptor.addChild(root_0, char_literal463_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:36: ( LT )*
                    while True: #loop237
                        alt237 = 2
                        LA237_0 = self.input.LA(1)

                        if (LA237_0 == LT) :
                            LA237_2 = self.input.LA(2)

                            if (self.synpred287()) :
                                alt237 = 1




                        if alt237 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT464 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3263)
                            if self.failed:
                                return retval


                        else:
                            break #loop237


                    self.following.append(self.FOLLOW_assignmentExpression_in_conditionalExpression3267)
                    assignmentExpression465 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpression465.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:62: ( LT )*
                    while True: #loop238
                        alt238 = 2
                        LA238_0 = self.input.LA(1)

                        if (LA238_0 == LT) :
                            alt238 = 1


                        if alt238 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT466 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3269)
                            if self.failed:
                                return retval


                        else:
                            break #loop238


                    char_literal467 = self.input.LT(1)
                    self.match(self.input, 78, self.FOLLOW_78_in_conditionalExpression3273)
                    if self.failed:
                        return retval

                    char_literal467_tree = self.adaptor.createWithPayload(char_literal467)
                    self.adaptor.addChild(root_0, char_literal467_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:71: ( LT )*
                    while True: #loop239
                        alt239 = 2
                        LA239_0 = self.input.LA(1)

                        if (LA239_0 == LT) :
                            LA239_2 = self.input.LA(2)

                            if (self.synpred289()) :
                                alt239 = 1




                        if alt239 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT468 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpression3275)
                            if self.failed:
                                return retval


                        else:
                            break #loop239


                    self.following.append(self.FOLLOW_assignmentExpression_in_conditionalExpression3279)
                    assignmentExpression469 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpression469.tree)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 71, conditionalExpression_StartIndex)

            pass

        return retval

    # $ANTLR end conditionalExpression

    class conditionalExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start conditionalExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:469:1: conditionalExpressionNoIn : logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )? ;
    def conditionalExpressionNoIn(self, ):

        retval = self.conditionalExpressionNoIn_return()
        retval.start = self.input.LT(1)
        conditionalExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT471 = None
        char_literal472 = None
        LT473 = None
        LT475 = None
        char_literal476 = None
        LT477 = None
        logicalORExpressionNoIn470 = None

        assignmentExpressionNoIn474 = None

        assignmentExpressionNoIn478 = None


        LT471_tree = None
        char_literal472_tree = None
        LT473_tree = None
        LT475_tree = None
        char_literal476_tree = None
        LT477_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 72):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:2: ( logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:4: logicalORExpressionNoIn ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )?
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3292)
                logicalORExpressionNoIn470 = self.logicalORExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalORExpressionNoIn470.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:28: ( ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn )?
                alt245 = 2
                alt245 = self.dfa245.predict(self.input)
                if alt245 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:29: ( LT )* '?' ( LT )* assignmentExpressionNoIn ( LT )* ':' ( LT )* assignmentExpressionNoIn
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:31: ( LT )*
                    while True: #loop241
                        alt241 = 2
                        LA241_0 = self.input.LA(1)

                        if (LA241_0 == LT) :
                            alt241 = 1


                        if alt241 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT471 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3295)
                            if self.failed:
                                return retval


                        else:
                            break #loop241


                    char_literal472 = self.input.LT(1)
                    self.match(self.input, 127, self.FOLLOW_127_in_conditionalExpressionNoIn3299)
                    if self.failed:
                        return retval

                    char_literal472_tree = self.adaptor.createWithPayload(char_literal472)
                    self.adaptor.addChild(root_0, char_literal472_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:40: ( LT )*
                    while True: #loop242
                        alt242 = 2
                        LA242_0 = self.input.LA(1)

                        if (LA242_0 == LT) :
                            LA242_2 = self.input.LA(2)

                            if (self.synpred292()) :
                                alt242 = 1




                        if alt242 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT473 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3301)
                            if self.failed:
                                return retval


                        else:
                            break #loop242


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3305)
                    assignmentExpressionNoIn474 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpressionNoIn474.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:70: ( LT )*
                    while True: #loop243
                        alt243 = 2
                        LA243_0 = self.input.LA(1)

                        if (LA243_0 == LT) :
                            alt243 = 1


                        if alt243 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT475 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3307)
                            if self.failed:
                                return retval


                        else:
                            break #loop243


                    char_literal476 = self.input.LT(1)
                    self.match(self.input, 78, self.FOLLOW_78_in_conditionalExpressionNoIn3311)
                    if self.failed:
                        return retval

                    char_literal476_tree = self.adaptor.createWithPayload(char_literal476)
                    self.adaptor.addChild(root_0, char_literal476_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:79: ( LT )*
                    while True: #loop244
                        alt244 = 2
                        LA244_0 = self.input.LA(1)

                        if (LA244_0 == LT) :
                            LA244_2 = self.input.LA(2)

                            if (self.synpred294()) :
                                alt244 = 1




                        if alt244 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT477 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_conditionalExpressionNoIn3313)
                            if self.failed:
                                return retval


                        else:
                            break #loop244


                    self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3317)
                    assignmentExpressionNoIn478 = self.assignmentExpressionNoIn()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, assignmentExpressionNoIn478.tree)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 72, conditionalExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end conditionalExpressionNoIn

    class logicalORExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalORExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:473:1: logicalORExpression : logicalANDExpression ( ( LT )* '||' ( LT )* logicalANDExpression )* ;
    def logicalORExpression(self, ):

        retval = self.logicalORExpression_return()
        retval.start = self.input.LT(1)
        logicalORExpression_StartIndex = self.input.index()
        root_0 = None

        LT480 = None
        string_literal481 = None
        LT482 = None
        logicalANDExpression479 = None

        logicalANDExpression483 = None


        LT480_tree = None
        string_literal481_tree = None
        LT482_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 73):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:2: ( logicalANDExpression ( ( LT )* '||' ( LT )* logicalANDExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:4: logicalANDExpression ( ( LT )* '||' ( LT )* logicalANDExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalANDExpression_in_logicalORExpression3330)
                logicalANDExpression479 = self.logicalANDExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalANDExpression479.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:25: ( ( LT )* '||' ( LT )* logicalANDExpression )*
                while True: #loop248
                    alt248 = 2
                    LA248_0 = self.input.LA(1)

                    if (LA248_0 == LT) :
                        LA248_1 = self.input.LA(2)

                        if (self.synpred298()) :
                            alt248 = 1


                    elif (LA248_0 == 128) :
                        LA248_3 = self.input.LA(2)

                        if (self.synpred298()) :
                            alt248 = 1




                    if alt248 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:26: ( LT )* '||' ( LT )* logicalANDExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:28: ( LT )*
                        while True: #loop246
                            alt246 = 2
                            LA246_0 = self.input.LA(1)

                            if (LA246_0 == LT) :
                                alt246 = 1


                            if alt246 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT480 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpression3333)
                                if self.failed:
                                    return retval


                            else:
                                break #loop246


                        string_literal481 = self.input.LT(1)
                        self.match(self.input, 128, self.FOLLOW_128_in_logicalORExpression3337)
                        if self.failed:
                            return retval

                        string_literal481_tree = self.adaptor.createWithPayload(string_literal481)
                        self.adaptor.addChild(root_0, string_literal481_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:38: ( LT )*
                        while True: #loop247
                            alt247 = 2
                            LA247_0 = self.input.LA(1)

                            if (LA247_0 == LT) :
                                LA247_2 = self.input.LA(2)

                                if (self.synpred297()) :
                                    alt247 = 1




                            if alt247 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT482 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpression3339)
                                if self.failed:
                                    return retval


                            else:
                                break #loop247


                        self.following.append(self.FOLLOW_logicalANDExpression_in_logicalORExpression3343)
                        logicalANDExpression483 = self.logicalANDExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, logicalANDExpression483.tree)


                    else:
                        break #loop248





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 73, logicalORExpression_StartIndex)

            pass

        return retval

    # $ANTLR end logicalORExpression

    class logicalORExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalORExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:477:1: logicalORExpressionNoIn : logicalANDExpressionNoIn ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )* ;
    def logicalORExpressionNoIn(self, ):

        retval = self.logicalORExpressionNoIn_return()
        retval.start = self.input.LT(1)
        logicalORExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT485 = None
        string_literal486 = None
        LT487 = None
        logicalANDExpressionNoIn484 = None

        logicalANDExpressionNoIn488 = None


        LT485_tree = None
        string_literal486_tree = None
        LT487_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 74):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:2: ( logicalANDExpressionNoIn ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:4: logicalANDExpressionNoIn ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3357)
                logicalANDExpressionNoIn484 = self.logicalANDExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, logicalANDExpressionNoIn484.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:29: ( ( LT )* '||' ( LT )* logicalANDExpressionNoIn )*
                while True: #loop251
                    alt251 = 2
                    alt251 = self.dfa251.predict(self.input)
                    if alt251 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:30: ( LT )* '||' ( LT )* logicalANDExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:32: ( LT )*
                        while True: #loop249
                            alt249 = 2
                            LA249_0 = self.input.LA(1)

                            if (LA249_0 == LT) :
                                alt249 = 1


                            if alt249 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT485 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpressionNoIn3360)
                                if self.failed:
                                    return retval


                            else:
                                break #loop249


                        string_literal486 = self.input.LT(1)
                        self.match(self.input, 128, self.FOLLOW_128_in_logicalORExpressionNoIn3364)
                        if self.failed:
                            return retval

                        string_literal486_tree = self.adaptor.createWithPayload(string_literal486)
                        self.adaptor.addChild(root_0, string_literal486_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:42: ( LT )*
                        while True: #loop250
                            alt250 = 2
                            LA250_0 = self.input.LA(1)

                            if (LA250_0 == LT) :
                                LA250_2 = self.input.LA(2)

                                if (self.synpred300()) :
                                    alt250 = 1




                            if alt250 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT487 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalORExpressionNoIn3366)
                                if self.failed:
                                    return retval


                            else:
                                break #loop250


                        self.following.append(self.FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3370)
                        logicalANDExpressionNoIn488 = self.logicalANDExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, logicalANDExpressionNoIn488.tree)


                    else:
                        break #loop251





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 74, logicalORExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end logicalORExpressionNoIn

    class logicalANDExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalANDExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:481:1: logicalANDExpression : bitwiseORExpression ( ( LT )* '&&' ( LT )* bitwiseORExpression )* ;
    def logicalANDExpression(self, ):

        retval = self.logicalANDExpression_return()
        retval.start = self.input.LT(1)
        logicalANDExpression_StartIndex = self.input.index()
        root_0 = None

        LT490 = None
        string_literal491 = None
        LT492 = None
        bitwiseORExpression489 = None

        bitwiseORExpression493 = None


        LT490_tree = None
        string_literal491_tree = None
        LT492_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 75):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:2: ( bitwiseORExpression ( ( LT )* '&&' ( LT )* bitwiseORExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:4: bitwiseORExpression ( ( LT )* '&&' ( LT )* bitwiseORExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseORExpression_in_logicalANDExpression3384)
                bitwiseORExpression489 = self.bitwiseORExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseORExpression489.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:24: ( ( LT )* '&&' ( LT )* bitwiseORExpression )*
                while True: #loop254
                    alt254 = 2
                    LA254_0 = self.input.LA(1)

                    if (LA254_0 == LT) :
                        LA254_1 = self.input.LA(2)

                        if (self.synpred304()) :
                            alt254 = 1


                    elif (LA254_0 == 129) :
                        LA254_3 = self.input.LA(2)

                        if (self.synpred304()) :
                            alt254 = 1




                    if alt254 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:25: ( LT )* '&&' ( LT )* bitwiseORExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:27: ( LT )*
                        while True: #loop252
                            alt252 = 2
                            LA252_0 = self.input.LA(1)

                            if (LA252_0 == LT) :
                                alt252 = 1


                            if alt252 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT490 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpression3387)
                                if self.failed:
                                    return retval


                            else:
                                break #loop252


                        string_literal491 = self.input.LT(1)
                        self.match(self.input, 129, self.FOLLOW_129_in_logicalANDExpression3391)
                        if self.failed:
                            return retval

                        string_literal491_tree = self.adaptor.createWithPayload(string_literal491)
                        self.adaptor.addChild(root_0, string_literal491_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:37: ( LT )*
                        while True: #loop253
                            alt253 = 2
                            LA253_0 = self.input.LA(1)

                            if (LA253_0 == LT) :
                                LA253_2 = self.input.LA(2)

                                if (self.synpred303()) :
                                    alt253 = 1




                            if alt253 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT492 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpression3393)
                                if self.failed:
                                    return retval


                            else:
                                break #loop253


                        self.following.append(self.FOLLOW_bitwiseORExpression_in_logicalANDExpression3397)
                        bitwiseORExpression493 = self.bitwiseORExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseORExpression493.tree)


                    else:
                        break #loop254





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 75, logicalANDExpression_StartIndex)

            pass

        return retval

    # $ANTLR end logicalANDExpression

    class logicalANDExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start logicalANDExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:485:1: logicalANDExpressionNoIn : bitwiseORExpressionNoIn ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )* ;
    def logicalANDExpressionNoIn(self, ):

        retval = self.logicalANDExpressionNoIn_return()
        retval.start = self.input.LT(1)
        logicalANDExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT495 = None
        string_literal496 = None
        LT497 = None
        bitwiseORExpressionNoIn494 = None

        bitwiseORExpressionNoIn498 = None


        LT495_tree = None
        string_literal496_tree = None
        LT497_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 76):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:2: ( bitwiseORExpressionNoIn ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:4: bitwiseORExpressionNoIn ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3411)
                bitwiseORExpressionNoIn494 = self.bitwiseORExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseORExpressionNoIn494.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:28: ( ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn )*
                while True: #loop257
                    alt257 = 2
                    alt257 = self.dfa257.predict(self.input)
                    if alt257 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:29: ( LT )* '&&' ( LT )* bitwiseORExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:31: ( LT )*
                        while True: #loop255
                            alt255 = 2
                            LA255_0 = self.input.LA(1)

                            if (LA255_0 == LT) :
                                alt255 = 1


                            if alt255 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT495 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpressionNoIn3414)
                                if self.failed:
                                    return retval


                            else:
                                break #loop255


                        string_literal496 = self.input.LT(1)
                        self.match(self.input, 129, self.FOLLOW_129_in_logicalANDExpressionNoIn3418)
                        if self.failed:
                            return retval

                        string_literal496_tree = self.adaptor.createWithPayload(string_literal496)
                        self.adaptor.addChild(root_0, string_literal496_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:41: ( LT )*
                        while True: #loop256
                            alt256 = 2
                            LA256_0 = self.input.LA(1)

                            if (LA256_0 == LT) :
                                LA256_2 = self.input.LA(2)

                                if (self.synpred306()) :
                                    alt256 = 1




                            if alt256 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT497 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_logicalANDExpressionNoIn3420)
                                if self.failed:
                                    return retval


                            else:
                                break #loop256


                        self.following.append(self.FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3424)
                        bitwiseORExpressionNoIn498 = self.bitwiseORExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseORExpressionNoIn498.tree)


                    else:
                        break #loop257





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 76, logicalANDExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end logicalANDExpressionNoIn

    class bitwiseORExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseORExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:489:1: bitwiseORExpression : bitwiseXORExpression ( ( LT )* '|' ( LT )* bitwiseXORExpression )* ;
    def bitwiseORExpression(self, ):

        retval = self.bitwiseORExpression_return()
        retval.start = self.input.LT(1)
        bitwiseORExpression_StartIndex = self.input.index()
        root_0 = None

        LT500 = None
        char_literal501 = None
        LT502 = None
        bitwiseXORExpression499 = None

        bitwiseXORExpression503 = None


        LT500_tree = None
        char_literal501_tree = None
        LT502_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 77):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:2: ( bitwiseXORExpression ( ( LT )* '|' ( LT )* bitwiseXORExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:4: bitwiseXORExpression ( ( LT )* '|' ( LT )* bitwiseXORExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3438)
                bitwiseXORExpression499 = self.bitwiseXORExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseXORExpression499.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:25: ( ( LT )* '|' ( LT )* bitwiseXORExpression )*
                while True: #loop260
                    alt260 = 2
                    LA260_0 = self.input.LA(1)

                    if (LA260_0 == LT) :
                        LA260_1 = self.input.LA(2)

                        if (self.synpred310()) :
                            alt260 = 1


                    elif (LA260_0 == 130) :
                        LA260_3 = self.input.LA(2)

                        if (self.synpred310()) :
                            alt260 = 1




                    if alt260 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:26: ( LT )* '|' ( LT )* bitwiseXORExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:28: ( LT )*
                        while True: #loop258
                            alt258 = 2
                            LA258_0 = self.input.LA(1)

                            if (LA258_0 == LT) :
                                alt258 = 1


                            if alt258 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT500 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpression3441)
                                if self.failed:
                                    return retval


                            else:
                                break #loop258


                        char_literal501 = self.input.LT(1)
                        self.match(self.input, 130, self.FOLLOW_130_in_bitwiseORExpression3445)
                        if self.failed:
                            return retval

                        char_literal501_tree = self.adaptor.createWithPayload(char_literal501)
                        self.adaptor.addChild(root_0, char_literal501_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:37: ( LT )*
                        while True: #loop259
                            alt259 = 2
                            LA259_0 = self.input.LA(1)

                            if (LA259_0 == LT) :
                                LA259_2 = self.input.LA(2)

                                if (self.synpred309()) :
                                    alt259 = 1




                            if alt259 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT502 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpression3447)
                                if self.failed:
                                    return retval


                            else:
                                break #loop259


                        self.following.append(self.FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3451)
                        bitwiseXORExpression503 = self.bitwiseXORExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseXORExpression503.tree)


                    else:
                        break #loop260





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 77, bitwiseORExpression_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseORExpression

    class bitwiseORExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseORExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:493:1: bitwiseORExpressionNoIn : bitwiseXORExpressionNoIn ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )* ;
    def bitwiseORExpressionNoIn(self, ):

        retval = self.bitwiseORExpressionNoIn_return()
        retval.start = self.input.LT(1)
        bitwiseORExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT505 = None
        char_literal506 = None
        LT507 = None
        bitwiseXORExpressionNoIn504 = None

        bitwiseXORExpressionNoIn508 = None


        LT505_tree = None
        char_literal506_tree = None
        LT507_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 78):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:2: ( bitwiseXORExpressionNoIn ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:4: bitwiseXORExpressionNoIn ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3465)
                bitwiseXORExpressionNoIn504 = self.bitwiseXORExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseXORExpressionNoIn504.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:29: ( ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn )*
                while True: #loop263
                    alt263 = 2
                    alt263 = self.dfa263.predict(self.input)
                    if alt263 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:30: ( LT )* '|' ( LT )* bitwiseXORExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:32: ( LT )*
                        while True: #loop261
                            alt261 = 2
                            LA261_0 = self.input.LA(1)

                            if (LA261_0 == LT) :
                                alt261 = 1


                            if alt261 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT505 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpressionNoIn3468)
                                if self.failed:
                                    return retval


                            else:
                                break #loop261


                        char_literal506 = self.input.LT(1)
                        self.match(self.input, 130, self.FOLLOW_130_in_bitwiseORExpressionNoIn3472)
                        if self.failed:
                            return retval

                        char_literal506_tree = self.adaptor.createWithPayload(char_literal506)
                        self.adaptor.addChild(root_0, char_literal506_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:41: ( LT )*
                        while True: #loop262
                            alt262 = 2
                            LA262_0 = self.input.LA(1)

                            if (LA262_0 == LT) :
                                LA262_2 = self.input.LA(2)

                                if (self.synpred312()) :
                                    alt262 = 1




                            if alt262 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT507 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseORExpressionNoIn3474)
                                if self.failed:
                                    return retval


                            else:
                                break #loop262


                        self.following.append(self.FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3478)
                        bitwiseXORExpressionNoIn508 = self.bitwiseXORExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseXORExpressionNoIn508.tree)


                    else:
                        break #loop263





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 78, bitwiseORExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseORExpressionNoIn

    class bitwiseXORExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseXORExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:497:1: bitwiseXORExpression : bitwiseANDExpression ( ( LT )* '^' ( LT )* bitwiseANDExpression )* ;
    def bitwiseXORExpression(self, ):

        retval = self.bitwiseXORExpression_return()
        retval.start = self.input.LT(1)
        bitwiseXORExpression_StartIndex = self.input.index()
        root_0 = None

        LT510 = None
        char_literal511 = None
        LT512 = None
        bitwiseANDExpression509 = None

        bitwiseANDExpression513 = None


        LT510_tree = None
        char_literal511_tree = None
        LT512_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 79):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:2: ( bitwiseANDExpression ( ( LT )* '^' ( LT )* bitwiseANDExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:4: bitwiseANDExpression ( ( LT )* '^' ( LT )* bitwiseANDExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3492)
                bitwiseANDExpression509 = self.bitwiseANDExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseANDExpression509.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:25: ( ( LT )* '^' ( LT )* bitwiseANDExpression )*
                while True: #loop266
                    alt266 = 2
                    LA266_0 = self.input.LA(1)

                    if (LA266_0 == LT) :
                        LA266_1 = self.input.LA(2)

                        if (self.synpred316()) :
                            alt266 = 1


                    elif (LA266_0 == 131) :
                        LA266_3 = self.input.LA(2)

                        if (self.synpred316()) :
                            alt266 = 1




                    if alt266 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:26: ( LT )* '^' ( LT )* bitwiseANDExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:28: ( LT )*
                        while True: #loop264
                            alt264 = 2
                            LA264_0 = self.input.LA(1)

                            if (LA264_0 == LT) :
                                alt264 = 1


                            if alt264 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT510 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpression3495)
                                if self.failed:
                                    return retval


                            else:
                                break #loop264


                        char_literal511 = self.input.LT(1)
                        self.match(self.input, 131, self.FOLLOW_131_in_bitwiseXORExpression3499)
                        if self.failed:
                            return retval

                        char_literal511_tree = self.adaptor.createWithPayload(char_literal511)
                        self.adaptor.addChild(root_0, char_literal511_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:37: ( LT )*
                        while True: #loop265
                            alt265 = 2
                            LA265_0 = self.input.LA(1)

                            if (LA265_0 == LT) :
                                LA265_2 = self.input.LA(2)

                                if (self.synpred315()) :
                                    alt265 = 1




                            if alt265 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT512 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpression3501)
                                if self.failed:
                                    return retval


                            else:
                                break #loop265


                        self.following.append(self.FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3505)
                        bitwiseANDExpression513 = self.bitwiseANDExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseANDExpression513.tree)


                    else:
                        break #loop266





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 79, bitwiseXORExpression_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseXORExpression

    class bitwiseXORExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseXORExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:501:1: bitwiseXORExpressionNoIn : bitwiseANDExpressionNoIn ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )* ;
    def bitwiseXORExpressionNoIn(self, ):

        retval = self.bitwiseXORExpressionNoIn_return()
        retval.start = self.input.LT(1)
        bitwiseXORExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT515 = None
        char_literal516 = None
        LT517 = None
        bitwiseANDExpressionNoIn514 = None

        bitwiseANDExpressionNoIn518 = None


        LT515_tree = None
        char_literal516_tree = None
        LT517_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 80):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:2: ( bitwiseANDExpressionNoIn ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:4: bitwiseANDExpressionNoIn ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3519)
                bitwiseANDExpressionNoIn514 = self.bitwiseANDExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, bitwiseANDExpressionNoIn514.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:29: ( ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn )*
                while True: #loop269
                    alt269 = 2
                    alt269 = self.dfa269.predict(self.input)
                    if alt269 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:30: ( LT )* '^' ( LT )* bitwiseANDExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:32: ( LT )*
                        while True: #loop267
                            alt267 = 2
                            LA267_0 = self.input.LA(1)

                            if (LA267_0 == LT) :
                                alt267 = 1


                            if alt267 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT515 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpressionNoIn3522)
                                if self.failed:
                                    return retval


                            else:
                                break #loop267


                        char_literal516 = self.input.LT(1)
                        self.match(self.input, 131, self.FOLLOW_131_in_bitwiseXORExpressionNoIn3526)
                        if self.failed:
                            return retval

                        char_literal516_tree = self.adaptor.createWithPayload(char_literal516)
                        self.adaptor.addChild(root_0, char_literal516_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:41: ( LT )*
                        while True: #loop268
                            alt268 = 2
                            LA268_0 = self.input.LA(1)

                            if (LA268_0 == LT) :
                                LA268_2 = self.input.LA(2)

                                if (self.synpred318()) :
                                    alt268 = 1




                            if alt268 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT517 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseXORExpressionNoIn3528)
                                if self.failed:
                                    return retval


                            else:
                                break #loop268


                        self.following.append(self.FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3532)
                        bitwiseANDExpressionNoIn518 = self.bitwiseANDExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, bitwiseANDExpressionNoIn518.tree)


                    else:
                        break #loop269





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 80, bitwiseXORExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseXORExpressionNoIn

    class bitwiseANDExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseANDExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:505:1: bitwiseANDExpression : equalityExpression ( ( LT )* '&' ( LT )* equalityExpression )* ;
    def bitwiseANDExpression(self, ):

        retval = self.bitwiseANDExpression_return()
        retval.start = self.input.LT(1)
        bitwiseANDExpression_StartIndex = self.input.index()
        root_0 = None

        LT520 = None
        char_literal521 = None
        LT522 = None
        equalityExpression519 = None

        equalityExpression523 = None


        LT520_tree = None
        char_literal521_tree = None
        LT522_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 81):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:2: ( equalityExpression ( ( LT )* '&' ( LT )* equalityExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:4: equalityExpression ( ( LT )* '&' ( LT )* equalityExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_equalityExpression_in_bitwiseANDExpression3546)
                equalityExpression519 = self.equalityExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, equalityExpression519.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:23: ( ( LT )* '&' ( LT )* equalityExpression )*
                while True: #loop272
                    alt272 = 2
                    LA272_0 = self.input.LA(1)

                    if (LA272_0 == LT) :
                        LA272_1 = self.input.LA(2)

                        if (self.synpred322()) :
                            alt272 = 1


                    elif (LA272_0 == 132) :
                        LA272_3 = self.input.LA(2)

                        if (self.synpred322()) :
                            alt272 = 1




                    if alt272 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:24: ( LT )* '&' ( LT )* equalityExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:26: ( LT )*
                        while True: #loop270
                            alt270 = 2
                            LA270_0 = self.input.LA(1)

                            if (LA270_0 == LT) :
                                alt270 = 1


                            if alt270 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT520 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpression3549)
                                if self.failed:
                                    return retval


                            else:
                                break #loop270


                        char_literal521 = self.input.LT(1)
                        self.match(self.input, 132, self.FOLLOW_132_in_bitwiseANDExpression3553)
                        if self.failed:
                            return retval

                        char_literal521_tree = self.adaptor.createWithPayload(char_literal521)
                        self.adaptor.addChild(root_0, char_literal521_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:35: ( LT )*
                        while True: #loop271
                            alt271 = 2
                            LA271_0 = self.input.LA(1)

                            if (LA271_0 == LT) :
                                LA271_2 = self.input.LA(2)

                                if (self.synpred321()) :
                                    alt271 = 1




                            if alt271 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT522 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpression3555)
                                if self.failed:
                                    return retval


                            else:
                                break #loop271


                        self.following.append(self.FOLLOW_equalityExpression_in_bitwiseANDExpression3559)
                        equalityExpression523 = self.equalityExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, equalityExpression523.tree)


                    else:
                        break #loop272





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 81, bitwiseANDExpression_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseANDExpression

    class bitwiseANDExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start bitwiseANDExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:509:1: bitwiseANDExpressionNoIn : equalityExpressionNoIn ( ( LT )* '&' ( LT )* equalityExpressionNoIn )* ;
    def bitwiseANDExpressionNoIn(self, ):

        retval = self.bitwiseANDExpressionNoIn_return()
        retval.start = self.input.LT(1)
        bitwiseANDExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT525 = None
        char_literal526 = None
        LT527 = None
        equalityExpressionNoIn524 = None

        equalityExpressionNoIn528 = None


        LT525_tree = None
        char_literal526_tree = None
        LT527_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 82):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:2: ( equalityExpressionNoIn ( ( LT )* '&' ( LT )* equalityExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:4: equalityExpressionNoIn ( ( LT )* '&' ( LT )* equalityExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3573)
                equalityExpressionNoIn524 = self.equalityExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, equalityExpressionNoIn524.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:27: ( ( LT )* '&' ( LT )* equalityExpressionNoIn )*
                while True: #loop275
                    alt275 = 2
                    alt275 = self.dfa275.predict(self.input)
                    if alt275 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:28: ( LT )* '&' ( LT )* equalityExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:30: ( LT )*
                        while True: #loop273
                            alt273 = 2
                            LA273_0 = self.input.LA(1)

                            if (LA273_0 == LT) :
                                alt273 = 1


                            if alt273 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT525 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpressionNoIn3576)
                                if self.failed:
                                    return retval


                            else:
                                break #loop273


                        char_literal526 = self.input.LT(1)
                        self.match(self.input, 132, self.FOLLOW_132_in_bitwiseANDExpressionNoIn3580)
                        if self.failed:
                            return retval

                        char_literal526_tree = self.adaptor.createWithPayload(char_literal526)
                        self.adaptor.addChild(root_0, char_literal526_tree)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:39: ( LT )*
                        while True: #loop274
                            alt274 = 2
                            LA274_0 = self.input.LA(1)

                            if (LA274_0 == LT) :
                                LA274_2 = self.input.LA(2)

                                if (self.synpred324()) :
                                    alt274 = 1




                            if alt274 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT527 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_bitwiseANDExpressionNoIn3582)
                                if self.failed:
                                    return retval


                            else:
                                break #loop274


                        self.following.append(self.FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3586)
                        equalityExpressionNoIn528 = self.equalityExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, equalityExpressionNoIn528.tree)


                    else:
                        break #loop275





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 82, bitwiseANDExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end bitwiseANDExpressionNoIn

    class equalityExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start equalityExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:513:1: equalityExpression : relationalExpression ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )* ;
    def equalityExpression(self, ):

        retval = self.equalityExpression_return()
        retval.start = self.input.LT(1)
        equalityExpression_StartIndex = self.input.index()
        root_0 = None

        LT530 = None
        set531 = None
        LT532 = None
        relationalExpression529 = None

        relationalExpression533 = None


        LT530_tree = None
        set531_tree = None
        LT532_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 83):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:2: ( relationalExpression ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:4: relationalExpression ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_relationalExpression_in_equalityExpression3600)
                relationalExpression529 = self.relationalExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, relationalExpression529.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:25: ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )*
                while True: #loop278
                    alt278 = 2
                    LA278_0 = self.input.LA(1)

                    if (LA278_0 == LT) :
                        LA278_1 = self.input.LA(2)

                        if (self.synpred331()) :
                            alt278 = 1


                    elif ((133 <= LA278_0 <= 136)) :
                        LA278_3 = self.input.LA(2)

                        if (self.synpred331()) :
                            alt278 = 1




                    if alt278 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:26: ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:28: ( LT )*
                        while True: #loop276
                            alt276 = 2
                            LA276_0 = self.input.LA(1)

                            if (LA276_0 == LT) :
                                alt276 = 1


                            if alt276 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT530 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpression3603)
                                if self.failed:
                                    return retval


                            else:
                                break #loop276


                        set531 = self.input.LT(1)
                        if (133 <= self.input.LA(1) <= 136):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set531))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_equalityExpression3607
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:63: ( LT )*
                        while True: #loop277
                            alt277 = 2
                            LA277_0 = self.input.LA(1)

                            if (LA277_0 == LT) :
                                LA277_2 = self.input.LA(2)

                                if (self.synpred330()) :
                                    alt277 = 1




                            if alt277 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT532 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpression3623)
                                if self.failed:
                                    return retval


                            else:
                                break #loop277


                        self.following.append(self.FOLLOW_relationalExpression_in_equalityExpression3627)
                        relationalExpression533 = self.relationalExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, relationalExpression533.tree)


                    else:
                        break #loop278





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 83, equalityExpression_StartIndex)

            pass

        return retval

    # $ANTLR end equalityExpression

    class equalityExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start equalityExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:517:1: equalityExpressionNoIn : relationalExpressionNoIn ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )* ;
    def equalityExpressionNoIn(self, ):

        retval = self.equalityExpressionNoIn_return()
        retval.start = self.input.LT(1)
        equalityExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT535 = None
        set536 = None
        LT537 = None
        relationalExpressionNoIn534 = None

        relationalExpressionNoIn538 = None


        LT535_tree = None
        set536_tree = None
        LT537_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 84):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:2: ( relationalExpressionNoIn ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:4: relationalExpressionNoIn ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3640)
                relationalExpressionNoIn534 = self.relationalExpressionNoIn()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, relationalExpressionNoIn534.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:29: ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn )*
                while True: #loop281
                    alt281 = 2
                    alt281 = self.dfa281.predict(self.input)
                    if alt281 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:30: ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpressionNoIn
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:32: ( LT )*
                        while True: #loop279
                            alt279 = 2
                            LA279_0 = self.input.LA(1)

                            if (LA279_0 == LT) :
                                alt279 = 1


                            if alt279 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT535 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpressionNoIn3643)
                                if self.failed:
                                    return retval


                            else:
                                break #loop279


                        set536 = self.input.LT(1)
                        if (133 <= self.input.LA(1) <= 136):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set536))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_equalityExpressionNoIn3647
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:67: ( LT )*
                        while True: #loop280
                            alt280 = 2
                            LA280_0 = self.input.LA(1)

                            if (LA280_0 == LT) :
                                LA280_2 = self.input.LA(2)

                                if (self.synpred336()) :
                                    alt280 = 1




                            if alt280 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT537 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_equalityExpressionNoIn3663)
                                if self.failed:
                                    return retval


                            else:
                                break #loop280


                        self.following.append(self.FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3667)
                        relationalExpressionNoIn538 = self.relationalExpressionNoIn()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, relationalExpressionNoIn538.tree)


                    else:
                        break #loop281





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 84, equalityExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end equalityExpressionNoIn

    class relationalExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start relationalExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:521:1: relationalExpression : shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )* ;
    def relationalExpression(self, ):

        retval = self.relationalExpression_return()
        retval.start = self.input.LT(1)
        relationalExpression_StartIndex = self.input.index()
        root_0 = None

        LT540 = None
        set541 = None
        LT542 = None
        shiftExpression539 = None

        shiftExpression543 = None


        LT540_tree = None
        set541_tree = None
        LT542_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 85):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:2: ( shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:4: shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_shiftExpression_in_relationalExpression3681)
                shiftExpression539 = self.shiftExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, shiftExpression539.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:20: ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )*
                while True: #loop284
                    alt284 = 2
                    LA284 = self.input.LA(1)
                    if LA284 == LT:
                        LA284_1 = self.input.LA(2)

                        if (self.synpred345()) :
                            alt284 = 1


                    elif LA284 == 102:
                        LA284_3 = self.input.LA(2)

                        if (self.synpred345()) :
                            alt284 = 1


                    elif LA284 == 75 or LA284 == 76 or LA284 == 137 or LA284 == 138 or LA284 == 139:
                        LA284_4 = self.input.LA(2)

                        if (self.synpred345()) :
                            alt284 = 1



                    if alt284 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:21: ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:23: ( LT )*
                        while True: #loop282
                            alt282 = 2
                            LA282_0 = self.input.LA(1)

                            if (LA282_0 == LT) :
                                alt282 = 1


                            if alt282 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT540 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpression3684)
                                if self.failed:
                                    return retval


                            else:
                                break #loop282


                        set541 = self.input.LT(1)
                        if (75 <= self.input.LA(1) <= 76) or self.input.LA(1) == 102 or (137 <= self.input.LA(1) <= 139):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set541))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_relationalExpression3688
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:76: ( LT )*
                        while True: #loop283
                            alt283 = 2
                            LA283_0 = self.input.LA(1)

                            if (LA283_0 == LT) :
                                LA283_2 = self.input.LA(2)

                                if (self.synpred344()) :
                                    alt283 = 1




                            if alt283 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT542 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpression3712)
                                if self.failed:
                                    return retval


                            else:
                                break #loop283


                        self.following.append(self.FOLLOW_shiftExpression_in_relationalExpression3716)
                        shiftExpression543 = self.shiftExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, shiftExpression543.tree)


                    else:
                        break #loop284





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 85, relationalExpression_StartIndex)

            pass

        return retval

    # $ANTLR end relationalExpression

    class relationalExpressionNoIn_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start relationalExpressionNoIn
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:525:1: relationalExpressionNoIn : shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )* ;
    def relationalExpressionNoIn(self, ):

        retval = self.relationalExpressionNoIn_return()
        retval.start = self.input.LT(1)
        relationalExpressionNoIn_StartIndex = self.input.index()
        root_0 = None

        LT545 = None
        set546 = None
        LT547 = None
        shiftExpression544 = None

        shiftExpression548 = None


        LT545_tree = None
        set546_tree = None
        LT547_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 86):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:2: ( shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:4: shiftExpression ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_shiftExpression_in_relationalExpressionNoIn3729)
                shiftExpression544 = self.shiftExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, shiftExpression544.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:20: ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression )*
                while True: #loop287
                    alt287 = 2
                    alt287 = self.dfa287.predict(self.input)
                    if alt287 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:21: ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT )* shiftExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:23: ( LT )*
                        while True: #loop285
                            alt285 = 2
                            LA285_0 = self.input.LA(1)

                            if (LA285_0 == LT) :
                                alt285 = 1


                            if alt285 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT545 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpressionNoIn3732)
                                if self.failed:
                                    return retval


                            else:
                                break #loop285


                        set546 = self.input.LT(1)
                        if (75 <= self.input.LA(1) <= 76) or (137 <= self.input.LA(1) <= 139):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set546))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_relationalExpressionNoIn3736
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:69: ( LT )*
                        while True: #loop286
                            alt286 = 2
                            LA286_0 = self.input.LA(1)

                            if (LA286_0 == LT) :
                                LA286_2 = self.input.LA(2)

                                if (self.synpred351()) :
                                    alt286 = 1




                            if alt286 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT547 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_relationalExpressionNoIn3756)
                                if self.failed:
                                    return retval


                            else:
                                break #loop286


                        self.following.append(self.FOLLOW_shiftExpression_in_relationalExpressionNoIn3760)
                        shiftExpression548 = self.shiftExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, shiftExpression548.tree)


                    else:
                        break #loop287





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 86, relationalExpressionNoIn_StartIndex)

            pass

        return retval

    # $ANTLR end relationalExpressionNoIn

    class shiftExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start shiftExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:529:1: shiftExpression : additiveExpression ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )* ;
    def shiftExpression(self, ):

        retval = self.shiftExpression_return()
        retval.start = self.input.LT(1)
        shiftExpression_StartIndex = self.input.index()
        root_0 = None

        LT550 = None
        set551 = None
        LT552 = None
        additiveExpression549 = None

        additiveExpression553 = None


        LT550_tree = None
        set551_tree = None
        LT552_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 87):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:2: ( additiveExpression ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:4: additiveExpression ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_additiveExpression_in_shiftExpression3773)
                additiveExpression549 = self.additiveExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, additiveExpression549.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:23: ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )*
                while True: #loop290
                    alt290 = 2
                    LA290_0 = self.input.LA(1)

                    if (LA290_0 == LT) :
                        LA290_1 = self.input.LA(2)

                        if (self.synpred357()) :
                            alt290 = 1


                    elif ((140 <= LA290_0 <= 142)) :
                        LA290_3 = self.input.LA(2)

                        if (self.synpred357()) :
                            alt290 = 1




                    if alt290 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:24: ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:26: ( LT )*
                        while True: #loop288
                            alt288 = 2
                            LA288_0 = self.input.LA(1)

                            if (LA288_0 == LT) :
                                alt288 = 1


                            if alt288 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT550 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_shiftExpression3776)
                                if self.failed:
                                    return retval


                            else:
                                break #loop288


                        set551 = self.input.LT(1)
                        if (140 <= self.input.LA(1) <= 142):
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set551))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_shiftExpression3780
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:53: ( LT )*
                        while True: #loop289
                            alt289 = 2
                            LA289_0 = self.input.LA(1)

                            if (LA289_0 == LT) :
                                LA289_2 = self.input.LA(2)

                                if (self.synpred356()) :
                                    alt289 = 1




                            if alt289 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT552 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_shiftExpression3792)
                                if self.failed:
                                    return retval


                            else:
                                break #loop289


                        self.following.append(self.FOLLOW_additiveExpression_in_shiftExpression3796)
                        additiveExpression553 = self.additiveExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, additiveExpression553.tree)


                    else:
                        break #loop290





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 87, shiftExpression_StartIndex)

            pass

        return retval

    # $ANTLR end shiftExpression

    class additiveExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start additiveExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:533:1: additiveExpression : multiplicativeExpression ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )* ;
    def additiveExpression(self, ):

        retval = self.additiveExpression_return()
        retval.start = self.input.LT(1)
        additiveExpression_StartIndex = self.input.index()
        root_0 = None

        LT555 = None
        set556 = None
        LT557 = None
        multiplicativeExpression554 = None

        multiplicativeExpression558 = None


        LT555_tree = None
        set556_tree = None
        LT557_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 88):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:2: ( multiplicativeExpression ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:4: multiplicativeExpression ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_multiplicativeExpression_in_additiveExpression3809)
                multiplicativeExpression554 = self.multiplicativeExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, multiplicativeExpression554.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:29: ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )*
                while True: #loop293
                    alt293 = 2
                    LA293_0 = self.input.LA(1)

                    if (LA293_0 == LT) :
                        LA293_1 = self.input.LA(2)

                        if (self.synpred361()) :
                            alt293 = 1


                    elif (LA293_0 == 79 or LA293_0 == 143) :
                        LA293_3 = self.input.LA(2)

                        if (self.synpred361()) :
                            alt293 = 1




                    if alt293 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:30: ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:32: ( LT )*
                        while True: #loop291
                            alt291 = 2
                            LA291_0 = self.input.LA(1)

                            if (LA291_0 == LT) :
                                alt291 = 1


                            if alt291 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT555 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_additiveExpression3812)
                                if self.failed:
                                    return retval


                            else:
                                break #loop291


                        set556 = self.input.LT(1)
                        if self.input.LA(1) == 79 or self.input.LA(1) == 143:
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set556))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_additiveExpression3816
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:49: ( LT )*
                        while True: #loop292
                            alt292 = 2
                            LA292_0 = self.input.LA(1)

                            if (LA292_0 == LT) :
                                LA292_2 = self.input.LA(2)

                                if (self.synpred360()) :
                                    alt292 = 1




                            if alt292 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT557 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_additiveExpression3824)
                                if self.failed:
                                    return retval


                            else:
                                break #loop292


                        self.following.append(self.FOLLOW_multiplicativeExpression_in_additiveExpression3828)
                        multiplicativeExpression558 = self.multiplicativeExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, multiplicativeExpression558.tree)


                    else:
                        break #loop293





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 88, additiveExpression_StartIndex)

            pass

        return retval

    # $ANTLR end additiveExpression

    class multiplicativeExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start multiplicativeExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:537:1: multiplicativeExpression : unaryExpression ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )* ;
    def multiplicativeExpression(self, ):

        retval = self.multiplicativeExpression_return()
        retval.start = self.input.LT(1)
        multiplicativeExpression_StartIndex = self.input.index()
        root_0 = None

        LT560 = None
        set561 = None
        LT562 = None
        unaryExpression559 = None

        unaryExpression563 = None


        LT560_tree = None
        set561_tree = None
        LT562_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 89):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:2: ( unaryExpression ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )* )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:4: unaryExpression ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )*
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_unaryExpression_in_multiplicativeExpression3841)
                unaryExpression559 = self.unaryExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, unaryExpression559.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:20: ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )*
                while True: #loop296
                    alt296 = 2
                    LA296_0 = self.input.LA(1)

                    if (LA296_0 == LT) :
                        LA296_1 = self.input.LA(2)

                        if (self.synpred366()) :
                            alt296 = 1


                    elif (LA296_0 == 77 or LA296_0 == 115 or LA296_0 == 144) :
                        LA296_3 = self.input.LA(2)

                        if (self.synpred366()) :
                            alt296 = 1




                    if alt296 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:21: ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:23: ( LT )*
                        while True: #loop294
                            alt294 = 2
                            LA294_0 = self.input.LA(1)

                            if (LA294_0 == LT) :
                                alt294 = 1


                            if alt294 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT560 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_multiplicativeExpression3844)
                                if self.failed:
                                    return retval


                            else:
                                break #loop294


                        set561 = self.input.LT(1)
                        if self.input.LA(1) == 77 or self.input.LA(1) == 115 or self.input.LA(1) == 144:
                            self.input.consume();
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set561))
                            self.errorRecovery = False
                            self.failed = False

                        else:
                            if self.backtracking > 0:
                                self.failed = True
                                return retval

                            mse = MismatchedSetException(None, self.input)
                            self.recoverFromMismatchedSet(
                                self.input, mse, self.FOLLOW_set_in_multiplicativeExpression3848
                                )
                            raise mse


                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:46: ( LT )*
                        while True: #loop295
                            alt295 = 2
                            LA295_0 = self.input.LA(1)

                            if (LA295_0 == LT) :
                                LA295_2 = self.input.LA(2)

                                if (self.synpred365()) :
                                    alt295 = 1




                            if alt295 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT562 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_multiplicativeExpression3860)
                                if self.failed:
                                    return retval


                            else:
                                break #loop295


                        self.following.append(self.FOLLOW_unaryExpression_in_multiplicativeExpression3864)
                        unaryExpression563 = self.unaryExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, unaryExpression563.tree)


                    else:
                        break #loop296





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 89, multiplicativeExpression_StartIndex)

            pass

        return retval

    # $ANTLR end multiplicativeExpression

    class unaryExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start unaryExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:541:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );
    def unaryExpression(self, ):

        retval = self.unaryExpression_return()
        retval.start = self.input.LT(1)
        unaryExpression_StartIndex = self.input.index()
        root_0 = None

        set565 = None
        postfixExpression564 = None

        unaryExpression566 = None


        set565_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 90):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:542:2: ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression )
                alt297 = 2
                LA297_0 = self.input.LA(1)

                if ((LT <= LA297_0 <= RegularExpressionHacks) or LA297_0 == 75 or LA297_0 == 77 or LA297_0 == 81 or (83 <= LA297_0 <= 84) or (87 <= LA297_0 <= 89) or (93 <= LA297_0 <= 94) or LA297_0 == 101 or LA297_0 == 110 or LA297_0 == 113 or (152 <= LA297_0 <= 157)) :
                    alt297 = 1
                elif (LA297_0 == 79 or LA297_0 == 143 or (145 <= LA297_0 <= 151)) :
                    alt297 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("541:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );", 297, 0, self.input)

                    raise nvae

                if alt297 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:542:4: postfixExpression
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_postfixExpression_in_unaryExpression3877)
                    postfixExpression564 = self.postfixExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, postfixExpression564.tree)


                elif alt297 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:543:4: ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression
                    root_0 = self.adaptor.nil()

                    set565 = self.input.LT(1)
                    if self.input.LA(1) == 79 or self.input.LA(1) == 143 or (145 <= self.input.LA(1) <= 151):
                        self.input.consume();
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set565))
                        self.errorRecovery = False
                        self.failed = False

                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        mse = MismatchedSetException(None, self.input)
                        self.recoverFromMismatchedSet(
                            self.input, mse, self.FOLLOW_set_in_unaryExpression3882
                            )
                        raise mse


                    self.following.append(self.FOLLOW_unaryExpression_in_unaryExpression3918)
                    unaryExpression566 = self.unaryExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, unaryExpression566.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 90, unaryExpression_StartIndex)

            pass

        return retval

    # $ANTLR end unaryExpression

    class postfixExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start postfixExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:546:1: postfixExpression : leftHandSideExpression ( '++' | '--' )? ;
    def postfixExpression(self, ):

        retval = self.postfixExpression_return()
        retval.start = self.input.LT(1)
        postfixExpression_StartIndex = self.input.index()
        root_0 = None

        set568 = None
        leftHandSideExpression567 = None


        set568_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 91):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:547:2: ( leftHandSideExpression ( '++' | '--' )? )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:547:4: leftHandSideExpression ( '++' | '--' )?
                root_0 = self.adaptor.nil()

                self.following.append(self.FOLLOW_leftHandSideExpression_in_postfixExpression3930)
                leftHandSideExpression567 = self.leftHandSideExpression()
                self.following.pop()
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    self.adaptor.addChild(root_0, leftHandSideExpression567.tree)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:547:27: ( '++' | '--' )?
                alt298 = 2
                LA298_0 = self.input.LA(1)

                if ((148 <= LA298_0 <= 149)) :
                    alt298 = 1
                if alt298 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                    set568 = self.input.LT(1)
                    if (148 <= self.input.LA(1) <= 149):
                        self.input.consume();
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set568))
                        self.errorRecovery = False
                        self.failed = False

                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        mse = MismatchedSetException(None, self.input)
                        self.recoverFromMismatchedSet(
                            self.input, mse, self.FOLLOW_set_in_postfixExpression3932
                            )
                        raise mse








                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 91, postfixExpression_StartIndex)

            pass

        return retval

    # $ANTLR end postfixExpression

    class primaryExpression_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start primaryExpression
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:550:1: primaryExpression : ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' );
    def primaryExpression(self, ):

        retval = self.primaryExpression_return()
        retval.start = self.input.LT(1)
        primaryExpression_StartIndex = self.input.index()
        root_0 = None

        string_literal569 = None
        char_literal575 = None
        LT576 = None
        LT578 = None
        char_literal579 = None
        xmlLiteral570 = None

        identifier571 = None

        literal572 = None

        arrayLiteral573 = None

        objectLiteral574 = None

        expression577 = None


        string_literal569_tree = None
        char_literal575_tree = None
        LT576_tree = None
        LT578_tree = None
        char_literal579_tree = None
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 92):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:2: ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' )
                alt301 = 7
                LA301_0 = self.input.LA(1)

                if (LA301_0 == 152) :
                    alt301 = 1
                elif (LA301_0 == LT) and (self.synpred381()):
                    alt301 = 2
                elif (LA301_0 == 75) and (self.synpred381()):
                    alt301 = 2
                elif (LA301_0 == 81) :
                    LA301_4 = self.input.LA(2)

                    if (self.synpred381()) :
                        alt301 = 2
                    elif (self.synpred385()) :
                        alt301 = 6
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("550:1: primaryExpression : ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' );", 301, 4, self.input)

                        raise nvae

                elif (LA301_0 == XMLComment) and (self.synpred381()):
                    alt301 = 2
                elif (LA301_0 == Identifier or (87 <= LA301_0 <= 89) or LA301_0 == 93 or LA301_0 == 101 or LA301_0 == 110 or (153 <= LA301_0 <= 154)) :
                    alt301 = 3
                elif (LA301_0 == StringLiteral or LA301_0 == NumericLiteral or LA301_0 == RegularExpressionHacks or LA301_0 == 77 or (155 <= LA301_0 <= 157)) :
                    alt301 = 4
                elif (LA301_0 == 94) :
                    alt301 = 5
                elif (LA301_0 == 84) :
                    alt301 = 7
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("550:1: primaryExpression : ( 'this' | ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral | identifier -> ^( VARREF identifier ) | literal | arrayLiteral | objectLiteral | '(' ( LT )* expression ( LT )* ')' );", 301, 0, self.input)

                    raise nvae

                if alt301 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:551:4: 'this'
                    root_0 = self.adaptor.nil()

                    string_literal569 = self.input.LT(1)
                    self.match(self.input, 152, self.FOLLOW_152_in_primaryExpression3950)
                    if self.failed:
                        return retval

                    string_literal569_tree = self.adaptor.createWithPayload(string_literal569)
                    self.adaptor.addChild(root_0, string_literal569_tree)



                elif alt301 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:552:4: ( ( LT )* ( '<' | XMLComment ) )=> xmlLiteral
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_xmlLiteral_in_primaryExpression3967)
                    xmlLiteral570 = self.xmlLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, xmlLiteral570.tree)


                elif alt301 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:553:4: identifier
                    self.following.append(self.FOLLOW_identifier_in_primaryExpression3972)
                    identifier571 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(identifier571.tree)
                    # AST Rewrite
                    # elements: identifier
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 554:3: -> ^( VARREF identifier )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:554:6: ^( VARREF identifier )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(VARREF, "VARREF"), root_1)

                        self.adaptor.addChild(root_1, stream_identifier.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt301 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:555:4: literal
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_literal_in_primaryExpression3987)
                    literal572 = self.literal()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, literal572.tree)


                elif alt301 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:556:4: arrayLiteral
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_arrayLiteral_in_primaryExpression3992)
                    arrayLiteral573 = self.arrayLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, arrayLiteral573.tree)


                elif alt301 == 6:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:557:4: objectLiteral
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_objectLiteral_in_primaryExpression3997)
                    objectLiteral574 = self.objectLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, objectLiteral574.tree)


                elif alt301 == 7:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:4: '(' ( LT )* expression ( LT )* ')'
                    root_0 = self.adaptor.nil()

                    char_literal575 = self.input.LT(1)
                    self.match(self.input, 84, self.FOLLOW_84_in_primaryExpression4002)
                    if self.failed:
                        return retval

                    char_literal575_tree = self.adaptor.createWithPayload(char_literal575)
                    self.adaptor.addChild(root_0, char_literal575_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:10: ( LT )*
                    while True: #loop299
                        alt299 = 2
                        LA299_0 = self.input.LA(1)

                        if (LA299_0 == LT) :
                            LA299_2 = self.input.LA(2)

                            if (self.synpred386()) :
                                alt299 = 1




                        if alt299 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT576 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_primaryExpression4004)
                            if self.failed:
                                return retval


                        else:
                            break #loop299


                    self.following.append(self.FOLLOW_expression_in_primaryExpression4008)
                    expression577 = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, expression577.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:26: ( LT )*
                    while True: #loop300
                        alt300 = 2
                        LA300_0 = self.input.LA(1)

                        if (LA300_0 == LT) :
                            alt300 = 1


                        if alt300 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT578 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_primaryExpression4010)
                            if self.failed:
                                return retval


                        else:
                            break #loop300


                    char_literal579 = self.input.LT(1)
                    self.match(self.input, 86, self.FOLLOW_86_in_primaryExpression4014)
                    if self.failed:
                        return retval

                    char_literal579_tree = self.adaptor.createWithPayload(char_literal579)
                    self.adaptor.addChild(root_0, char_literal579_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 92, primaryExpression_StartIndex)

            pass

        return retval

    # $ANTLR end primaryExpression

    class arrayLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start arrayLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:562:1: arrayLiteral : ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) );
    def arrayLiteral(self, ):

        retval = self.arrayLiteral_return()
        retval.start = self.input.LT(1)
        arrayLiteral_StartIndex = self.input.index()
        root_0 = None

        char_literal580 = None
        LT581 = None
        LT583 = None
        char_literal584 = None
        LT585 = None
        LT587 = None
        char_literal588 = None
        LT589 = None
        char_literal590 = None
        char_literal591 = None
        LT592 = None
        LT593 = None
        string_literal594 = None
        LT595 = None
        string_literal596 = None
        LT597 = None
        char_literal598 = None
        LT599 = None
        LT600 = None
        string_literal601 = None
        LT602 = None
        LT603 = None
        char_literal604 = None
        LT605 = None
        char_literal606 = None
        evalexpr = None

        init = None

        genexpr = None

        assignmentExpression582 = None

        assignmentExpression586 = None


        char_literal580_tree = None
        LT581_tree = None
        LT583_tree = None
        char_literal584_tree = None
        LT585_tree = None
        LT587_tree = None
        char_literal588_tree = None
        LT589_tree = None
        char_literal590_tree = None
        char_literal591_tree = None
        LT592_tree = None
        LT593_tree = None
        string_literal594_tree = None
        LT595_tree = None
        string_literal596_tree = None
        LT597_tree = None
        char_literal598_tree = None
        LT599_tree = None
        LT600_tree = None
        string_literal601_tree = None
        LT602_tree = None
        LT603_tree = None
        char_literal604_tree = None
        LT605_tree = None
        char_literal606_tree = None
        stream_95 = RewriteRuleTokenStream(self.adaptor, "token 95")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_94 = RewriteRuleTokenStream(self.adaptor, "token 94")
        stream_102 = RewriteRuleTokenStream(self.adaptor, "token 102")
        stream_86 = RewriteRuleTokenStream(self.adaptor, "token 86")
        stream_101 = RewriteRuleTokenStream(self.adaptor, "token 101")
        stream_100 = RewriteRuleTokenStream(self.adaptor, "token 100")
        stream_84 = RewriteRuleTokenStream(self.adaptor, "token 84")
        stream_85 = RewriteRuleTokenStream(self.adaptor, "token 85")
        stream_expression = RewriteRuleSubtreeStream(self.adaptor, "rule expression")
        stream_forInStatementInitialiserPart = RewriteRuleSubtreeStream(self.adaptor, "rule forInStatementInitialiserPart")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 93):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:2: ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) )
                alt321 = 2
                LA321_0 = self.input.LA(1)

                if (LA321_0 == 94) :
                    LA321_1 = self.input.LA(2)

                    if (self.synpred397()) :
                        alt321 = 1
                    elif (True) :
                        alt321 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("562:1: arrayLiteral : ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) );", 321, 1, self.input)

                        raise nvae

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("562:1: arrayLiteral : ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' -> ^( ARRAY ( assignmentExpression )* ) | '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']' -> ^( ARRAYCOMP $evalexpr $init $genexpr) );", 321, 0, self.input)

                    raise nvae

                if alt321 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:4: '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']'
                    char_literal580 = self.input.LT(1)
                    self.match(self.input, 94, self.FOLLOW_94_in_arrayLiteral4027)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_94.add(char_literal580)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:8: ( LT )*
                    while True: #loop302
                        alt302 = 2
                        LA302_0 = self.input.LA(1)

                        if (LA302_0 == LT) :
                            LA302_2 = self.input.LA(2)

                            if (self.synpred388()) :
                                alt302 = 1




                        if alt302 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT581 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4029)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT581)


                        else:
                            break #loop302


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:12: ( assignmentExpression )?
                    alt303 = 2
                    alt303 = self.dfa303.predict(self.input)
                    if alt303 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: assignmentExpression
                        self.following.append(self.FOLLOW_assignmentExpression_in_arrayLiteral4032)
                        assignmentExpression582 = self.assignmentExpression()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_assignmentExpression.add(assignmentExpression582.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:34: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )*
                    while True: #loop307
                        alt307 = 2
                        alt307 = self.dfa307.predict(self.input)
                        if alt307 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:35: ( LT )* ',' ( ( LT )* assignmentExpression )?
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:35: ( LT )*
                            while True: #loop304
                                alt304 = 2
                                LA304_0 = self.input.LA(1)

                                if (LA304_0 == LT) :
                                    alt304 = 1


                                if alt304 == 1:
                                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                    LT583 = self.input.LT(1)
                                    self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4036)
                                    if self.failed:
                                        return retval
                                    if self.backtracking == 0:
                                        stream_LT.add(LT583)


                                else:
                                    break #loop304


                            char_literal584 = self.input.LT(1)
                            self.match(self.input, 85, self.FOLLOW_85_in_arrayLiteral4039)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_85.add(char_literal584)
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:43: ( ( LT )* assignmentExpression )?
                            alt306 = 2
                            alt306 = self.dfa306.predict(self.input)
                            if alt306 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: ( LT )* assignmentExpression
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: ( LT )*
                                while True: #loop305
                                    alt305 = 2
                                    LA305_0 = self.input.LA(1)

                                    if (LA305_0 == LT) :
                                        LA305_2 = self.input.LA(2)

                                        if (self.synpred391()) :
                                            alt305 = 1




                                    if alt305 == 1:
                                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                        LT585 = self.input.LT(1)
                                        self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4042)
                                        if self.failed:
                                            return retval
                                        if self.backtracking == 0:
                                            stream_LT.add(LT585)


                                    else:
                                        break #loop305


                                self.following.append(self.FOLLOW_assignmentExpression_in_arrayLiteral4045)
                                assignmentExpression586 = self.assignmentExpression()
                                self.following.pop()
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_assignmentExpression.add(assignmentExpression586.tree)





                        else:
                            break #loop307


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:73: ( LT )*
                    while True: #loop308
                        alt308 = 2
                        LA308_0 = self.input.LA(1)

                        if (LA308_0 == LT) :
                            alt308 = 1


                        if alt308 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT587 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4051)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT587)


                        else:
                            break #loop308


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:77: ( ',' ( LT )* )?
                    alt310 = 2
                    LA310_0 = self.input.LA(1)

                    if (LA310_0 == 85) :
                        alt310 = 1
                    if alt310 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:78: ',' ( LT )*
                        char_literal588 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_arrayLiteral4055)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_85.add(char_literal588)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:82: ( LT )*
                        while True: #loop309
                            alt309 = 2
                            LA309_0 = self.input.LA(1)

                            if (LA309_0 == LT) :
                                alt309 = 1


                            if alt309 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT589 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4057)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT589)


                            else:
                                break #loop309





                    char_literal590 = self.input.LT(1)
                    self.match(self.input, 95, self.FOLLOW_95_in_arrayLiteral4062)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_95.add(char_literal590)
                    # AST Rewrite
                    # elements: assignmentExpression
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 564:3: -> ^( ARRAY ( assignmentExpression )* )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:564:6: ^( ARRAY ( assignmentExpression )* )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAY, "ARRAY"), root_1)

                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:564:14: ( assignmentExpression )*
                        while stream_assignmentExpression.hasNext():
                            self.adaptor.addChild(root_1, stream_assignmentExpression.next())


                        stream_assignmentExpression.reset();

                        self.adaptor.addChild(root_0, root_1)





                elif alt321 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:4: '[' ( LT )* evalexpr= expression ( LT )* 'for' ( LT )* ( 'each' )? ( LT )* '(' ( LT )* init= forInStatementInitialiserPart ( LT )* 'in' ( LT )* genexpr= expression ( LT )* ')' ( LT )* ']'
                    char_literal591 = self.input.LT(1)
                    self.match(self.input, 94, self.FOLLOW_94_in_arrayLiteral4078)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_94.add(char_literal591)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:8: ( LT )*
                    while True: #loop311
                        alt311 = 2
                        LA311_0 = self.input.LA(1)

                        if (LA311_0 == LT) :
                            LA311_2 = self.input.LA(2)

                            if (self.synpred398()) :
                                alt311 = 1




                        if alt311 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT592 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4080)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT592)


                        else:
                            break #loop311


                    self.following.append(self.FOLLOW_expression_in_arrayLiteral4085)
                    evalexpr = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(evalexpr.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:32: ( LT )*
                    while True: #loop312
                        alt312 = 2
                        LA312_0 = self.input.LA(1)

                        if (LA312_0 == LT) :
                            alt312 = 1


                        if alt312 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT593 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4087)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT593)


                        else:
                            break #loop312


                    string_literal594 = self.input.LT(1)
                    self.match(self.input, 100, self.FOLLOW_100_in_arrayLiteral4090)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_100.add(string_literal594)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:42: ( LT )*
                    while True: #loop313
                        alt313 = 2
                        LA313_0 = self.input.LA(1)

                        if (LA313_0 == LT) :
                            LA313_2 = self.input.LA(2)

                            if (self.synpred400()) :
                                alt313 = 1




                        if alt313 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT595 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4092)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT595)


                        else:
                            break #loop313


                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:46: ( 'each' )?
                    alt314 = 2
                    LA314_0 = self.input.LA(1)

                    if (LA314_0 == 101) :
                        alt314 = 1
                    if alt314 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: 'each'
                        string_literal596 = self.input.LT(1)
                        self.match(self.input, 101, self.FOLLOW_101_in_arrayLiteral4095)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_101.add(string_literal596)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:54: ( LT )*
                    while True: #loop315
                        alt315 = 2
                        LA315_0 = self.input.LA(1)

                        if (LA315_0 == LT) :
                            alt315 = 1


                        if alt315 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT597 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4098)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT597)


                        else:
                            break #loop315


                    char_literal598 = self.input.LT(1)
                    self.match(self.input, 84, self.FOLLOW_84_in_arrayLiteral4101)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_84.add(char_literal598)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:62: ( LT )*
                    while True: #loop316
                        alt316 = 2
                        LA316_0 = self.input.LA(1)

                        if (LA316_0 == LT) :
                            LA316_2 = self.input.LA(2)

                            if (self.synpred403()) :
                                alt316 = 1




                        if alt316 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT599 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4103)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT599)


                        else:
                            break #loop316


                    self.following.append(self.FOLLOW_forInStatementInitialiserPart_in_arrayLiteral4108)
                    init = self.forInStatementInitialiserPart()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_forInStatementInitialiserPart.add(init.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:101: ( LT )*
                    while True: #loop317
                        alt317 = 2
                        LA317_0 = self.input.LA(1)

                        if (LA317_0 == LT) :
                            alt317 = 1


                        if alt317 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT600 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4110)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT600)


                        else:
                            break #loop317


                    string_literal601 = self.input.LT(1)
                    self.match(self.input, 102, self.FOLLOW_102_in_arrayLiteral4113)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_102.add(string_literal601)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:110: ( LT )*
                    while True: #loop318
                        alt318 = 2
                        LA318_0 = self.input.LA(1)

                        if (LA318_0 == LT) :
                            LA318_2 = self.input.LA(2)

                            if (self.synpred405()) :
                                alt318 = 1




                        if alt318 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT602 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4115)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT602)


                        else:
                            break #loop318


                    self.following.append(self.FOLLOW_expression_in_arrayLiteral4120)
                    genexpr = self.expression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_expression.add(genexpr.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:133: ( LT )*
                    while True: #loop319
                        alt319 = 2
                        LA319_0 = self.input.LA(1)

                        if (LA319_0 == LT) :
                            alt319 = 1


                        if alt319 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT603 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4122)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT603)


                        else:
                            break #loop319


                    char_literal604 = self.input.LT(1)
                    self.match(self.input, 86, self.FOLLOW_86_in_arrayLiteral4125)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_86.add(char_literal604)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:141: ( LT )*
                    while True: #loop320
                        alt320 = 2
                        LA320_0 = self.input.LA(1)

                        if (LA320_0 == LT) :
                            alt320 = 1


                        if alt320 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT605 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_arrayLiteral4127)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT605)


                        else:
                            break #loop320


                    char_literal606 = self.input.LT(1)
                    self.match(self.input, 95, self.FOLLOW_95_in_arrayLiteral4130)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_95.add(char_literal606)
                    # AST Rewrite
                    # elements: evalexpr, genexpr, init
                    # token labels: 
                    # rule labels: retval, evalexpr, genexpr, init
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        if evalexpr is not None:
                            stream_evalexpr = RewriteRuleSubtreeStream(self.adaptor, "token evalexpr", evalexpr.tree)
                        else:
                            stream_evalexpr = RewriteRuleSubtreeStream(self.adaptor, "token evalexpr", None)


                        if genexpr is not None:
                            stream_genexpr = RewriteRuleSubtreeStream(self.adaptor, "token genexpr", genexpr.tree)
                        else:
                            stream_genexpr = RewriteRuleSubtreeStream(self.adaptor, "token genexpr", None)


                        if init is not None:
                            stream_init = RewriteRuleSubtreeStream(self.adaptor, "token init", init.tree)
                        else:
                            stream_init = RewriteRuleSubtreeStream(self.adaptor, "token init", None)


                        root_0 = self.adaptor.nil()
                        # 566:3: -> ^( ARRAYCOMP $evalexpr $init $genexpr)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:566:6: ^( ARRAYCOMP $evalexpr $init $genexpr)
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(ARRAYCOMP, "ARRAYCOMP"), root_1)

                        self.adaptor.addChild(root_1, stream_evalexpr.next())
                        self.adaptor.addChild(root_1, stream_init.next())
                        self.adaptor.addChild(root_1, stream_genexpr.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 93, arrayLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end arrayLiteral

    class objectLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start objectLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:570:1: objectLiteral : '{' ( LT )* ( propertyNameAndValue )? ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* ( ',' ( LT )* )? '}' -> ^( OBJ ( propertyNameAndValue )* ) ;
    def objectLiteral(self, ):

        retval = self.objectLiteral_return()
        retval.start = self.input.LT(1)
        objectLiteral_StartIndex = self.input.index()
        root_0 = None

        char_literal607 = None
        LT608 = None
        LT610 = None
        char_literal611 = None
        LT612 = None
        LT614 = None
        char_literal615 = None
        LT616 = None
        char_literal617 = None
        propertyNameAndValue609 = None

        propertyNameAndValue613 = None


        char_literal607_tree = None
        LT608_tree = None
        LT610_tree = None
        char_literal611_tree = None
        LT612_tree = None
        LT614_tree = None
        char_literal615_tree = None
        LT616_tree = None
        char_literal617_tree = None
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_82 = RewriteRuleTokenStream(self.adaptor, "token 82")
        stream_81 = RewriteRuleTokenStream(self.adaptor, "token 81")
        stream_85 = RewriteRuleTokenStream(self.adaptor, "token 85")
        stream_propertyNameAndValue = RewriteRuleSubtreeStream(self.adaptor, "rule propertyNameAndValue")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 94):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:2: ( '{' ( LT )* ( propertyNameAndValue )? ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* ( ',' ( LT )* )? '}' -> ^( OBJ ( propertyNameAndValue )* ) )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:4: '{' ( LT )* ( propertyNameAndValue )? ( ( LT )* ',' ( LT )* propertyNameAndValue )* ( LT )* ( ',' ( LT )* )? '}'
                char_literal607 = self.input.LT(1)
                self.match(self.input, 81, self.FOLLOW_81_in_objectLiteral4166)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_81.add(char_literal607)
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:8: ( LT )*
                while True: #loop322
                    alt322 = 2
                    LA322_0 = self.input.LA(1)

                    if (LA322_0 == LT) :
                        LA322_2 = self.input.LA(2)

                        if (self.synpred408()) :
                            alt322 = 1




                    if alt322 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT608 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4168)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT608)


                    else:
                        break #loop322


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:12: ( propertyNameAndValue )?
                alt323 = 2
                LA323_0 = self.input.LA(1)

                if (LA323_0 == StringLiteral or (NumericLiteral <= LA323_0 <= Identifier) or (87 <= LA323_0 <= 89) or LA323_0 == 93 or LA323_0 == 101 or LA323_0 == 110 or (153 <= LA323_0 <= 157)) :
                    alt323 = 1
                if alt323 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: propertyNameAndValue
                    self.following.append(self.FOLLOW_propertyNameAndValue_in_objectLiteral4171)
                    propertyNameAndValue609 = self.propertyNameAndValue()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_propertyNameAndValue.add(propertyNameAndValue609.tree)



                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:34: ( ( LT )* ',' ( LT )* propertyNameAndValue )*
                while True: #loop326
                    alt326 = 2
                    alt326 = self.dfa326.predict(self.input)
                    if alt326 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:35: ( LT )* ',' ( LT )* propertyNameAndValue
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:35: ( LT )*
                        while True: #loop324
                            alt324 = 2
                            LA324_0 = self.input.LA(1)

                            if (LA324_0 == LT) :
                                alt324 = 1


                            if alt324 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT610 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4175)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT610)


                            else:
                                break #loop324


                        char_literal611 = self.input.LT(1)
                        self.match(self.input, 85, self.FOLLOW_85_in_objectLiteral4178)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_85.add(char_literal611)
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:43: ( LT )*
                        while True: #loop325
                            alt325 = 2
                            LA325_0 = self.input.LA(1)

                            if (LA325_0 == LT) :
                                alt325 = 1


                            if alt325 == 1:
                                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                                LT612 = self.input.LT(1)
                                self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4180)
                                if self.failed:
                                    return retval
                                if self.backtracking == 0:
                                    stream_LT.add(LT612)


                            else:
                                break #loop325


                        self.following.append(self.FOLLOW_propertyNameAndValue_in_objectLiteral4183)
                        propertyNameAndValue613 = self.propertyNameAndValue()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_propertyNameAndValue.add(propertyNameAndValue613.tree)


                    else:
                        break #loop326


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:70: ( LT )*
                while True: #loop327
                    alt327 = 2
                    LA327_0 = self.input.LA(1)

                    if (LA327_0 == LT) :
                        alt327 = 1


                    if alt327 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        LT614 = self.input.LT(1)
                        self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4187)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_LT.add(LT614)


                    else:
                        break #loop327


                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:74: ( ',' ( LT )* )?
                alt329 = 2
                LA329_0 = self.input.LA(1)

                if (LA329_0 == 85) :
                    alt329 = 1
                if alt329 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:75: ',' ( LT )*
                    char_literal615 = self.input.LT(1)
                    self.match(self.input, 85, self.FOLLOW_85_in_objectLiteral4191)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_85.add(char_literal615)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:79: ( LT )*
                    while True: #loop328
                        alt328 = 2
                        LA328_0 = self.input.LA(1)

                        if (LA328_0 == LT) :
                            alt328 = 1


                        if alt328 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT616 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_objectLiteral4193)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT616)


                        else:
                            break #loop328





                char_literal617 = self.input.LT(1)
                self.match(self.input, 82, self.FOLLOW_82_in_objectLiteral4198)
                if self.failed:
                    return retval
                if self.backtracking == 0:
                    stream_82.add(char_literal617)
                # AST Rewrite
                # elements: propertyNameAndValue
                # token labels: 
                # rule labels: retval
                # token list labels: 
                # rule list labels: 
                if self.backtracking == 0:

                    retval.tree = root_0

                    if retval is not None:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                    else:
                        stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                    root_0 = self.adaptor.nil()
                    # 572:3: -> ^( OBJ ( propertyNameAndValue )* )
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:572:6: ^( OBJ ( propertyNameAndValue )* )
                    root_1 = self.adaptor.nil()
                    root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(OBJ, "OBJ"), root_1)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:572:12: ( propertyNameAndValue )*
                    while stream_propertyNameAndValue.hasNext():
                        self.adaptor.addChild(root_1, stream_propertyNameAndValue.next())


                    stream_propertyNameAndValue.reset();

                    self.adaptor.addChild(root_0, root_1)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 94, objectLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end objectLiteral

    class propertyNameAndValue_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start propertyNameAndValue
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:575:1: propertyNameAndValue : ( propertyName ( LT )* ':' ( LT )* assignmentExpression -> ^( PROP propertyName PROP assignmentExpression ) | (action= 'get' | action= 'set' ) propname= identifier ( LT )* funcname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) ) | (action= 'get' | action= 'set' ) ( LT )* propname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) ) );
    def propertyNameAndValue(self, ):

        retval = self.propertyNameAndValue_return()
        retval.start = self.input.LT(1)
        propertyNameAndValue_StartIndex = self.input.index()
        root_0 = None

        action = None
        LT619 = None
        char_literal620 = None
        LT621 = None
        LT623 = None
        LT624 = None
        LT626 = None
        LT628 = None
        LT629 = None
        LT631 = None
        propname = None

        funcname = None

        propertyName618 = None

        assignmentExpression622 = None

        formalParameterList625 = None

        statementBlock627 = None

        formalParameterList630 = None

        statementBlock632 = None


        action_tree = None
        LT619_tree = None
        char_literal620_tree = None
        LT621_tree = None
        LT623_tree = None
        LT624_tree = None
        LT626_tree = None
        LT628_tree = None
        LT629_tree = None
        LT631_tree = None
        stream_153 = RewriteRuleTokenStream(self.adaptor, "token 153")
        stream_78 = RewriteRuleTokenStream(self.adaptor, "token 78")
        stream_LT = RewriteRuleTokenStream(self.adaptor, "token LT")
        stream_154 = RewriteRuleTokenStream(self.adaptor, "token 154")
        stream_propertyName = RewriteRuleSubtreeStream(self.adaptor, "rule propertyName")
        stream_assignmentExpression = RewriteRuleSubtreeStream(self.adaptor, "rule assignmentExpression")
        stream_statementBlock = RewriteRuleSubtreeStream(self.adaptor, "rule statementBlock")
        stream_identifier = RewriteRuleSubtreeStream(self.adaptor, "rule identifier")
        stream_formalParameterList = RewriteRuleSubtreeStream(self.adaptor, "rule formalParameterList")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 95):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:2: ( propertyName ( LT )* ':' ( LT )* assignmentExpression -> ^( PROP propertyName PROP assignmentExpression ) | (action= 'get' | action= 'set' ) propname= identifier ( LT )* funcname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) ) | (action= 'get' | action= 'set' ) ( LT )* propname= identifier ( LT )* formalParameterList ( LT )* statementBlock -> ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) ) )
                alt340 = 3
                alt340 = self.dfa340.predict(self.input)
                if alt340 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:4: propertyName ( LT )* ':' ( LT )* assignmentExpression
                    self.following.append(self.FOLLOW_propertyName_in_propertyNameAndValue4222)
                    propertyName618 = self.propertyName()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_propertyName.add(propertyName618.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:17: ( LT )*
                    while True: #loop330
                        alt330 = 2
                        LA330_0 = self.input.LA(1)

                        if (LA330_0 == LT) :
                            alt330 = 1


                        if alt330 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT619 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4224)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT619)


                        else:
                            break #loop330


                    char_literal620 = self.input.LT(1)
                    self.match(self.input, 78, self.FOLLOW_78_in_propertyNameAndValue4227)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_78.add(char_literal620)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:25: ( LT )*
                    while True: #loop331
                        alt331 = 2
                        LA331_0 = self.input.LA(1)

                        if (LA331_0 == LT) :
                            LA331_2 = self.input.LA(2)

                            if (self.synpred417()) :
                                alt331 = 1




                        if alt331 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT621 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4229)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT621)


                        else:
                            break #loop331


                    self.following.append(self.FOLLOW_assignmentExpression_in_propertyNameAndValue4232)
                    assignmentExpression622 = self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_assignmentExpression.add(assignmentExpression622.tree)
                    # AST Rewrite
                    # elements: assignmentExpression, propertyName
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 577:3: -> ^( PROP propertyName PROP assignmentExpression )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:577:6: ^( PROP propertyName PROP assignmentExpression )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROP, "PROP"), root_1)

                        self.adaptor.addChild(root_1, stream_propertyName.next())
                        self.adaptor.addChild(root_1, self.adaptor.createFromType(PROP, "PROP"))
                        self.adaptor.addChild(root_1, stream_assignmentExpression.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt340 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:578:4: (action= 'get' | action= 'set' ) propname= identifier ( LT )* funcname= identifier ( LT )* formalParameterList ( LT )* statementBlock
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:578:4: (action= 'get' | action= 'set' )
                    alt332 = 2
                    LA332_0 = self.input.LA(1)

                    if (LA332_0 == 153) :
                        alt332 = 1
                    elif (LA332_0 == 154) :
                        alt332 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("578:4: (action= 'get' | action= 'set' )", 332, 0, self.input)

                        raise nvae

                    if alt332 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:578:5: action= 'get'
                        action = self.input.LT(1)
                        self.match(self.input, 153, self.FOLLOW_153_in_propertyNameAndValue4254)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_153.add(action)


                    elif alt332 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:578:18: action= 'set'
                        action = self.input.LT(1)
                        self.match(self.input, 154, self.FOLLOW_154_in_propertyNameAndValue4258)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_154.add(action)



                    self.following.append(self.FOLLOW_identifier_in_propertyNameAndValue4263)
                    propname = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(propname.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:578:52: ( LT )*
                    while True: #loop333
                        alt333 = 2
                        LA333_0 = self.input.LA(1)

                        if (LA333_0 == LT) :
                            alt333 = 1


                        if alt333 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT623 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4265)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT623)


                        else:
                            break #loop333


                    self.following.append(self.FOLLOW_identifier_in_propertyNameAndValue4270)
                    funcname = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(funcname.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:578:76: ( LT )*
                    while True: #loop334
                        alt334 = 2
                        LA334_0 = self.input.LA(1)

                        if (LA334_0 == LT) :
                            alt334 = 1


                        if alt334 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT624 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4272)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT624)


                        else:
                            break #loop334


                    self.following.append(self.FOLLOW_formalParameterList_in_propertyNameAndValue4275)
                    formalParameterList625 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList625.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:578:100: ( LT )*
                    while True: #loop335
                        alt335 = 2
                        LA335_0 = self.input.LA(1)

                        if (LA335_0 == LT) :
                            alt335 = 1


                        if alt335 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT626 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4277)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT626)


                        else:
                            break #loop335


                    self.following.append(self.FOLLOW_statementBlock_in_propertyNameAndValue4280)
                    statementBlock627 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock627.tree)
                    # AST Rewrite
                    # elements: action, funcname, propname, statementBlock, formalParameterList
                    # token labels: action
                    # rule labels: propname, retval, funcname
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_action = RewriteRuleTokenStream(self.adaptor, "token action", action)

                        if propname is not None:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", propname.tree)
                        else:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", None)


                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        if funcname is not None:
                            stream_funcname = RewriteRuleSubtreeStream(self.adaptor, "token funcname", funcname.tree)
                        else:
                            stream_funcname = RewriteRuleSubtreeStream(self.adaptor, "token funcname", None)


                        root_0 = self.adaptor.nil()
                        # 579:3: -> ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:579:6: ^( PROP $propname $action ^( FUNC $funcname formalParameterList statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROP, "PROP"), root_1)

                        self.adaptor.addChild(root_1, stream_propname.next())
                        self.adaptor.addChild(root_1, stream_action.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:579:31: ^( FUNC $funcname formalParameterList statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_2)

                        self.adaptor.addChild(root_2, stream_funcname.next())
                        self.adaptor.addChild(root_2, stream_formalParameterList.next())
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                elif alt340 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:580:4: (action= 'get' | action= 'set' ) ( LT )* propname= identifier ( LT )* formalParameterList ( LT )* statementBlock
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:580:4: (action= 'get' | action= 'set' )
                    alt336 = 2
                    LA336_0 = self.input.LA(1)

                    if (LA336_0 == 153) :
                        alt336 = 1
                    elif (LA336_0 == 154) :
                        alt336 = 2
                    else:
                        if self.backtracking > 0:
                            self.failed = True
                            return retval

                        nvae = NoViableAltException("580:4: (action= 'get' | action= 'set' )", 336, 0, self.input)

                        raise nvae

                    if alt336 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:580:5: action= 'get'
                        action = self.input.LT(1)
                        self.match(self.input, 153, self.FOLLOW_153_in_propertyNameAndValue4313)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_153.add(action)


                    elif alt336 == 2:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:580:18: action= 'set'
                        action = self.input.LT(1)
                        self.match(self.input, 154, self.FOLLOW_154_in_propertyNameAndValue4317)
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            stream_154.add(action)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:580:32: ( LT )*
                    while True: #loop337
                        alt337 = 2
                        LA337_0 = self.input.LA(1)

                        if (LA337_0 == LT) :
                            alt337 = 1


                        if alt337 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT628 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4320)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT628)


                        else:
                            break #loop337


                    self.following.append(self.FOLLOW_identifier_in_propertyNameAndValue4325)
                    propname = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_identifier.add(propname.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:580:56: ( LT )*
                    while True: #loop338
                        alt338 = 2
                        LA338_0 = self.input.LA(1)

                        if (LA338_0 == LT) :
                            alt338 = 1


                        if alt338 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT629 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4327)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT629)


                        else:
                            break #loop338


                    self.following.append(self.FOLLOW_formalParameterList_in_propertyNameAndValue4330)
                    formalParameterList630 = self.formalParameterList()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_formalParameterList.add(formalParameterList630.tree)
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:580:80: ( LT )*
                    while True: #loop339
                        alt339 = 2
                        LA339_0 = self.input.LA(1)

                        if (LA339_0 == LT) :
                            alt339 = 1


                        if alt339 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            LT631 = self.input.LT(1)
                            self.match(self.input, LT, self.FOLLOW_LT_in_propertyNameAndValue4332)
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                stream_LT.add(LT631)


                        else:
                            break #loop339


                    self.following.append(self.FOLLOW_statementBlock_in_propertyNameAndValue4335)
                    statementBlock632 = self.statementBlock()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_statementBlock.add(statementBlock632.tree)
                    # AST Rewrite
                    # elements: statementBlock, action, formalParameterList, propname
                    # token labels: action
                    # rule labels: propname, retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0
                        stream_action = RewriteRuleTokenStream(self.adaptor, "token action", action)

                        if propname is not None:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", propname.tree)
                        else:
                            stream_propname = RewriteRuleSubtreeStream(self.adaptor, "token propname", None)


                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 581:3: -> ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:581:6: ^( PROP $propname $action ^( FUNC ANONYMOUS formalParameterList statementBlock ) )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(PROP, "PROP"), root_1)

                        self.adaptor.addChild(root_1, stream_propname.next())
                        self.adaptor.addChild(root_1, stream_action.next())
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:581:31: ^( FUNC ANONYMOUS formalParameterList statementBlock )
                        root_2 = self.adaptor.nil()
                        root_2 = self.adaptor.becomeRoot(self.adaptor.createFromType(FUNC, "FUNC"), root_2)

                        self.adaptor.addChild(root_2, self.adaptor.createFromType(ANONYMOUS, "ANONYMOUS"))
                        self.adaptor.addChild(root_2, stream_formalParameterList.next())
                        self.adaptor.addChild(root_2, stream_statementBlock.next())

                        self.adaptor.addChild(root_1, root_2)

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 95, propertyNameAndValue_StartIndex)

            pass

        return retval

    # $ANTLR end propertyNameAndValue

    class propertyName_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start propertyName
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:584:1: propertyName : ( identifier | literalNoRegex );
    def propertyName(self, ):

        retval = self.propertyName_return()
        retval.start = self.input.LT(1)
        propertyName_StartIndex = self.input.index()
        root_0 = None

        identifier633 = None

        literalNoRegex634 = None



        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 96):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:585:2: ( identifier | literalNoRegex )
                alt341 = 2
                LA341_0 = self.input.LA(1)

                if (LA341_0 == Identifier or (87 <= LA341_0 <= 89) or LA341_0 == 93 or LA341_0 == 101 or LA341_0 == 110 or (153 <= LA341_0 <= 154)) :
                    alt341 = 1
                elif (LA341_0 == StringLiteral or LA341_0 == NumericLiteral or (155 <= LA341_0 <= 157)) :
                    alt341 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("584:1: propertyName : ( identifier | literalNoRegex );", 341, 0, self.input)

                    raise nvae

                if alt341 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:585:4: identifier
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_identifier_in_propertyName4370)
                    identifier633 = self.identifier()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, identifier633.tree)


                elif alt341 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:586:4: literalNoRegex
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_literalNoRegex_in_propertyName4375)
                    literalNoRegex634 = self.literalNoRegex()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, literalNoRegex634.tree)


                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 96, propertyName_StartIndex)

            pass

        return retval

    # $ANTLR end propertyName

    class literal_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start literal
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:590:1: literal : ( literalNoRegex | regularExpressionLiteral -> ^( REGEX regularExpressionLiteral ) );
    def literal(self, ):

        retval = self.literal_return()
        retval.start = self.input.LT(1)
        literal_StartIndex = self.input.index()
        root_0 = None

        literalNoRegex635 = None

        regularExpressionLiteral636 = None


        stream_regularExpressionLiteral = RewriteRuleSubtreeStream(self.adaptor, "rule regularExpressionLiteral")
        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 97):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:591:2: ( literalNoRegex | regularExpressionLiteral -> ^( REGEX regularExpressionLiteral ) )
                alt342 = 2
                LA342_0 = self.input.LA(1)

                if (LA342_0 == StringLiteral or LA342_0 == NumericLiteral or (155 <= LA342_0 <= 157)) :
                    alt342 = 1
                elif (LA342_0 == RegularExpressionHacks or LA342_0 == 77) :
                    alt342 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("590:1: literal : ( literalNoRegex | regularExpressionLiteral -> ^( REGEX regularExpressionLiteral ) );", 342, 0, self.input)

                    raise nvae

                if alt342 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:591:4: literalNoRegex
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_literalNoRegex_in_literal4387)
                    literalNoRegex635 = self.literalNoRegex()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, literalNoRegex635.tree)


                elif alt342 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:592:4: regularExpressionLiteral
                    self.following.append(self.FOLLOW_regularExpressionLiteral_in_literal4392)
                    regularExpressionLiteral636 = self.regularExpressionLiteral()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_regularExpressionLiteral.add(regularExpressionLiteral636.tree)
                    # AST Rewrite
                    # elements: regularExpressionLiteral
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 592:29: -> ^( REGEX regularExpressionLiteral )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:592:32: ^( REGEX regularExpressionLiteral )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(REGEX, "REGEX"), root_1)

                        self.adaptor.addChild(root_1, stream_regularExpressionLiteral.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 97, literal_StartIndex)

            pass

        return retval

    # $ANTLR end literal

    class literalNoRegex_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start literalNoRegex
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:595:1: literalNoRegex : ( 'null' -> NULL | 'true' -> TRUE | 'false' -> FALSE | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMBER NumericLiteral ) );
    def literalNoRegex(self, ):

        retval = self.literalNoRegex_return()
        retval.start = self.input.LT(1)
        literalNoRegex_StartIndex = self.input.index()
        root_0 = None

        string_literal637 = None
        string_literal638 = None
        string_literal639 = None
        StringLiteral640 = None
        NumericLiteral641 = None

        string_literal637_tree = None
        string_literal638_tree = None
        string_literal639_tree = None
        StringLiteral640_tree = None
        NumericLiteral641_tree = None
        stream_StringLiteral = RewriteRuleTokenStream(self.adaptor, "token StringLiteral")
        stream_NumericLiteral = RewriteRuleTokenStream(self.adaptor, "token NumericLiteral")
        stream_157 = RewriteRuleTokenStream(self.adaptor, "token 157")
        stream_156 = RewriteRuleTokenStream(self.adaptor, "token 156")
        stream_155 = RewriteRuleTokenStream(self.adaptor, "token 155")

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 98):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:596:2: ( 'null' -> NULL | 'true' -> TRUE | 'false' -> FALSE | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMBER NumericLiteral ) )
                alt343 = 5
                LA343 = self.input.LA(1)
                if LA343 == 155:
                    alt343 = 1
                elif LA343 == 156:
                    alt343 = 2
                elif LA343 == 157:
                    alt343 = 3
                elif LA343 == StringLiteral:
                    alt343 = 4
                elif LA343 == NumericLiteral:
                    alt343 = 5
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("595:1: literalNoRegex : ( 'null' -> NULL | 'true' -> TRUE | 'false' -> FALSE | StringLiteral -> ^( STRING StringLiteral ) | NumericLiteral -> ^( NUMBER NumericLiteral ) );", 343, 0, self.input)

                    raise nvae

                if alt343 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:596:4: 'null'
                    string_literal637 = self.input.LT(1)
                    self.match(self.input, 155, self.FOLLOW_155_in_literalNoRegex4411)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_155.add(string_literal637)
                    # AST Rewrite
                    # elements: 
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 596:11: -> NULL
                        self.adaptor.addChild(root_0, self.adaptor.createFromType(NULL, "NULL"))





                elif alt343 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:597:4: 'true'
                    string_literal638 = self.input.LT(1)
                    self.match(self.input, 156, self.FOLLOW_156_in_literalNoRegex4420)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_156.add(string_literal638)
                    # AST Rewrite
                    # elements: 
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 597:11: -> TRUE
                        self.adaptor.addChild(root_0, self.adaptor.createFromType(TRUE, "TRUE"))





                elif alt343 == 3:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:598:4: 'false'
                    string_literal639 = self.input.LT(1)
                    self.match(self.input, 157, self.FOLLOW_157_in_literalNoRegex4429)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_157.add(string_literal639)
                    # AST Rewrite
                    # elements: 
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 598:12: -> FALSE
                        self.adaptor.addChild(root_0, self.adaptor.createFromType(FALSE, "FALSE"))





                elif alt343 == 4:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:599:4: StringLiteral
                    StringLiteral640 = self.input.LT(1)
                    self.match(self.input, StringLiteral, self.FOLLOW_StringLiteral_in_literalNoRegex4438)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_StringLiteral.add(StringLiteral640)
                    # AST Rewrite
                    # elements: StringLiteral
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 599:18: -> ^( STRING StringLiteral )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:599:21: ^( STRING StringLiteral )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(STRING, "STRING"), root_1)

                        self.adaptor.addChild(root_1, stream_StringLiteral.next())

                        self.adaptor.addChild(root_0, root_1)





                elif alt343 == 5:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:600:4: NumericLiteral
                    NumericLiteral641 = self.input.LT(1)
                    self.match(self.input, NumericLiteral, self.FOLLOW_NumericLiteral_in_literalNoRegex4451)
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        stream_NumericLiteral.add(NumericLiteral641)
                    # AST Rewrite
                    # elements: NumericLiteral
                    # token labels: 
                    # rule labels: retval
                    # token list labels: 
                    # rule list labels: 
                    if self.backtracking == 0:

                        retval.tree = root_0

                        if retval is not None:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", retval.tree)
                        else:
                            stream_retval = RewriteRuleSubtreeStream(self.adaptor, "token retval", None)


                        root_0 = self.adaptor.nil()
                        # 600:19: -> ^( NUMBER NumericLiteral )
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:600:22: ^( NUMBER NumericLiteral )
                        root_1 = self.adaptor.nil()
                        root_1 = self.adaptor.becomeRoot(self.adaptor.createFromType(NUMBER, "NUMBER"), root_1)

                        self.adaptor.addChild(root_1, stream_NumericLiteral.next())

                        self.adaptor.addChild(root_0, root_1)





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 98, literalNoRegex_StartIndex)

            pass

        return retval

    # $ANTLR end literalNoRegex

    class reFirstChar_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start reFirstChar
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:610:1: reFirstChar : ( ';' | ',' | '.' | ':' | '[' | ']' | '(' | ')' | '{' | '}' | '?' | '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' | '<' | '>' | '<=' | '>=' | '<<' | '>>' | '>>>' | '|' | '||' | '&' | '&&' | '!' | '#' | '%' | '^' | '++' | '--' | '+' | '-' | '~' | 'break' | 'case' | 'catch' | 'const' | 'continue' | 'default' | 'delete' | 'do' | 'each' | 'else' | 'false' | 'finally' | 'for' | 'function' | 'get' | 'if' | 'in' | 'let' | 'instanceof' | 'namespace' | 'new' | 'null' | 'return' | 'set' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'while' | 'with' | 'var' | 'void' | 'xml' | StringLiteral | NumericLiteral | Identifier );
    def reFirstChar(self, ):

        retval = self.reFirstChar_return()
        retval.start = self.input.LT(1)
        reFirstChar_StartIndex = self.input.index()
        root_0 = None

        set642 = None

        set642_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 99):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:611:2: ( ';' | ',' | '.' | ':' | '[' | ']' | '(' | ')' | '{' | '}' | '?' | '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' | '<' | '>' | '<=' | '>=' | '<<' | '>>' | '>>>' | '|' | '||' | '&' | '&&' | '!' | '#' | '%' | '^' | '++' | '--' | '+' | '-' | '~' | 'break' | 'case' | 'catch' | 'const' | 'continue' | 'default' | 'delete' | 'do' | 'each' | 'else' | 'false' | 'finally' | 'for' | 'function' | 'get' | 'if' | 'in' | 'let' | 'instanceof' | 'namespace' | 'new' | 'null' | 'return' | 'set' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'while' | 'with' | 'var' | 'void' | 'xml' | StringLiteral | NumericLiteral | Identifier )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                root_0 = self.adaptor.nil()

                set642 = self.input.LT(1)
                if self.input.LA(1) == StringLiteral or (NumericLiteral <= self.input.LA(1) <= Identifier) or (74 <= self.input.LA(1) <= 76) or (78 <= self.input.LA(1) <= 109) or (111 <= self.input.LA(1) <= 114) or (116 <= self.input.LA(1) <= 132) or (137 <= self.input.LA(1) <= 158):
                    self.input.consume();
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set642))
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_reFirstChar0
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 99, reFirstChar_StartIndex)

            pass

        return retval

    # $ANTLR end reFirstChar

    class reChars_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start reChars
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:629:1: reChars : ( reFirstChar | '*' );
    def reChars(self, ):

        retval = self.reChars_return()
        retval.start = self.input.LT(1)
        reChars_StartIndex = self.input.index()
        root_0 = None

        char_literal644 = None
        reFirstChar643 = None


        char_literal644_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 100):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:630:2: ( reFirstChar | '*' )
                alt344 = 2
                LA344_0 = self.input.LA(1)

                if (LA344_0 == StringLiteral or (NumericLiteral <= LA344_0 <= Identifier) or (74 <= LA344_0 <= 76) or (78 <= LA344_0 <= 109) or (111 <= LA344_0 <= 114) or (116 <= LA344_0 <= 132) or (137 <= LA344_0 <= 158)) :
                    alt344 = 1
                elif (LA344_0 == 115) :
                    alt344 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("629:1: reChars : ( reFirstChar | '*' );", 344, 0, self.input)

                    raise nvae

                if alt344 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:630:4: reFirstChar
                    root_0 = self.adaptor.nil()

                    self.following.append(self.FOLLOW_reFirstChar_in_reChars4852)
                    reFirstChar643 = self.reFirstChar()
                    self.following.pop()
                    if self.failed:
                        return retval
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, reFirstChar643.tree)


                elif alt344 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:631:4: '*'
                    root_0 = self.adaptor.nil()

                    char_literal644 = self.input.LT(1)
                    self.match(self.input, 115, self.FOLLOW_115_in_reChars4857)
                    if self.failed:
                        return retval

                    char_literal644_tree = self.adaptor.createWithPayload(char_literal644)
                    self.adaptor.addChild(root_0, char_literal644_tree)



                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 100, reChars_StartIndex)

            pass

        return retval

    # $ANTLR end reChars

    class regularExpressionLiteral_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start regularExpressionLiteral
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:637:1: regularExpressionLiteral : ( '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )? | RegularExpressionHacks ( Identifier )? );
    def regularExpressionLiteral(self, ):

        retval = self.regularExpressionLiteral_return()
        retval.start = self.input.LT(1)
        regularExpressionLiteral_StartIndex = self.input.index()
        root_0 = None

        char_literal645 = None
        char_literal648 = None
        Identifier649 = None
        RegularExpressionHacks650 = None
        Identifier651 = None
        reFirstChar646 = None

        reChars647 = None


        char_literal645_tree = None
        char_literal648_tree = None
        Identifier649_tree = None
        RegularExpressionHacks650_tree = None
        Identifier651_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 101):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:638:2: ( '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )? | RegularExpressionHacks ( Identifier )? )
                alt349 = 2
                LA349_0 = self.input.LA(1)

                if (LA349_0 == 77) :
                    alt349 = 1
                elif (LA349_0 == RegularExpressionHacks) :
                    alt349 = 2
                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    nvae = NoViableAltException("637:1: regularExpressionLiteral : ( '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )? | RegularExpressionHacks ( Identifier )? );", 349, 0, self.input)

                    raise nvae

                if alt349 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:638:4: '/' ( reFirstChar )? ( reChars )* '/' ( Identifier )?
                    root_0 = self.adaptor.nil()

                    char_literal645 = self.input.LT(1)
                    self.match(self.input, 77, self.FOLLOW_77_in_regularExpressionLiteral4871)
                    if self.failed:
                        return retval

                    char_literal645_tree = self.adaptor.createWithPayload(char_literal645)
                    self.adaptor.addChild(root_0, char_literal645_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:638:8: ( reFirstChar )?
                    alt345 = 2
                    LA345_0 = self.input.LA(1)

                    if (LA345_0 == StringLiteral or (NumericLiteral <= LA345_0 <= Identifier) or (74 <= LA345_0 <= 76) or (78 <= LA345_0 <= 109) or (111 <= LA345_0 <= 114) or (116 <= LA345_0 <= 132) or (137 <= LA345_0 <= 158)) :
                        LA345_1 = self.input.LA(2)

                        if (self.synpred515()) :
                            alt345 = 1
                    if alt345 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: reFirstChar
                        self.following.append(self.FOLLOW_reFirstChar_in_regularExpressionLiteral4873)
                        reFirstChar646 = self.reFirstChar()
                        self.following.pop()
                        if self.failed:
                            return retval
                        if self.backtracking == 0:
                            self.adaptor.addChild(root_0, reFirstChar646.tree)



                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:638:21: ( reChars )*
                    while True: #loop346
                        alt346 = 2
                        LA346_0 = self.input.LA(1)

                        if (LA346_0 == StringLiteral or (NumericLiteral <= LA346_0 <= Identifier) or (74 <= LA346_0 <= 76) or (78 <= LA346_0 <= 109) or (111 <= LA346_0 <= 132) or (137 <= LA346_0 <= 158)) :
                            alt346 = 1


                        if alt346 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: reChars
                            self.following.append(self.FOLLOW_reChars_in_regularExpressionLiteral4876)
                            reChars647 = self.reChars()
                            self.following.pop()
                            if self.failed:
                                return retval
                            if self.backtracking == 0:
                                self.adaptor.addChild(root_0, reChars647.tree)


                        else:
                            break #loop346


                    char_literal648 = self.input.LT(1)
                    self.match(self.input, 77, self.FOLLOW_77_in_regularExpressionLiteral4879)
                    if self.failed:
                        return retval

                    char_literal648_tree = self.adaptor.createWithPayload(char_literal648)
                    self.adaptor.addChild(root_0, char_literal648_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:638:34: ( Identifier )?
                    alt347 = 2
                    LA347_0 = self.input.LA(1)

                    if (LA347_0 == Identifier) :
                        alt347 = 1
                    if alt347 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: Identifier
                        Identifier649 = self.input.LT(1)
                        self.match(self.input, Identifier, self.FOLLOW_Identifier_in_regularExpressionLiteral4881)
                        if self.failed:
                            return retval

                        Identifier649_tree = self.adaptor.createWithPayload(Identifier649)
                        self.adaptor.addChild(root_0, Identifier649_tree)






                elif alt349 == 2:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:639:4: RegularExpressionHacks ( Identifier )?
                    root_0 = self.adaptor.nil()

                    RegularExpressionHacks650 = self.input.LT(1)
                    self.match(self.input, RegularExpressionHacks, self.FOLLOW_RegularExpressionHacks_in_regularExpressionLiteral4887)
                    if self.failed:
                        return retval

                    RegularExpressionHacks650_tree = self.adaptor.createWithPayload(RegularExpressionHacks650)
                    self.adaptor.addChild(root_0, RegularExpressionHacks650_tree)

                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:639:27: ( Identifier )?
                    alt348 = 2
                    LA348_0 = self.input.LA(1)

                    if (LA348_0 == Identifier) :
                        alt348 = 1
                    if alt348 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: Identifier
                        Identifier651 = self.input.LT(1)
                        self.match(self.input, Identifier, self.FOLLOW_Identifier_in_regularExpressionLiteral4889)
                        if self.failed:
                            return retval

                        Identifier651_tree = self.adaptor.createWithPayload(Identifier651)
                        self.adaptor.addChild(root_0, Identifier651_tree)






                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 101, regularExpressionLiteral_StartIndex)

            pass

        return retval

    # $ANTLR end regularExpressionLiteral

    class identifier_return(object):
        def __init__(self):
            self.start = None
            self.stop = None

            self.tree = None


    # $ANTLR start identifier
    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:644:1: identifier : ( 'get' | 'set' | 'each' | 'default' | 'xml' | 'namespace' | 'let' | 'yield' | Identifier );
    def identifier(self, ):

        retval = self.identifier_return()
        retval.start = self.input.LT(1)
        identifier_StartIndex = self.input.index()
        root_0 = None

        set652 = None

        set652_tree = None

        try:
            try:
                if self.backtracking > 0 and self.alreadyParsedRule(self.input, 102):
                    return retval

                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:645:2: ( 'get' | 'set' | 'each' | 'default' | 'xml' | 'namespace' | 'let' | 'yield' | Identifier )
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:
                root_0 = self.adaptor.nil()

                set652 = self.input.LT(1)
                if self.input.LA(1) == Identifier or (87 <= self.input.LA(1) <= 89) or self.input.LA(1) == 93 or self.input.LA(1) == 101 or self.input.LA(1) == 110 or (153 <= self.input.LA(1) <= 154):
                    self.input.consume();
                    if self.backtracking == 0:
                        self.adaptor.addChild(root_0, self.adaptor.createWithPayload(set652))
                    self.errorRecovery = False
                    self.failed = False

                else:
                    if self.backtracking > 0:
                        self.failed = True
                        return retval

                    mse = MismatchedSetException(None, self.input)
                    self.recoverFromMismatchedSet(
                        self.input, mse, self.FOLLOW_set_in_identifier0
                        )
                    raise mse





                retval.stop = self.input.LT(-1)

                if self.backtracking == 0:

                    retval.tree = self.adaptor.rulePostProcessing(root_0)
                    self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)

            except RecognitionException, re:
                self.reportError(re)
                self.recover(self.input, re)
        finally:
            if self.backtracking > 0:
                self.memoize(self.input, 102, identifier_StartIndex)

            pass

        return retval

    # $ANTLR end identifier

    # $ANTLR start synpred1
    def synpred1_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:59:4: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:59:4: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1204)
        if self.failed:
            return 


    # $ANTLR end synpred1



    # $ANTLR start synpred3
    def synpred3_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:4: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:64:4: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3237)
        if self.failed:
            return 


    # $ANTLR end synpred3



    # $ANTLR start synpred7
    def synpred7_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:19: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:69:19: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred7273)
        if self.failed:
            return 


    # $ANTLR end synpred7



    # $ANTLR start synpred19
    def synpred19_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:109:4: ( '{' )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:109:5: '{'
        self.match(self.input, 81, self.FOLLOW_81_in_synpred19489)
        if self.failed:
            return 


    # $ANTLR end synpred19



    # $ANTLR start synpred21
    def synpred21_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:128:4: ( xmlEmptyTag )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:128:4: xmlEmptyTag
        self.following.append(self.FOLLOW_xmlEmptyTag_in_synpred21539)
        self.xmlEmptyTag()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred21



    # $ANTLR start synpred22
    def synpred22_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:4: ( xmlStartTag )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:129:4: xmlStartTag
        self.following.append(self.FOLLOW_xmlStartTag_in_synpred22544)
        self.xmlStartTag()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred22



    # $ANTLR start synpred25
    def synpred25_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:5: ( ( LT )* xmlPayload )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:5: ( LT )* xmlPayload
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:136:5: ( LT )*
        while True: #loop354
            alt354 = 2
            LA354_0 = self.input.LA(1)

            if (LA354_0 == LT) :
                alt354 = 1


            if alt354 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred25567)
                if self.failed:
                    return 


            else:
                break #loop354


        self.following.append(self.FOLLOW_xmlPayload_in_synpred25570)
        self.xmlPayload()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred25



    # $ANTLR start synpred29
    def synpred29_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:4: ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* statementBlock
        self.match(self.input, 83, self.FOLLOW_83_in_synpred29585)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:15: ( LT )*
        while True: #loop355
            alt355 = 2
            LA355_0 = self.input.LA(1)

            if (LA355_0 == LT) :
                alt355 = 1


            if alt355 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred29587)
                if self.failed:
                    return 


            else:
                break #loop355


        self.following.append(self.FOLLOW_identifier_in_synpred29590)
        self.identifier()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:30: ( LT )*
        while True: #loop356
            alt356 = 2
            LA356_0 = self.input.LA(1)

            if (LA356_0 == LT) :
                alt356 = 1


            if alt356 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred29592)
                if self.failed:
                    return 


            else:
                break #loop356


        self.following.append(self.FOLLOW_formalParameterList_in_synpred29595)
        self.formalParameterList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:141:54: ( LT )*
        while True: #loop357
            alt357 = 2
            LA357_0 = self.input.LA(1)

            if (LA357_0 == LT) :
                alt357 = 1


            if alt357 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred29597)
                if self.failed:
                    return 


            else:
                break #loop357


        self.following.append(self.FOLLOW_statementBlock_in_synpred29600)
        self.statementBlock()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred29



    # $ANTLR start synpred32
    def synpred32_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:143:4: ( 'function' ( LT )* formalParameterList ( LT )* statementBlock )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:143:4: 'function' ( LT )* formalParameterList ( LT )* statementBlock
        self.match(self.input, 83, self.FOLLOW_83_in_synpred32627)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:143:20: ( LT )*
        while True: #loop358
            alt358 = 2
            LA358_0 = self.input.LA(1)

            if (LA358_0 == LT) :
                alt358 = 1


            if alt358 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred32629)
                if self.failed:
                    return 


            else:
                break #loop358


        self.following.append(self.FOLLOW_formalParameterList_in_synpred32632)
        self.formalParameterList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:143:44: ( LT )*
        while True: #loop359
            alt359 = 2
            LA359_0 = self.input.LA(1)

            if (LA359_0 == LT) :
                alt359 = 1


            if alt359 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred32634)
                if self.failed:
                    return 


            else:
                break #loop359


        self.following.append(self.FOLLOW_statementBlock_in_synpred32637)
        self.statementBlock()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred32



    # $ANTLR start synpred35
    def synpred35_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:54: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:54: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred35675)
        if self.failed:
            return 


    # $ANTLR end synpred35



    # $ANTLR start synpred36
    def synpred36_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:4: ( 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:4: 'function' ( LT )* identifier ( LT )* formalParameterList ( LT )* assignmentExpression
        self.match(self.input, 83, self.FOLLOW_83_in_synpred36663)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:15: ( LT )*
        while True: #loop360
            alt360 = 2
            LA360_0 = self.input.LA(1)

            if (LA360_0 == LT) :
                alt360 = 1


            if alt360 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred36665)
                if self.failed:
                    return 


            else:
                break #loop360


        self.following.append(self.FOLLOW_identifier_in_synpred36668)
        self.identifier()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:30: ( LT )*
        while True: #loop361
            alt361 = 2
            LA361_0 = self.input.LA(1)

            if (LA361_0 == LT) :
                alt361 = 1


            if alt361 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred36670)
                if self.failed:
                    return 


            else:
                break #loop361


        self.following.append(self.FOLLOW_formalParameterList_in_synpred36673)
        self.formalParameterList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:145:54: ( LT )*
        while True: #loop362
            alt362 = 2
            LA362_0 = self.input.LA(1)

            if (LA362_0 == LT) :
                LA362_2 = self.input.LA(2)

                if (self.synpred35()) :
                    alt362 = 1




            if alt362 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred36675)
                if self.failed:
                    return 


            else:
                break #loop362


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred36678)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred36



    # $ANTLR start synpred38
    def synpred38_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:147:44: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:147:44: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred38712)
        if self.failed:
            return 


    # $ANTLR end synpred38



    # $ANTLR start synpred45
    def synpred45_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:158:4: ( statementBlock )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:158:4: statementBlock
        self.following.append(self.FOLLOW_statementBlock_in_synpred45797)
        self.statementBlock()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred45



    # $ANTLR start synpred46
    def synpred46_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:159:4: ( variableStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:159:4: variableStatement
        self.following.append(self.FOLLOW_variableStatement_in_synpred46802)
        self.variableStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred46



    # $ANTLR start synpred48
    def synpred48_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:161:4: ( expressionStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:161:4: expressionStatement
        self.following.append(self.FOLLOW_expressionStatement_in_synpred48812)
        self.expressionStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred48



    # $ANTLR start synpred55
    def synpred55_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:168:4: ( letStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:168:4: letStatement
        self.following.append(self.FOLLOW_letStatement_in_synpred55847)
        self.letStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred55



    # $ANTLR start synpred56
    def synpred56_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:169:4: ( labelledStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:169:4: labelledStatement
        self.following.append(self.FOLLOW_labelledStatement_in_synpred56852)
        self.labelledStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred56



    # $ANTLR start synpred60
    def synpred60_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:173:4: ( yieldStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:173:4: yieldStatement
        self.following.append(self.FOLLOW_yieldStatement_in_synpred60872)
        self.yieldStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred60



    # $ANTLR start synpred64
    def synpred64_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred64933)
        if self.failed:
            return 


    # $ANTLR end synpred64



    # $ANTLR start synpred67
    def synpred67_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:4: ( '{' ( LT )* ( statementList )? ( LT )* '}' )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:4: '{' ( LT )* ( statementList )? ( LT )* '}'
        self.match(self.input, 81, self.FOLLOW_81_in_synpred67931)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:8: ( LT )*
        while True: #loop369
            alt369 = 2
            LA369_0 = self.input.LA(1)

            if (LA369_0 == LT) :
                LA369_2 = self.input.LA(2)

                if (self.synpred64()) :
                    alt369 = 1




            if alt369 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred67933)
                if self.failed:
                    return 


            else:
                break #loop369


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:12: ( statementList )?
        alt370 = 2
        alt370 = self.dfa370.predict(self.input)
        if alt370 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: statementList
            self.following.append(self.FOLLOW_statementList_in_synpred67936)
            self.statementList()
            self.following.pop()
            if self.failed:
                return 



        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:183:27: ( LT )*
        while True: #loop371
            alt371 = 2
            LA371_0 = self.input.LA(1)

            if (LA371_0 == LT) :
                alt371 = 1


            if alt371 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred67939)
                if self.failed:
                    return 


            else:
                break #loop371


        self.match(self.input, 82, self.FOLLOW_82_in_synpred67942)
        if self.failed:
            return 


    # $ANTLR end synpred67



    # $ANTLR start synpred69
    def synpred69_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:15: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:15: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred69999)
        if self.failed:
            return 


    # $ANTLR end synpred69



    # $ANTLR start synpred70
    def synpred70_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:15: ( ( LT )* statement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:15: ( LT )* statement
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:190:17: ( LT )*
        while True: #loop372
            alt372 = 2
            LA372_0 = self.input.LA(1)

            if (LA372_0 == LT) :
                LA372_2 = self.input.LA(2)

                if (self.synpred69()) :
                    alt372 = 1




            if alt372 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred70999)
                if self.failed:
                    return 


            else:
                break #loop372


        self.following.append(self.FOLLOW_statement_in_synpred701003)
        self.statement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred70



    # $ANTLR start synpred84
    def synpred84_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred841161)
        if self.failed:
            return 


    # $ANTLR end synpred84



    # $ANTLR start synpred89
    def synpred89_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:39: ( ( LT )* ',' ( ( LT )* destructuringDeclaration )? )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:39: ( LT )* ',' ( ( LT )* destructuringDeclaration )?
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:39: ( LT )*
        while True: #loop379
            alt379 = 2
            LA379_0 = self.input.LA(1)

            if (LA379_0 == LT) :
                alt379 = 1


            if alt379 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred891168)
                if self.failed:
                    return 


            else:
                break #loop379


        self.match(self.input, 85, self.FOLLOW_85_in_synpred891171)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:47: ( ( LT )* destructuringDeclaration )?
        alt381 = 2
        LA381_0 = self.input.LA(1)

        if (LA381_0 == LT or LA381_0 == Identifier or (87 <= LA381_0 <= 89) or (93 <= LA381_0 <= 94) or LA381_0 == 101 or LA381_0 == 110 or (153 <= LA381_0 <= 154)) :
            alt381 = 1
        if alt381 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:48: ( LT )* destructuringDeclaration
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:213:48: ( LT )*
            while True: #loop380
                alt380 = 2
                LA380_0 = self.input.LA(1)

                if (LA380_0 == LT) :
                    alt380 = 1


                if alt380 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred891174)
                    if self.failed:
                        return 


                else:
                    break #loop380


            self.following.append(self.FOLLOW_destructuringDeclaration_in_synpred891177)
            self.destructuringDeclaration()
            self.following.pop()
            if self.failed:
                return 





    # $ANTLR end synpred89



    # $ANTLR start synpred96
    def synpred96_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred961245)
        if self.failed:
            return 


    # $ANTLR end synpred96



    # $ANTLR start synpred101
    def synpred101_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:25: ( ( LT )* ',' ( ( LT )* identifier )? )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:25: ( LT )* ',' ( ( LT )* identifier )?
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:25: ( LT )*
        while True: #loop387
            alt387 = 2
            LA387_0 = self.input.LA(1)

            if (LA387_0 == LT) :
                alt387 = 1


            if alt387 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred1011252)
                if self.failed:
                    return 


            else:
                break #loop387


        self.match(self.input, 85, self.FOLLOW_85_in_synpred1011255)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:33: ( ( LT )* identifier )?
        alt389 = 2
        LA389_0 = self.input.LA(1)

        if (LA389_0 == LT or LA389_0 == Identifier or (87 <= LA389_0 <= 89) or LA389_0 == 93 or LA389_0 == 101 or LA389_0 == 110 or (153 <= LA389_0 <= 154)) :
            alt389 = 1
        if alt389 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:34: ( LT )* identifier
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:220:34: ( LT )*
            while True: #loop388
                alt388 = 2
                LA388_0 = self.input.LA(1)

                if (LA388_0 == LT) :
                    alt388 = 1


                if alt388 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred1011258)
                    if self.failed:
                        return 


                else:
                    break #loop388


            self.following.append(self.FOLLOW_identifier_in_synpred1011261)
            self.identifier()
            self.following.pop()
            if self.failed:
                return 





    # $ANTLR end synpred101



    # $ANTLR start synpred107
    def synpred107_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:225:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:225:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1071318)
        if self.failed:
            return 


    # $ANTLR end synpred107



    # $ANTLR start synpred108
    def synpred108_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:230:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:230:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1081341)
        if self.failed:
            return 


    # $ANTLR end synpred108



    # $ANTLR start synpred111
    def synpred111_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:17: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:17: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1111403)
        if self.failed:
            return 


    # $ANTLR end synpred111



    # $ANTLR start synpred113
    def synpred113_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:40: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:40: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1131413)
        if self.failed:
            return 


    # $ANTLR end synpred113



    # $ANTLR start synpred115
    def synpred115_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:66: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:66: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1151424)
        if self.failed:
            return 


    # $ANTLR end synpred115



    # $ANTLR start synpred116
    def synpred116_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:55: ( ( LT )* 'else' ( LT )* statement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:55: ( LT )* 'else' ( LT )* statement
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:55: ( LT )*
        while True: #loop392
            alt392 = 2
            LA392_0 = self.input.LA(1)

            if (LA392_0 == LT) :
                alt392 = 1


            if alt392 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred1161419)
                if self.failed:
                    return 


            else:
                break #loop392


        self.match(self.input, 97, self.FOLLOW_97_in_synpred1161422)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:243:66: ( LT )*
        while True: #loop393
            alt393 = 2
            LA393_0 = self.input.LA(1)

            if (LA393_0 == LT) :
                LA393_2 = self.input.LA(2)

                if (self.synpred115()) :
                    alt393 = 1




            if alt393 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred1161424)
                if self.failed:
                    return 


            else:
                break #loop393


        self.following.append(self.FOLLOW_statement_in_synpred1161427)
        self.statement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred116



    # $ANTLR start synpred119
    def synpred119_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:250:4: ( forStatement )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:250:4: forStatement
        self.following.append(self.FOLLOW_forStatement_in_synpred1191472)
        self.forStatement()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred119



    # $ANTLR start synpred120
    def synpred120_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:9: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:255:9: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1201491)
        if self.failed:
            return 


    # $ANTLR end synpred120



    # $ANTLR start synpred125
    def synpred125_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:20: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:20: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1251563)
        if self.failed:
            return 


    # $ANTLR end synpred125



    # $ANTLR start synpred127
    def synpred127_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:43: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:260:43: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1271573)
        if self.failed:
            return 


    # $ANTLR end synpred127



    # $ANTLR start synpred129
    def synpred129_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:19: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:19: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1291614)
        if self.failed:
            return 


    # $ANTLR end synpred129



    # $ANTLR start synpred132
    def synpred132_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:62: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:62: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1321627)
        if self.failed:
            return 


    # $ANTLR end synpred132



    # $ANTLR start synpred135
    def synpred135_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:93: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:93: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1351642)
        if self.failed:
            return 


    # $ANTLR end synpred135



    # $ANTLR start synpred138
    def synpred138_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:125: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:265:125: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1381656)
        if self.failed:
            return 


    # $ANTLR end synpred138



    # $ANTLR start synpred139
    def synpred139_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:4: ( expressionNoIn )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:270:4: expressionNoIn
        self.following.append(self.FOLLOW_expressionNoIn_in_synpred1391717)
        self.expressionNoIn()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred139



    # $ANTLR start synpred142
    def synpred142_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:10: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:10: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1421762)
        if self.failed:
            return 


    # $ANTLR end synpred142



    # $ANTLR start synpred145
    def synpred145_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:30: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:30: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1451773)
        if self.failed:
            return 


    # $ANTLR end synpred145



    # $ANTLR start synpred147
    def synpred147_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:73: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:73: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1471783)
        if self.failed:
            return 


    # $ANTLR end synpred147



    # $ANTLR start synpred149
    def synpred149_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:96: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:276:96: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1491793)
        if self.failed:
            return 


    # $ANTLR end synpred149



    # $ANTLR start synpred150
    def synpred150_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:281:4: ( leftHandSideExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:281:4: leftHandSideExpression
        self.following.append(self.FOLLOW_leftHandSideExpression_in_synpred1501828)
        self.leftHandSideExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred150



    # $ANTLR start synpred157
    def synpred157_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:13: ( expression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:295:13: expression
        self.following.append(self.FOLLOW_expression_in_synpred1571918)
        self.expression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred157



    # $ANTLR start synpred160
    def synpred160_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:19: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:19: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1601957)
        if self.failed:
            return 


    # $ANTLR end synpred160



    # $ANTLR start synpred162
    def synpred162_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:42: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:300:42: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1621967)
        if self.failed:
            return 


    # $ANTLR end synpred162



    # $ANTLR start synpred166
    def synpred166_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:58: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:305:58: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1662012)
        if self.failed:
            return 


    # $ANTLR end synpred166



    # $ANTLR start synpred168
    def synpred168_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:24: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:310:24: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1682056)
        if self.failed:
            return 


    # $ANTLR end synpred168



    # $ANTLR start synpred170
    def synpred170_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:21: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:315:21: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1702079)
        if self.failed:
            return 


    # $ANTLR end synpred170



    # $ANTLR start synpred180
    def synpred180_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:11: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:11: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1802185)
        if self.failed:
            return 


    # $ANTLR end synpred180



    # $ANTLR start synpred182
    def synpred182_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:34: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:34: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1822195)
        if self.failed:
            return 


    # $ANTLR end synpred182



    # $ANTLR start synpred183
    def synpred183_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:38: ( statementList )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:327:38: statementList
        self.following.append(self.FOLLOW_statementList_in_synpred1832198)
        self.statementList()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred183



    # $ANTLR start synpred185
    def synpred185_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:22: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:333:22: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1852236)
        if self.failed:
            return 


    # $ANTLR end synpred185



    # $ANTLR start synpred193
    def synpred193_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:346:12: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:346:12: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1932324)
        if self.failed:
            return 


    # $ANTLR end synpred193



    # $ANTLR start synpred198
    def synpred198_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:45: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:350:45: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred1982366)
        if self.failed:
            return 


    # $ANTLR end synpred198



    # $ANTLR start synpred204
    def synpred204_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:36: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:360:36: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2042440)
        if self.failed:
            return 


    # $ANTLR end synpred204



    # $ANTLR start synpred207
    def synpred207_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:40: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:364:40: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2072468)
        if self.failed:
            return 


    # $ANTLR end synpred207



    # $ANTLR start synpred210
    def synpred210_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:50: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:50: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2102493)
        if self.failed:
            return 


    # $ANTLR end synpred210



    # $ANTLR start synpred211
    def synpred211_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:4: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpression
        self.following.append(self.FOLLOW_leftHandSideExpression_in_synpred2112486)
        self.leftHandSideExpression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:27: ( LT )*
        while True: #loop409
            alt409 = 2
            LA409_0 = self.input.LA(1)

            if (LA409_0 == LT) :
                alt409 = 1


            if alt409 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2112488)
                if self.failed:
                    return 


            else:
                break #loop409


        self.following.append(self.FOLLOW_assignmentOperator_in_synpred2112491)
        self.assignmentOperator()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:368:50: ( LT )*
        while True: #loop410
            alt410 = 2
            LA410_0 = self.input.LA(1)

            if (LA410_0 == LT) :
                LA410_2 = self.input.LA(2)

                if (self.synpred210()) :
                    alt410 = 1




            if alt410 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2112493)
                if self.failed:
                    return 


            else:
                break #loop410


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred2112496)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred211



    # $ANTLR start synpred215
    def synpred215_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:58: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:58: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2152534)
        if self.failed:
            return 


    # $ANTLR end synpred215



    # $ANTLR start synpred216
    def synpred216_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:4: ( 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:4: 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpression
        self.match(self.input, 93, self.FOLLOW_93_in_synpred2162517)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:14: ( LT )*
        while True: #loop411
            alt411 = 2
            LA411_0 = self.input.LA(1)

            if (LA411_0 == LT) :
                alt411 = 1


            if alt411 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2162519)
                if self.failed:
                    return 


            else:
                break #loop411


        self.match(self.input, 84, self.FOLLOW_84_in_synpred2162522)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:22: ( LT )*
        while True: #loop412
            alt412 = 2
            LA412_0 = self.input.LA(1)

            if (LA412_0 == LT) :
                alt412 = 1


            if alt412 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2162524)
                if self.failed:
                    return 


            else:
                break #loop412


        self.following.append(self.FOLLOW_variableDeclarationList_in_synpred2162527)
        self.variableDeclarationList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:50: ( LT )*
        while True: #loop413
            alt413 = 2
            LA413_0 = self.input.LA(1)

            if (LA413_0 == LT) :
                alt413 = 1


            if alt413 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2162529)
                if self.failed:
                    return 


            else:
                break #loop413


        self.match(self.input, 86, self.FOLLOW_86_in_synpred2162532)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:370:58: ( LT )*
        while True: #loop414
            alt414 = 2
            LA414_0 = self.input.LA(1)

            if (LA414_0 == LT) :
                LA414_2 = self.input.LA(2)

                if (self.synpred215()) :
                    alt414 = 1




            if alt414 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2162534)
                if self.failed:
                    return 


            else:
                break #loop414


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred2162537)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred216



    # $ANTLR start synpred221
    def synpred221_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:68: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:68: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2212588)
        if self.failed:
            return 


    # $ANTLR end synpred221



    # $ANTLR start synpred224
    def synpred224_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:111: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:111: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2242608)
        if self.failed:
            return 


    # $ANTLR end synpred224



    # $ANTLR start synpred227
    def synpred227_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:4: ( conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' )? )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:4: conditionalExpression ( LT )* 'for' ( LT )* '(' ( LT )* identifier ( LT )* 'in' ( LT )* expression ( LT )* ')' ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' )?
        self.following.append(self.FOLLOW_conditionalExpression_in_synpred2272566)
        self.conditionalExpression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:26: ( LT )*
        while True: #loop418
            alt418 = 2
            LA418_0 = self.input.LA(1)

            if (LA418_0 == LT) :
                alt418 = 1


            if alt418 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272568)
                if self.failed:
                    return 


            else:
                break #loop418


        self.match(self.input, 100, self.FOLLOW_100_in_synpred2272571)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:36: ( LT )*
        while True: #loop419
            alt419 = 2
            LA419_0 = self.input.LA(1)

            if (LA419_0 == LT) :
                alt419 = 1


            if alt419 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272573)
                if self.failed:
                    return 


            else:
                break #loop419


        self.match(self.input, 84, self.FOLLOW_84_in_synpred2272576)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:44: ( LT )*
        while True: #loop420
            alt420 = 2
            LA420_0 = self.input.LA(1)

            if (LA420_0 == LT) :
                alt420 = 1


            if alt420 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272578)
                if self.failed:
                    return 


            else:
                break #loop420


        self.following.append(self.FOLLOW_identifier_in_synpred2272581)
        self.identifier()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:59: ( LT )*
        while True: #loop421
            alt421 = 2
            LA421_0 = self.input.LA(1)

            if (LA421_0 == LT) :
                alt421 = 1


            if alt421 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272583)
                if self.failed:
                    return 


            else:
                break #loop421


        self.match(self.input, 102, self.FOLLOW_102_in_synpred2272586)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:68: ( LT )*
        while True: #loop422
            alt422 = 2
            LA422_0 = self.input.LA(1)

            if (LA422_0 == LT) :
                LA422_2 = self.input.LA(2)

                if (self.synpred221()) :
                    alt422 = 1




            if alt422 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272588)
                if self.failed:
                    return 


            else:
                break #loop422


        self.following.append(self.FOLLOW_expression_in_synpred2272593)
        self.expression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:89: ( LT )*
        while True: #loop423
            alt423 = 2
            LA423_0 = self.input.LA(1)

            if (LA423_0 == LT) :
                alt423 = 1


            if alt423 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272595)
                if self.failed:
                    return 


            else:
                break #loop423


        self.match(self.input, 86, self.FOLLOW_86_in_synpred2272598)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:97: ( 'if' ( LT )* '(' ( LT )* expression ( LT )* ')' )?
        alt427 = 2
        LA427_0 = self.input.LA(1)

        if (LA427_0 == 96) :
            alt427 = 1
        if alt427 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:98: 'if' ( LT )* '(' ( LT )* expression ( LT )* ')'
            self.match(self.input, 96, self.FOLLOW_96_in_synpred2272601)
            if self.failed:
                return 
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:103: ( LT )*
            while True: #loop424
                alt424 = 2
                LA424_0 = self.input.LA(1)

                if (LA424_0 == LT) :
                    alt424 = 1


                if alt424 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272603)
                    if self.failed:
                        return 


                else:
                    break #loop424


            self.match(self.input, 84, self.FOLLOW_84_in_synpred2272606)
            if self.failed:
                return 
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:111: ( LT )*
            while True: #loop425
                alt425 = 2
                LA425_0 = self.input.LA(1)

                if (LA425_0 == LT) :
                    LA425_2 = self.input.LA(2)

                    if (self.synpred224()) :
                        alt425 = 1




                if alt425 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272608)
                    if self.failed:
                        return 


                else:
                    break #loop425


            self.following.append(self.FOLLOW_expression_in_synpred2272613)
            self.expression()
            self.following.pop()
            if self.failed:
                return 
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:373:134: ( LT )*
            while True: #loop426
                alt426 = 2
                LA426_0 = self.input.LA(1)

                if (LA426_0 == LT) :
                    alt426 = 1


                if alt426 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred2272615)
                    if self.failed:
                        return 


                else:
                    break #loop426


            self.match(self.input, 86, self.FOLLOW_86_in_synpred2272618)
            if self.failed:
                return 





    # $ANTLR end synpred227



    # $ANTLR start synpred229
    def synpred229_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:50: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:50: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2292675)
        if self.failed:
            return 


    # $ANTLR end synpred229



    # $ANTLR start synpred230
    def synpred230_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:4: ( leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:4: leftHandSideExpression ( LT )* assignmentOperator ( LT )* assignmentExpressionNoIn
        self.following.append(self.FOLLOW_leftHandSideExpression_in_synpred2302668)
        self.leftHandSideExpression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:27: ( LT )*
        while True: #loop428
            alt428 = 2
            LA428_0 = self.input.LA(1)

            if (LA428_0 == LT) :
                alt428 = 1


            if alt428 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2302670)
                if self.failed:
                    return 


            else:
                break #loop428


        self.following.append(self.FOLLOW_assignmentOperator_in_synpred2302673)
        self.assignmentOperator()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:379:50: ( LT )*
        while True: #loop429
            alt429 = 2
            LA429_0 = self.input.LA(1)

            if (LA429_0 == LT) :
                LA429_2 = self.input.LA(2)

                if (self.synpred229()) :
                    alt429 = 1




            if alt429 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2302675)
                if self.failed:
                    return 


            else:
                break #loop429


        self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_synpred2302678)
        self.assignmentExpressionNoIn()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred230



    # $ANTLR start synpred234
    def synpred234_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:58: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:58: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2342716)
        if self.failed:
            return 


    # $ANTLR end synpred234



    # $ANTLR start synpred235
    def synpred235_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:4: ( 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:4: 'let' ( LT )* '(' ( LT )* variableDeclarationList ( LT )* ')' ( LT )* assignmentExpressionNoIn
        self.match(self.input, 93, self.FOLLOW_93_in_synpred2352699)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:14: ( LT )*
        while True: #loop430
            alt430 = 2
            LA430_0 = self.input.LA(1)

            if (LA430_0 == LT) :
                alt430 = 1


            if alt430 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2352701)
                if self.failed:
                    return 


            else:
                break #loop430


        self.match(self.input, 84, self.FOLLOW_84_in_synpred2352704)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:22: ( LT )*
        while True: #loop431
            alt431 = 2
            LA431_0 = self.input.LA(1)

            if (LA431_0 == LT) :
                alt431 = 1


            if alt431 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2352706)
                if self.failed:
                    return 


            else:
                break #loop431


        self.following.append(self.FOLLOW_variableDeclarationList_in_synpred2352709)
        self.variableDeclarationList()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:50: ( LT )*
        while True: #loop432
            alt432 = 2
            LA432_0 = self.input.LA(1)

            if (LA432_0 == LT) :
                alt432 = 1


            if alt432 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2352711)
                if self.failed:
                    return 


            else:
                break #loop432


        self.match(self.input, 86, self.FOLLOW_86_in_synpred2352714)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:381:58: ( LT )*
        while True: #loop433
            alt433 = 2
            LA433_0 = self.input.LA(1)

            if (LA433_0 == LT) :
                LA433_2 = self.input.LA(2)

                if (self.synpred234()) :
                    alt433 = 1




            if alt433 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2352716)
                if self.failed:
                    return 


            else:
                break #loop433


        self.following.append(self.FOLLOW_assignmentExpressionNoIn_in_synpred2352719)
        self.assignmentExpressionNoIn()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred235



    # $ANTLR start synpred236
    def synpred236_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:387:4: ( callExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:387:4: callExpression
        self.following.append(self.FOLLOW_callExpression_in_synpred2362758)
        self.callExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred236



    # $ANTLR start synpred237
    def synpred237_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:392:4: ( memberExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:392:4: memberExpression
        self.following.append(self.FOLLOW_memberExpression_in_synpred2372775)
        self.memberExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred237



    # $ANTLR start synpred238
    def synpred238_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:393:10: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:393:10: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2382782)
        if self.failed:
            return 


    # $ANTLR end synpred238



    # $ANTLR start synpred240
    def synpred240_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:23: ( ( LT )* memberExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:23: ( LT )* memberExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:398:23: ( LT )*
        while True: #loop434
            alt434 = 2
            LA434_0 = self.input.LA(1)

            if (LA434_0 == LT) :
                alt434 = 1


            if alt434 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2402810)
                if self.failed:
                    return 


            else:
                break #loop434


        self.following.append(self.FOLLOW_memberExpressionSuffix_in_synpred2402813)
        self.memberExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred240



    # $ANTLR start synpred243
    def synpred243_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:24: ( ( LT )* memberExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:24: ( LT )* memberExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:400:26: ( LT )*
        while True: #loop437
            alt437 = 2
            LA437_0 = self.input.LA(1)

            if (LA437_0 == LT) :
                alt437 = 1


            if alt437 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2432836)
                if self.failed:
                    return 


            else:
                break #loop437


        self.following.append(self.FOLLOW_memberExpressionSuffix_in_synpred2432840)
        self.memberExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred243



    # $ANTLR start synpred245
    def synpred245_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:10: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:10: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2452849)
        if self.failed:
            return 


    # $ANTLR end synpred245



    # $ANTLR start synpred248
    def synpred248_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:46: ( ( LT )* memberExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:46: ( LT )* memberExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:401:46: ( LT )*
        while True: #loop440
            alt440 = 2
            LA440_0 = self.input.LA(1)

            if (LA440_0 == LT) :
                alt440 = 1


            if alt440 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2482860)
                if self.failed:
                    return 


            else:
                break #loop440


        self.following.append(self.FOLLOW_memberExpressionSuffix_in_synpred2482863)
        self.memberExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred248



    # $ANTLR start synpred252
    def synpred252_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:21: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:21: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2522933)
        if self.failed:
            return 


    # $ANTLR end synpred252



    # $ANTLR start synpred256
    def synpred256_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:45: ( ( LT )* callExpressionSuffix )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:45: ( LT )* callExpressionSuffix
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:416:45: ( LT )*
        while True: #loop441
            alt441 = 2
            LA441_0 = self.input.LA(1)

            if (LA441_0 == LT) :
                alt441 = 1


            if alt441 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2562945)
                if self.failed:
                    return 


            else:
                break #loop441


        self.following.append(self.FOLLOW_callExpressionSuffix_in_synpred2562948)
        self.callExpressionSuffix()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred256



    # $ANTLR start synpred261
    def synpred261_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:9: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:9: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2613016)
        if self.failed:
            return 


    # $ANTLR end synpred261



    # $ANTLR start synpred262
    def synpred262_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:34: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:34: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2623021)
        if self.failed:
            return 


    # $ANTLR end synpred262



    # $ANTLR start synpred263
    def synpred263_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:43: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:43: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2633027)
        if self.failed:
            return 


    # $ANTLR end synpred263



    # $ANTLR start synpred264
    def synpred264_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:68: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:432:68: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2643032)
        if self.failed:
            return 


    # $ANTLR end synpred264



    # $ANTLR start synpred268
    def synpred268_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:437:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2683067)
        if self.failed:
            return 


    # $ANTLR end synpred268



    # $ANTLR start synpred272
    def synpred272_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:12: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:12: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2723156)
        if self.failed:
            return 


    # $ANTLR end synpred272



    # $ANTLR start synpred273
    def synpred273_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:16: ( e4xIdentifier )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:452:16: e4xIdentifier
        self.following.append(self.FOLLOW_e4xIdentifier_in_synpred2733159)
        self.e4xIdentifier()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred273



    # $ANTLR start synpred287
    def synpred287_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:34: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:34: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2873263)
        if self.failed:
            return 


    # $ANTLR end synpred287



    # $ANTLR start synpred289
    def synpred289_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:69: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:69: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2893275)
        if self.failed:
            return 


    # $ANTLR end synpred289



    # $ANTLR start synpred290
    def synpred290_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:25: ( ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:25: ( LT )* '?' ( LT )* assignmentExpression ( LT )* ':' ( LT )* assignmentExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:27: ( LT )*
        while True: #loop449
            alt449 = 2
            LA449_0 = self.input.LA(1)

            if (LA449_0 == LT) :
                alt449 = 1


            if alt449 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2903257)
                if self.failed:
                    return 


            else:
                break #loop449


        self.match(self.input, 127, self.FOLLOW_127_in_synpred2903261)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:36: ( LT )*
        while True: #loop450
            alt450 = 2
            LA450_0 = self.input.LA(1)

            if (LA450_0 == LT) :
                LA450_2 = self.input.LA(2)

                if (self.synpred287()) :
                    alt450 = 1




            if alt450 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2903263)
                if self.failed:
                    return 


            else:
                break #loop450


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred2903267)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:62: ( LT )*
        while True: #loop451
            alt451 = 2
            LA451_0 = self.input.LA(1)

            if (LA451_0 == LT) :
                alt451 = 1


            if alt451 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2903269)
                if self.failed:
                    return 


            else:
                break #loop451


        self.match(self.input, 78, self.FOLLOW_78_in_synpred2903273)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:466:71: ( LT )*
        while True: #loop452
            alt452 = 2
            LA452_0 = self.input.LA(1)

            if (LA452_0 == LT) :
                LA452_2 = self.input.LA(2)

                if (self.synpred289()) :
                    alt452 = 1




            if alt452 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2903275)
                if self.failed:
                    return 


            else:
                break #loop452


        self.following.append(self.FOLLOW_assignmentExpression_in_synpred2903279)
        self.assignmentExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred290



    # $ANTLR start synpred292
    def synpred292_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:38: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:38: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2923301)
        if self.failed:
            return 


    # $ANTLR end synpred292



    # $ANTLR start synpred294
    def synpred294_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:77: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:470:77: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2943313)
        if self.failed:
            return 


    # $ANTLR end synpred294



    # $ANTLR start synpred297
    def synpred297_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:36: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:36: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred2973339)
        if self.failed:
            return 


    # $ANTLR end synpred297



    # $ANTLR start synpred298
    def synpred298_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:26: ( ( LT )* '||' ( LT )* logicalANDExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:26: ( LT )* '||' ( LT )* logicalANDExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:28: ( LT )*
        while True: #loop457
            alt457 = 2
            LA457_0 = self.input.LA(1)

            if (LA457_0 == LT) :
                alt457 = 1


            if alt457 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2983333)
                if self.failed:
                    return 


            else:
                break #loop457


        self.match(self.input, 128, self.FOLLOW_128_in_synpred2983337)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:474:38: ( LT )*
        while True: #loop458
            alt458 = 2
            LA458_0 = self.input.LA(1)

            if (LA458_0 == LT) :
                LA458_2 = self.input.LA(2)

                if (self.synpred297()) :
                    alt458 = 1




            if alt458 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred2983339)
                if self.failed:
                    return 


            else:
                break #loop458


        self.following.append(self.FOLLOW_logicalANDExpression_in_synpred2983343)
        self.logicalANDExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred298



    # $ANTLR start synpred300
    def synpred300_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:40: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:478:40: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3003366)
        if self.failed:
            return 


    # $ANTLR end synpred300



    # $ANTLR start synpred303
    def synpred303_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:35: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:35: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3033393)
        if self.failed:
            return 


    # $ANTLR end synpred303



    # $ANTLR start synpred304
    def synpred304_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:25: ( ( LT )* '&&' ( LT )* bitwiseORExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:25: ( LT )* '&&' ( LT )* bitwiseORExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:27: ( LT )*
        while True: #loop461
            alt461 = 2
            LA461_0 = self.input.LA(1)

            if (LA461_0 == LT) :
                alt461 = 1


            if alt461 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3043387)
                if self.failed:
                    return 


            else:
                break #loop461


        self.match(self.input, 129, self.FOLLOW_129_in_synpred3043391)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:482:37: ( LT )*
        while True: #loop462
            alt462 = 2
            LA462_0 = self.input.LA(1)

            if (LA462_0 == LT) :
                LA462_2 = self.input.LA(2)

                if (self.synpred303()) :
                    alt462 = 1




            if alt462 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3043393)
                if self.failed:
                    return 


            else:
                break #loop462


        self.following.append(self.FOLLOW_bitwiseORExpression_in_synpred3043397)
        self.bitwiseORExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred304



    # $ANTLR start synpred306
    def synpred306_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:39: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:486:39: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3063420)
        if self.failed:
            return 


    # $ANTLR end synpred306



    # $ANTLR start synpred309
    def synpred309_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:35: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:35: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3093447)
        if self.failed:
            return 


    # $ANTLR end synpred309



    # $ANTLR start synpred310
    def synpred310_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:26: ( ( LT )* '|' ( LT )* bitwiseXORExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:26: ( LT )* '|' ( LT )* bitwiseXORExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:28: ( LT )*
        while True: #loop465
            alt465 = 2
            LA465_0 = self.input.LA(1)

            if (LA465_0 == LT) :
                alt465 = 1


            if alt465 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3103441)
                if self.failed:
                    return 


            else:
                break #loop465


        self.match(self.input, 130, self.FOLLOW_130_in_synpred3103445)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:490:37: ( LT )*
        while True: #loop466
            alt466 = 2
            LA466_0 = self.input.LA(1)

            if (LA466_0 == LT) :
                LA466_2 = self.input.LA(2)

                if (self.synpred309()) :
                    alt466 = 1




            if alt466 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3103447)
                if self.failed:
                    return 


            else:
                break #loop466


        self.following.append(self.FOLLOW_bitwiseXORExpression_in_synpred3103451)
        self.bitwiseXORExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred310



    # $ANTLR start synpred312
    def synpred312_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:39: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:494:39: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3123474)
        if self.failed:
            return 


    # $ANTLR end synpred312



    # $ANTLR start synpred315
    def synpred315_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:35: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:35: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3153501)
        if self.failed:
            return 


    # $ANTLR end synpred315



    # $ANTLR start synpred316
    def synpred316_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:26: ( ( LT )* '^' ( LT )* bitwiseANDExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:26: ( LT )* '^' ( LT )* bitwiseANDExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:28: ( LT )*
        while True: #loop469
            alt469 = 2
            LA469_0 = self.input.LA(1)

            if (LA469_0 == LT) :
                alt469 = 1


            if alt469 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3163495)
                if self.failed:
                    return 


            else:
                break #loop469


        self.match(self.input, 131, self.FOLLOW_131_in_synpred3163499)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:498:37: ( LT )*
        while True: #loop470
            alt470 = 2
            LA470_0 = self.input.LA(1)

            if (LA470_0 == LT) :
                LA470_2 = self.input.LA(2)

                if (self.synpred315()) :
                    alt470 = 1




            if alt470 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3163501)
                if self.failed:
                    return 


            else:
                break #loop470


        self.following.append(self.FOLLOW_bitwiseANDExpression_in_synpred3163505)
        self.bitwiseANDExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred316



    # $ANTLR start synpred318
    def synpred318_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:39: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:502:39: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3183528)
        if self.failed:
            return 


    # $ANTLR end synpred318



    # $ANTLR start synpred321
    def synpred321_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:33: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:33: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3213555)
        if self.failed:
            return 


    # $ANTLR end synpred321



    # $ANTLR start synpred322
    def synpred322_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:24: ( ( LT )* '&' ( LT )* equalityExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:24: ( LT )* '&' ( LT )* equalityExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:26: ( LT )*
        while True: #loop473
            alt473 = 2
            LA473_0 = self.input.LA(1)

            if (LA473_0 == LT) :
                alt473 = 1


            if alt473 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3223549)
                if self.failed:
                    return 


            else:
                break #loop473


        self.match(self.input, 132, self.FOLLOW_132_in_synpred3223553)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:506:35: ( LT )*
        while True: #loop474
            alt474 = 2
            LA474_0 = self.input.LA(1)

            if (LA474_0 == LT) :
                LA474_2 = self.input.LA(2)

                if (self.synpred321()) :
                    alt474 = 1




            if alt474 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3223555)
                if self.failed:
                    return 


            else:
                break #loop474


        self.following.append(self.FOLLOW_equalityExpression_in_synpred3223559)
        self.equalityExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred322



    # $ANTLR start synpred324
    def synpred324_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:37: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:510:37: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3243582)
        if self.failed:
            return 


    # $ANTLR end synpred324



    # $ANTLR start synpred330
    def synpred330_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:61: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:61: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3303623)
        if self.failed:
            return 


    # $ANTLR end synpred330



    # $ANTLR start synpred331
    def synpred331_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:26: ( ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:26: ( LT )* ( '==' | '!=' | '===' | '!==' ) ( LT )* relationalExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:28: ( LT )*
        while True: #loop477
            alt477 = 2
            LA477_0 = self.input.LA(1)

            if (LA477_0 == LT) :
                alt477 = 1


            if alt477 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3313603)
                if self.failed:
                    return 


            else:
                break #loop477


        if (133 <= self.input.LA(1) <= 136):
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3313607
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:514:63: ( LT )*
        while True: #loop478
            alt478 = 2
            LA478_0 = self.input.LA(1)

            if (LA478_0 == LT) :
                LA478_2 = self.input.LA(2)

                if (self.synpred330()) :
                    alt478 = 1




            if alt478 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3313623)
                if self.failed:
                    return 


            else:
                break #loop478


        self.following.append(self.FOLLOW_relationalExpression_in_synpred3313627)
        self.relationalExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred331



    # $ANTLR start synpred336
    def synpred336_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:65: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:518:65: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3363663)
        if self.failed:
            return 


    # $ANTLR end synpred336



    # $ANTLR start synpred344
    def synpred344_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:74: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:74: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3443712)
        if self.failed:
            return 


    # $ANTLR end synpred344



    # $ANTLR start synpred345
    def synpred345_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:21: ( ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:21: ( LT )* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT )* shiftExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:23: ( LT )*
        while True: #loop481
            alt481 = 2
            LA481_0 = self.input.LA(1)

            if (LA481_0 == LT) :
                alt481 = 1


            if alt481 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3453684)
                if self.failed:
                    return 


            else:
                break #loop481


        if (75 <= self.input.LA(1) <= 76) or self.input.LA(1) == 102 or (137 <= self.input.LA(1) <= 139):
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3453688
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:522:76: ( LT )*
        while True: #loop482
            alt482 = 2
            LA482_0 = self.input.LA(1)

            if (LA482_0 == LT) :
                LA482_2 = self.input.LA(2)

                if (self.synpred344()) :
                    alt482 = 1




            if alt482 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3453712)
                if self.failed:
                    return 


            else:
                break #loop482


        self.following.append(self.FOLLOW_shiftExpression_in_synpred3453716)
        self.shiftExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred345



    # $ANTLR start synpred351
    def synpred351_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:67: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:526:67: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3513756)
        if self.failed:
            return 


    # $ANTLR end synpred351



    # $ANTLR start synpred356
    def synpred356_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:51: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:51: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3563792)
        if self.failed:
            return 


    # $ANTLR end synpred356



    # $ANTLR start synpred357
    def synpred357_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:24: ( ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:24: ( LT )* ( '<<' | '>>' | '>>>' ) ( LT )* additiveExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:26: ( LT )*
        while True: #loop485
            alt485 = 2
            LA485_0 = self.input.LA(1)

            if (LA485_0 == LT) :
                alt485 = 1


            if alt485 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3573776)
                if self.failed:
                    return 


            else:
                break #loop485


        if (140 <= self.input.LA(1) <= 142):
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3573780
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:530:53: ( LT )*
        while True: #loop486
            alt486 = 2
            LA486_0 = self.input.LA(1)

            if (LA486_0 == LT) :
                LA486_2 = self.input.LA(2)

                if (self.synpred356()) :
                    alt486 = 1




            if alt486 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3573792)
                if self.failed:
                    return 


            else:
                break #loop486


        self.following.append(self.FOLLOW_additiveExpression_in_synpred3573796)
        self.additiveExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred357



    # $ANTLR start synpred360
    def synpred360_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:47: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:47: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3603824)
        if self.failed:
            return 


    # $ANTLR end synpred360



    # $ANTLR start synpred361
    def synpred361_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:30: ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:30: ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:32: ( LT )*
        while True: #loop487
            alt487 = 2
            LA487_0 = self.input.LA(1)

            if (LA487_0 == LT) :
                alt487 = 1


            if alt487 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3613812)
                if self.failed:
                    return 


            else:
                break #loop487


        if self.input.LA(1) == 79 or self.input.LA(1) == 143:
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3613816
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:534:49: ( LT )*
        while True: #loop488
            alt488 = 2
            LA488_0 = self.input.LA(1)

            if (LA488_0 == LT) :
                LA488_2 = self.input.LA(2)

                if (self.synpred360()) :
                    alt488 = 1




            if alt488 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3613824)
                if self.failed:
                    return 


            else:
                break #loop488


        self.following.append(self.FOLLOW_multiplicativeExpression_in_synpred3613828)
        self.multiplicativeExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred361



    # $ANTLR start synpred365
    def synpred365_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:44: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:44: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3653860)
        if self.failed:
            return 


    # $ANTLR end synpred365



    # $ANTLR start synpred366
    def synpred366_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:21: ( ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:21: ( LT )* ( '*' | '/' | '%' ) ( LT )* unaryExpression
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:23: ( LT )*
        while True: #loop489
            alt489 = 2
            LA489_0 = self.input.LA(1)

            if (LA489_0 == LT) :
                alt489 = 1


            if alt489 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3663844)
                if self.failed:
                    return 


            else:
                break #loop489


        if self.input.LA(1) == 77 or self.input.LA(1) == 115 or self.input.LA(1) == 144:
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3663848
                )
            raise mse


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:538:46: ( LT )*
        while True: #loop490
            alt490 = 2
            LA490_0 = self.input.LA(1)

            if (LA490_0 == LT) :
                LA490_2 = self.input.LA(2)

                if (self.synpred365()) :
                    alt490 = 1




            if alt490 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3663860)
                if self.failed:
                    return 


            else:
                break #loop490


        self.following.append(self.FOLLOW_unaryExpression_in_synpred3663864)
        self.unaryExpression()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred366



    # $ANTLR start synpred381
    def synpred381_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:552:4: ( ( LT )* ( '<' | XMLComment ) )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:552:5: ( LT )* ( '<' | XMLComment )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:552:5: ( LT )*
        while True: #loop491
            alt491 = 2
            LA491_0 = self.input.LA(1)

            if (LA491_0 == LT) :
                alt491 = 1


            if alt491 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3813956)
                if self.failed:
                    return 


            else:
                break #loop491


        if self.input.LA(1) == XMLComment or self.input.LA(1) == 75:
            self.input.consume();
            self.errorRecovery = False
            self.failed = False

        else:
            if self.backtracking > 0:
                self.failed = True
                return 

            mse = MismatchedSetException(None, self.input)
            self.recoverFromMismatchedSet(
                self.input, mse, self.FOLLOW_set_in_synpred3813959
                )
            raise mse




    # $ANTLR end synpred381



    # $ANTLR start synpred385
    def synpred385_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:557:4: ( objectLiteral )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:557:4: objectLiteral
        self.following.append(self.FOLLOW_objectLiteral_in_synpred3853997)
        self.objectLiteral()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred385



    # $ANTLR start synpred386
    def synpred386_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:558:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3864004)
        if self.failed:
            return 


    # $ANTLR end synpred386



    # $ANTLR start synpred388
    def synpred388_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3884029)
        if self.failed:
            return 


    # $ANTLR end synpred388



    # $ANTLR start synpred391
    def synpred391_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3914042)
        if self.failed:
            return 


    # $ANTLR end synpred391



    # $ANTLR start synpred393
    def synpred393_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:35: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:35: ( LT )* ',' ( ( LT )* assignmentExpression )?
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:35: ( LT )*
        while True: #loop493
            alt493 = 2
            LA493_0 = self.input.LA(1)

            if (LA493_0 == LT) :
                alt493 = 1


            if alt493 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3934036)
                if self.failed:
                    return 


            else:
                break #loop493


        self.match(self.input, 85, self.FOLLOW_85_in_synpred3934039)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:43: ( ( LT )* assignmentExpression )?
        alt495 = 2
        LA495_0 = self.input.LA(1)

        if ((LT <= LA495_0 <= RegularExpressionHacks) or LA495_0 == 75 or LA495_0 == 77 or LA495_0 == 79 or LA495_0 == 81 or (83 <= LA495_0 <= 84) or (87 <= LA495_0 <= 89) or (93 <= LA495_0 <= 94) or LA495_0 == 101 or LA495_0 == 110 or LA495_0 == 113 or LA495_0 == 143 or (145 <= LA495_0 <= 157)) :
            alt495 = 1
        if alt495 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: ( LT )* assignmentExpression
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: ( LT )*
            while True: #loop494
                alt494 = 2
                LA494_0 = self.input.LA(1)

                if (LA494_0 == LT) :
                    LA494_2 = self.input.LA(2)

                    if (self.synpred391()) :
                        alt494 = 1




                if alt494 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred3934042)
                    if self.failed:
                        return 


                else:
                    break #loop494


            self.following.append(self.FOLLOW_assignmentExpression_in_synpred3934045)
            self.assignmentExpression()
            self.following.pop()
            if self.failed:
                return 





    # $ANTLR end synpred393



    # $ANTLR start synpred397
    def synpred397_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:4: ( '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']' )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:4: '[' ( LT )* ( assignmentExpression )? ( ( LT )* ',' ( ( LT )* assignmentExpression )? )* ( LT )* ( ',' ( LT )* )? ']'
        self.match(self.input, 94, self.FOLLOW_94_in_synpred3974027)
        if self.failed:
            return 
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:8: ( LT )*
        while True: #loop497
            alt497 = 2
            LA497_0 = self.input.LA(1)

            if (LA497_0 == LT) :
                LA497_2 = self.input.LA(2)

                if (self.synpred388()) :
                    alt497 = 1




            if alt497 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3974029)
                if self.failed:
                    return 


            else:
                break #loop497


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:12: ( assignmentExpression )?
        alt498 = 2
        alt498 = self.dfa498.predict(self.input)
        if alt498 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: assignmentExpression
            self.following.append(self.FOLLOW_assignmentExpression_in_synpred3974032)
            self.assignmentExpression()
            self.following.pop()
            if self.failed:
                return 



        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:34: ( ( LT )* ',' ( ( LT )* assignmentExpression )? )*
        while True: #loop502
            alt502 = 2
            alt502 = self.dfa502.predict(self.input)
            if alt502 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:35: ( LT )* ',' ( ( LT )* assignmentExpression )?
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:35: ( LT )*
                while True: #loop499
                    alt499 = 2
                    LA499_0 = self.input.LA(1)

                    if (LA499_0 == LT) :
                        alt499 = 1


                    if alt499 == 1:
                        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3974036)
                        if self.failed:
                            return 


                    else:
                        break #loop499


                self.match(self.input, 85, self.FOLLOW_85_in_synpred3974039)
                if self.failed:
                    return 
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:43: ( ( LT )* assignmentExpression )?
                alt501 = 2
                alt501 = self.dfa501.predict(self.input)
                if alt501 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: ( LT )* assignmentExpression
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:44: ( LT )*
                    while True: #loop500
                        alt500 = 2
                        LA500_0 = self.input.LA(1)

                        if (LA500_0 == LT) :
                            LA500_2 = self.input.LA(2)

                            if (self.synpred391()) :
                                alt500 = 1




                        if alt500 == 1:
                            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                            self.match(self.input, LT, self.FOLLOW_LT_in_synpred3974042)
                            if self.failed:
                                return 


                        else:
                            break #loop500


                    self.following.append(self.FOLLOW_assignmentExpression_in_synpred3974045)
                    self.assignmentExpression()
                    self.following.pop()
                    if self.failed:
                        return 





            else:
                break #loop502


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:73: ( LT )*
        while True: #loop503
            alt503 = 2
            LA503_0 = self.input.LA(1)

            if (LA503_0 == LT) :
                alt503 = 1


            if alt503 == 1:
                # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                self.match(self.input, LT, self.FOLLOW_LT_in_synpred3974051)
                if self.failed:
                    return 


            else:
                break #loop503


        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:77: ( ',' ( LT )* )?
        alt505 = 2
        LA505_0 = self.input.LA(1)

        if (LA505_0 == 85) :
            alt505 = 1
        if alt505 == 1:
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:78: ',' ( LT )*
            self.match(self.input, 85, self.FOLLOW_85_in_synpred3974055)
            if self.failed:
                return 
            # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:563:82: ( LT )*
            while True: #loop504
                alt504 = 2
                LA504_0 = self.input.LA(1)

                if (LA504_0 == LT) :
                    alt504 = 1


                if alt504 == 1:
                    # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:0:0: LT
                    self.match(self.input, LT, self.FOLLOW_LT_in_synpred3974057)
                    if self.failed:
                        return 


                else:
                    break #loop504





        self.match(self.input, 95, self.FOLLOW_95_in_synpred3974062)
        if self.failed:
            return 


    # $ANTLR end synpred397



    # $ANTLR start synpred398
    def synpred398_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred3984080)
        if self.failed:
            return 


    # $ANTLR end synpred398



    # $ANTLR start synpred400
    def synpred400_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:42: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:42: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred4004092)
        if self.failed:
            return 


    # $ANTLR end synpred400



    # $ANTLR start synpred403
    def synpred403_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:62: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:62: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred4034103)
        if self.failed:
            return 


    # $ANTLR end synpred403



    # $ANTLR start synpred405
    def synpred405_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:110: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:565:110: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred4054115)
        if self.failed:
            return 


    # $ANTLR end synpred405



    # $ANTLR start synpred408
    def synpred408_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:8: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:571:8: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred4084168)
        if self.failed:
            return 


    # $ANTLR end synpred408



    # $ANTLR start synpred417
    def synpred417_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:25: ( LT )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:576:25: LT
        self.match(self.input, LT, self.FOLLOW_LT_in_synpred4174229)
        if self.failed:
            return 


    # $ANTLR end synpred417



    # $ANTLR start synpred515
    def synpred515_fragment(self, ):
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:638:8: ( reFirstChar )
        # /home/visbrero/rev_control/git/java-antlr-grammar/JavaScript.g:638:8: reFirstChar
        self.following.append(self.FOLLOW_reFirstChar_in_synpred5154873)
        self.reFirstChar()
        self.following.pop()
        if self.failed:
            return 


    # $ANTLR end synpred515



    def synpred400(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred400_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred46(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred46_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred45(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred45_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred48(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred48_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred403(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred403_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred304(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred304_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred303(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred303_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred300(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred300_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred357(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred357_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred162(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred162_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred356(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred356_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred309(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred309_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred160(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred160_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred252(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred252_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred306(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred306_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred408(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred408_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred351(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred351_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred256(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred256_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred405(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred405_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred168(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred168_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred166(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred166_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred35(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred35_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred32(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred32_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred38(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred38_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred36(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred36_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred365(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred365_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred262(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred262_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred261(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred261_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred150(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred150_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred264(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred264_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred366(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred366_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred263(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred263_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred361(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred361_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred360(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred360_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred268(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred268_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred157(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred157_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred69(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred69_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred67(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred67_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred101(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred101_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred64(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred64_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred107(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred107_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred60(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred60_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred108(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred108_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred183(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred183_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred182(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred182_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred230(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred230_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred180(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred180_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred185(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred185_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred238(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred238_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred237(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred237_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred236(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred236_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred235(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred235_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred234(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred234_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred56(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred56_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred55(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred55_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred7(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred7_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred1(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred1_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred3(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred3_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred170(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred170_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred240(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred240_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred386(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred386_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred388(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred388_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred248(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred248_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred381(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred381_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred417(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred417_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred243(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred243_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred385(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred385_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred245(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred245_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred393(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred393_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred298(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred298_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred127(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred127_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred129(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred129_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred84(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred84_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred391(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred391_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred318(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred318_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred125(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred125_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred290(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred290_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred120(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred120_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred89(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred89_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred292(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred292_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred397(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred397_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred294(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred294_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred398(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred398_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred297(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred297_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred210(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred210_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred211(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred211_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred216(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred216_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred215(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred215_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred315(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred315_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred316(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred316_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred312(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred312_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred310(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred310_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred70(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred70_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred115(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred115_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred116(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred116_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred113(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred113_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred111(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred111_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred229(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred229_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred221(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred221_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred224(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred224_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred227(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred227_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred324(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred324_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred198(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred198_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred321(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred321_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred322(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred322_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred193(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred193_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred119(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred119_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred145(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred145_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred147(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred147_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred149(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred149_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred29(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred29_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred272(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred272_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred273(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred273_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred142(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred142_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred330(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred330_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred331(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred331_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred25(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred25_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred21(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred21_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred336(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred336_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred22(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred22_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred515(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred515_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred135(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred135_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred96(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred96_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred139(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred139_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred19(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred19_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred289(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred289_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred287(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred287_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred138(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred138_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred132(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred132_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred207(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred207_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred204(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred204_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred344(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred344_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success

    def synpred345(self):
        self.backtracking += 1
        start = self.input.mark()
        self.synpred345_fragment()
        success = not self.failed
        self.input.rewind(start)
        self.backtracking -= 1
        self.failed = False
        return success



    # lookup tables for DFA #8

    DFA8_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA8_eof = DFA.unpack(
        u"\2\2\2\uffff"
        )

    DFA8_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA8_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA8_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA8_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA8_transition = [
        DFA.unpack(u"\1\1\5\3\31\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\1\3\1\uffff\2\3\2\uffff\10\3\1\uffff\1\3\1\uffff\4\3\1\uffff\4"
        u"\3\1\uffff\3\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15\3"),
        DFA.unpack(u"\1\1\5\3\31\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\1\3\1\uffff\2\3\2\uffff\10\3\1\uffff\1\3\1\uffff\4\3\1\uffff\4"
        u"\3\1\uffff\3\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #8

    DFA8 = DFA
    # lookup tables for DFA #10

    DFA10_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA10_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA10_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA10_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA10_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA10_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA10_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\3\34\uffff\1\2\12\uffff\3\3\3\uffff\1"
        u"\3\7\uffff\1\3\10\uffff\1\3\52\uffff\2\3"),
        DFA.unpack(u"\1\1\3\uffff\1\3\34\uffff\1\2\12\uffff\3\3\3\uffff\1"
        u"\3\7\uffff\1\3\10\uffff\1\3\52\uffff\2\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #10

    DFA10 = DFA
    # lookup tables for DFA #13

    DFA13_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA13_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA13_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA13_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA13_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA13_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA13_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\3\35\uffff\1\2\11\uffff\3\3\3\uffff\1"
        u"\3\7\uffff\1\3\10\uffff\1\3\52\uffff\2\3"),
        DFA.unpack(u"\1\1\3\uffff\1\3\35\uffff\1\2\11\uffff\3\3\3\uffff\1"
        u"\3\7\uffff\1\3\10\uffff\1\3\52\uffff\2\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #13

    DFA13 = DFA
    # lookup tables for DFA #18

    DFA18_eot = DFA.unpack(
        u"\21\uffff"
        )

    DFA18_eof = DFA.unpack(
        u"\21\uffff"
        )

    DFA18_min = DFA.unpack(
        u"\1\55\1\57\3\uffff\1\53\1\57\1\53\1\116\2\uffff\1\53\1\57\1\54"
        u"\1\116\1\0\1\53"
        )

    DFA18_max = DFA.unpack(
        u"\1\121\1\u009a\3\uffff\3\u009a\1\120\2\uffff\2\u009a\1\121\1\120"
        u"\1\0\1\u009a"
        )

    DFA18_accept = DFA.unpack(
        u"\2\uffff\1\4\1\5\1\1\4\uffff\1\2\1\3\6\uffff"
        )

    DFA18_special = DFA.unpack(
        u"\17\uffff\1\0\1\uffff"
        )

            
    DFA18_transition = [
        DFA.unpack(u"\1\3\35\uffff\1\1\5\uffff\1\2"),
        DFA.unpack(u"\1\5\35\uffff\1\4\11\uffff\3\5\3\uffff\1\5\7\uffff\1"
        u"\5\10\uffff\1\5\52\uffff\2\5"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\7\3\uffff\1\10\34\uffff\1\12\1\11\2\6\7\uffff\3\10"
        u"\3\uffff\1\10\7\uffff\1\10\10\uffff\1\10\52\uffff\2\10"),
        DFA.unpack(u"\1\13\47\uffff\3\13\3\uffff\1\13\7\uffff\1\13\10\uffff"
        u"\1\13\52\uffff\2\13"),
        DFA.unpack(u"\1\7\3\uffff\1\10\34\uffff\1\12\1\11\11\uffff\3\10\3"
        u"\uffff\1\10\7\uffff\1\10\10\uffff\1\10\52\uffff\2\10"),
        DFA.unpack(u"\2\14\1\15"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\7\3\uffff\1\10\34\uffff\1\12\1\11\2\6\7\uffff\3\10"
        u"\3\uffff\1\10\7\uffff\1\10\10\uffff\1\10\52\uffff\2\10"),
        DFA.unpack(u"\1\16\47\uffff\3\16\3\uffff\1\16\7\uffff\1\16\10\uffff"
        u"\1\16\52\uffff\2\16"),
        DFA.unpack(u"\1\20\44\uffff\1\17"),
        DFA.unpack(u"\2\14\1\15"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u"\1\7\3\uffff\1\10\34\uffff\1\12\1\11\11\uffff\3\10\3"
        u"\uffff\1\10\7\uffff\1\10\10\uffff\1\10\52\uffff\2\10")
    ]

    # class definition for DFA #18

    class DFA18(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA18_15 = input.LA(1)

                 
                index18_15 = input.index()
                input.rewind()
                s = -1
                if (self.synpred21()):
                    s = 9

                elif (self.synpred22()):
                    s = 10

                 
                input.seek(index18_15)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 18, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #36

    DFA36_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA36_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA36_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA36_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA36_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA36_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA36_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\2\46\uffff\1\3\3\2\3\uffff\1\2\7\uffff"
        u"\1\2\10\uffff\1\2\52\uffff\2\2"),
        DFA.unpack(u"\1\1\3\uffff\1\2\46\uffff\1\3\3\2\3\uffff\1\2\7\uffff"
        u"\1\2\10\uffff\1\2\52\uffff\2\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #36

    DFA36 = DFA
    # lookup tables for DFA #35

    DFA35_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA35_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA35_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA35_max = DFA.unpack(
        u"\2\126\2\uffff"
        )

    DFA35_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA35_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA35_transition = [
        DFA.unpack(u"\1\1\51\uffff\1\3\1\2"),
        DFA.unpack(u"\1\1\51\uffff\1\3\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #35

    DFA35 = DFA
    # lookup tables for DFA #43

    DFA43_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA43_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA43_min = DFA.unpack(
        u"\1\53\1\uffff\1\53\1\uffff"
        )

    DFA43_max = DFA.unpack(
        u"\1\u009d\1\uffff\1\122\1\uffff"
        )

    DFA43_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA43_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA43_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\3\2\1\2\uffff\10\1\1\uffff\1\1\1\uffff\4\1\1\uffff\4\1\1"
        u"\uffff\3\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\35\uffff\1\1\5\uffff\1\1\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #43

    DFA43 = DFA
    # lookup tables for DFA #54

    DFA54_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA54_eof = DFA.unpack(
        u"\1\uffff\1\2\2\uffff\1\2"
        )

    DFA54_min = DFA.unpack(
        u"\2\53\2\uffff\1\53"
        )

    DFA54_max = DFA.unpack(
        u"\1\126\1\u009d\2\uffff\1\u009d"
        )

    DFA54_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1\1\uffff"
        )

    DFA54_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA54_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\12\uffff\1\3\1\2"),
        DFA.unpack(u"\1\4\5\2\31\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\4\2\1\3\11\2\1\uffff\6\2\1\uffff\10\2\2\uffff\1\2\35\uffff\1\2"
        u"\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\2\31\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\4\2\1\3\11\2\1\uffff\6\2\1\uffff\10\2\2\uffff\1\2\35\uffff\1\2"
        u"\1\uffff\15\2")
    ]

    # class definition for DFA #54

    DFA54 = DFA
    # lookup tables for DFA #57

    DFA57_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA57_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA57_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA57_max = DFA.unpack(
        u"\2\125\2\uffff"
        )

    DFA57_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA57_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA57_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #57

    DFA57 = DFA
    # lookup tables for DFA #59

    DFA59_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA59_eof = DFA.unpack(
        u"\2\3\2\uffff\1\3"
        )

    DFA59_min = DFA.unpack(
        u"\2\53\2\uffff\1\53"
        )

    DFA59_max = DFA.unpack(
        u"\1\126\1\u009d\2\uffff\1\u009d"
        )

    DFA59_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2\1\uffff"
        )

    DFA59_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA59_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\3\5\uffff\1\2\4\uffff\2\3"),
        DFA.unpack(u"\1\4\5\3\31\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\2\16"
        u"\3\1\uffff\6\3\1\uffff\10\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15"
        u"\3"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\3\31\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\2\16"
        u"\3\1\uffff\6\3\1\uffff\10\3\2\uffff\1\3\35\uffff\1\3\1\uffff\15"
        u"\3")
    ]

    # class definition for DFA #59

    DFA59 = DFA
    # lookup tables for DFA #65

    DFA65_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA65_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA65_min = DFA.unpack(
        u"\2\53\1\0\2\uffff"
        )

    DFA65_max = DFA.unpack(
        u"\2\137\1\0\2\uffff"
        )

    DFA65_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA65_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA65_transition = [
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #65

    class DFA65(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA65_2 = input.LA(1)

                 
                index65_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred89()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index65_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 65, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #64

    DFA64_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA64_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA64_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA64_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA64_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA64_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA64_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\2\45\uffff\1\3\1\uffff\3\2\3\uffff\2"
        u"\2\1\3\5\uffff\1\2\10\uffff\1\2\52\uffff\2\2"),
        DFA.unpack(u"\1\1\3\uffff\1\2\45\uffff\1\3\1\uffff\3\2\3\uffff\2"
        u"\2\1\3\5\uffff\1\2\10\uffff\1\2\52\uffff\2\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #64

    DFA64 = DFA
    # lookup tables for DFA #71

    DFA71_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA71_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA71_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA71_max = DFA.unpack(
        u"\2\146\2\uffff"
        )

    DFA71_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA71_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA71_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\3\5\uffff\1\2\4\uffff\1\3\20\uffff\1"
        u"\3"),
        DFA.unpack(u"\1\1\36\uffff\1\3\5\uffff\1\2\4\uffff\1\3\20\uffff\1"
        u"\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #71

    DFA71 = DFA
    # lookup tables for DFA #77

    DFA77_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA77_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA77_min = DFA.unpack(
        u"\2\53\1\0\2\uffff"
        )

    DFA77_max = DFA.unpack(
        u"\2\137\1\0\2\uffff"
        )

    DFA77_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA77_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA77_transition = [
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #77

    class DFA77(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA77_2 = input.LA(1)

                 
                index77_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred101()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index77_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 77, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #76

    DFA76_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA76_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA76_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA76_max = DFA.unpack(
        u"\2\u009a\2\uffff"
        )

    DFA76_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA76_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA76_transition = [
        DFA.unpack(u"\1\1\3\uffff\1\2\45\uffff\1\3\1\uffff\3\2\3\uffff\1"
        u"\2\1\uffff\1\3\5\uffff\1\2\10\uffff\1\2\52\uffff\2\2"),
        DFA.unpack(u"\1\1\3\uffff\1\2\45\uffff\1\3\1\uffff\3\2\3\uffff\1"
        u"\2\1\uffff\1\3\5\uffff\1\2\10\uffff\1\2\52\uffff\2\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #76

    DFA76 = DFA
    # lookup tables for DFA #82

    DFA82_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA82_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA82_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA82_max = DFA.unpack(
        u"\2\146\2\uffff"
        )

    DFA82_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA82_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA82_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\3\5\uffff\1\2\4\uffff\1\3\20\uffff\1"
        u"\3"),
        DFA.unpack(u"\1\1\36\uffff\1\3\5\uffff\1\2\4\uffff\1\3\20\uffff\1"
        u"\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #82

    DFA82 = DFA
    # lookup tables for DFA #104

    DFA104_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA104_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA104_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA104_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA104_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA104_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA104_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\3\1\2\1\uffff\1\2\1\uffff\1\2\1"
        u"\uffff\1\2\1\uffff\2\2\2\uffff\3\2\1\uffff\1\2\1\uffff\2\2\6\uffff"
        u"\1\2\10\uffff\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\3\1\2\1\uffff\1\2\1\uffff\1\2\1"
        u"\uffff\1\2\1\uffff\2\2\2\uffff\3\2\1\uffff\1\2\1\uffff\2\2\6\uffff"
        u"\1\2\10\uffff\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #104

    DFA104 = DFA
    # lookup tables for DFA #107

    DFA107_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA107_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA107_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA107_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA107_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA107_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA107_transition = [
        DFA.unpack(u"\1\1\5\2\31\uffff\1\3\1\2\1\uffff\1\2\1\uffff\1\2\1"
        u"\uffff\1\2\1\uffff\2\2\2\uffff\3\2\3\uffff\2\2\6\uffff\1\2\10\uffff"
        u"\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\31\uffff\1\3\1\2\1\uffff\1\2\1\uffff\1\2\1"
        u"\uffff\1\2\1\uffff\2\2\2\uffff\3\2\3\uffff\2\2\6\uffff\1\2\10\uffff"
        u"\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #107

    DFA107 = DFA
    # lookup tables for DFA #110

    DFA110_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA110_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA110_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA110_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA110_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA110_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA110_transition = [
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\3\uffff\2\2\6\uffff\1\2\10\uffff"
        u"\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\3\uffff\2\2\6\uffff\1\2\10\uffff"
        u"\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #110

    DFA110 = DFA
    # lookup tables for DFA #115

    DFA115_eot = DFA.unpack(
        u"\22\uffff"
        )

    DFA115_eof = DFA.unpack(
        u"\2\uffff\1\1\17\uffff"
        )

    DFA115_min = DFA.unpack(
        u"\1\53\1\uffff\1\53\1\uffff\7\53\1\0\6\53"
        )

    DFA115_max = DFA.unpack(
        u"\1\u009d\1\uffff\1\u009a\1\uffff\1\u009a\2\u009d\2\u0095\1\u0090"
        u"\1\u009d\1\0\1\u0090\1\u009d\2\u0095\2\u0090"
        )

    DFA115_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2\16\uffff"
        )

    DFA115_special = DFA.unpack(
        u"\13\uffff\1\0\6\uffff"
        )

            
    DFA115_transition = [
        DFA.unpack(u"\6\1\32\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1"
        u"\1\1\uffff\2\1\2\uffff\3\1\1\uffff\1\3\1\uffff\1\2\1\1\6\uffff"
        u"\1\1\10\uffff\1\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\3\32\uffff\7\1\3\uffff\2\1\1\uffff\3"
        u"\3\3\uffff\1\3\1\5\6\uffff\1\3\10\uffff\1\3\3\uffff\37\1\3\uffff"
        u"\2\1\3\uffff\2\3"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\3\32\uffff\7\1\3\uffff\2\1\1\uffff\3"
        u"\3\3\uffff\1\3\1\5\6\uffff\1\3\10\uffff\1\3\3\uffff\37\1\10\uffff"
        u"\2\3"),
        DFA.unpack(u"\1\6\3\1\1\10\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff\1"
        u"\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\10\3\uffff\1\7\1\1\1\3"
        u"\5\uffff\1\10\10\uffff\1\10\2\uffff\1\1\35\uffff\1\1\1\uffff\10"
        u"\1\2\10\3\1"),
        DFA.unpack(u"\1\6\3\1\1\10\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff\1"
        u"\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\10\3\uffff\1\7\1\1\1\3"
        u"\5\uffff\1\10\10\uffff\1\10\2\uffff\1\1\35\uffff\1\1\1\uffff\10"
        u"\1\2\10\3\1"),
        DFA.unpack(u"\1\11\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\14\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\11\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1"),
        DFA.unpack(u"\1\15\3\1\1\17\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\17\3\uffff\1\16\1\1"
        u"\1\3\5\uffff\1\17\10\uffff\1\17\2\uffff\1\1\35\uffff\1\1\1\uffff"
        u"\10\1\2\17\3\1"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u"\1\14\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1"),
        DFA.unpack(u"\1\15\3\1\1\17\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\17\3\uffff\1\16\1\1"
        u"\1\3\5\uffff\1\17\10\uffff\1\17\2\uffff\1\1\35\uffff\1\1\1\uffff"
        u"\10\1\2\17\3\1"),
        DFA.unpack(u"\1\20\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\21\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\20\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1"),
        DFA.unpack(u"\1\21\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1")
    ]

    # class definition for DFA #115

    class DFA115(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA115_11 = input.LA(1)

                 
                index115_11 = input.index()
                input.rewind()
                s = -1
                if (self.synpred139()):
                    s = 1

                elif (True):
                    s = 3

                 
                input.seek(index115_11)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 115, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #126

    DFA126_eot = DFA.unpack(
        u"\22\uffff"
        )

    DFA126_eof = DFA.unpack(
        u"\22\uffff"
        )

    DFA126_min = DFA.unpack(
        u"\1\53\1\uffff\1\53\1\uffff\7\53\1\0\6\53"
        )

    DFA126_max = DFA.unpack(
        u"\1\u009d\1\uffff\1\u009a\1\uffff\1\u009a\2\u009d\2\u0095\1\u0090"
        u"\1\u009d\1\0\1\u0090\1\u009d\2\u0095\2\u0090"
        )

    DFA126_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2\16\uffff"
        )

    DFA126_special = DFA.unpack(
        u"\13\uffff\1\0\6\uffff"
        )

            
    DFA126_transition = [
        DFA.unpack(u"\6\1\32\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"
        u"\1\2\uffff\3\1\1\uffff\1\3\1\uffff\1\2\1\1\6\uffff\1\1\10\uffff"
        u"\1\1\2\uffff\1\1\46\uffff\6\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\3\36\uffff\1\1\5\uffff\1\1\2\uffff\3"
        u"\3\3\uffff\1\3\1\5\6\uffff\1\3\1\1\7\uffff\1\3\3\uffff\1\1\46\uffff"
        u"\2\3"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\3\36\uffff\1\1\5\uffff\1\1\2\uffff\3"
        u"\3\3\uffff\1\3\1\5\6\uffff\1\3\1\1\7\uffff\1\3\3\uffff\1\1\46\uffff"
        u"\2\3"),
        DFA.unpack(u"\1\6\3\1\1\10\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff\1"
        u"\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\10\3\uffff\1\7\1\1\1\3"
        u"\5\uffff\1\10\10\uffff\1\10\2\uffff\1\1\35\uffff\1\1\1\uffff\10"
        u"\1\2\10\3\1"),
        DFA.unpack(u"\1\6\3\1\1\10\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff\1"
        u"\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\10\3\uffff\1\7\1\1\1\3"
        u"\5\uffff\1\10\10\uffff\1\10\2\uffff\1\1\35\uffff\1\1\1\uffff\10"
        u"\1\2\10\3\1"),
        DFA.unpack(u"\1\11\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\14\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\11\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1"),
        DFA.unpack(u"\1\15\3\1\1\17\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\17\3\uffff\1\16\1\1"
        u"\1\3\5\uffff\1\17\10\uffff\1\17\2\uffff\1\1\35\uffff\1\1\1\uffff"
        u"\10\1\2\17\3\1"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u"\1\14\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1"),
        DFA.unpack(u"\1\15\3\1\1\17\1\1\32\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\1\1\1\uffff\2\1\1\3\1\uffff\3\17\3\uffff\1\16\1\1"
        u"\1\3\5\uffff\1\17\10\uffff\1\17\2\uffff\1\1\35\uffff\1\1\1\uffff"
        u"\10\1\2\17\3\1"),
        DFA.unpack(u"\1\20\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\21\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1\3\uffff\2\1"),
        DFA.unpack(u"\1\20\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1"),
        DFA.unpack(u"\1\21\37\uffff\6\1\3\uffff\1\1\1\12\10\uffff\1\1\1\13"
        u"\4\uffff\1\1\1\uffff\1\1\13\uffff\37\1")
    ]

    # class definition for DFA #126

    class DFA126(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA126_11 = input.LA(1)

                 
                index126_11 = input.index()
                input.rewind()
                s = -1
                if (self.synpred150()):
                    s = 1

                elif (True):
                    s = 3

                 
                input.seek(index126_11)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 126, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #146

    DFA146_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA146_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA146_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA146_max = DFA.unpack(
        u"\2\153\2\uffff"
        )

    DFA146_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA146_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA146_transition = [
        DFA.unpack(u"\1\1\46\uffff\1\2\4\uffff\1\2\23\uffff\1\3"),
        DFA.unpack(u"\1\1\46\uffff\1\2\4\uffff\1\2\23\uffff\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #146

    DFA146 = DFA
    # lookup tables for DFA #150

    DFA150_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA150_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA150_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA150_max = DFA.unpack(
        u"\2\127\2\uffff"
        )

    DFA150_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA150_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA150_transition = [
        DFA.unpack(u"\1\1\46\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u"\1\1\46\uffff\1\3\4\uffff\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #150

    DFA150 = DFA
    # lookup tables for DFA #149

    DFA149_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA149_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA149_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA149_max = DFA.unpack(
        u"\2\153\2\uffff"
        )

    DFA149_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA149_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA149_transition = [
        DFA.unpack(u"\1\1\46\uffff\1\2\30\uffff\1\3"),
        DFA.unpack(u"\1\1\46\uffff\1\2\30\uffff\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #149

    DFA149 = DFA
    # lookup tables for DFA #158

    DFA158_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA158_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA158_min = DFA.unpack(
        u"\1\53\1\uffff\1\53\1\uffff"
        )

    DFA158_max = DFA.unpack(
        u"\1\u009d\1\uffff\1\153\1\uffff"
        )

    DFA158_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA158_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA158_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\3\2\1\2\uffff\10\1\1\uffff\1\1\1\uffff\4\1\1\uffff\4\1\1"
        u"\3\3\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\35\uffff\1\1\5\uffff\1\1\1\3\30\uffff"
        u"\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #158

    DFA158 = DFA
    # lookup tables for DFA #162

    DFA162_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA162_eof = DFA.unpack(
        u"\2\3\2\uffff"
        )

    DFA162_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA162_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA162_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA162_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA162_transition = [
        DFA.unpack(u"\1\1\5\3\31\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\4\3\2\uffff\10\3\1\uffff\6\3\1\uffff\10\3\1\uffff\1\2\1\3\35\uffff"
        u"\1\3\1\uffff\15\3"),
        DFA.unpack(u"\1\1\5\3\31\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\uffff"
        u"\4\3\2\uffff\10\3\1\uffff\6\3\1\uffff\10\3\1\uffff\1\2\1\3\35\uffff"
        u"\1\3\1\uffff\15\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #162

    DFA162 = DFA
    # lookup tables for DFA #175

    DFA175_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA175_eof = DFA.unpack(
        u"\2\2\2\uffff\1\2"
        )

    DFA175_min = DFA.unpack(
        u"\2\53\2\uffff\1\53"
        )

    DFA175_max = DFA.unpack(
        u"\1\144\1\u009d\2\uffff\1\u009d"
        )

    DFA175_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1\1\uffff"
        )

    DFA175_special = DFA.unpack(
        u"\5\uffff"
        )

            
    DFA175_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\3\uffff\1\2\2\uffff\1"
        u"\3\1\2\10\uffff\1\2\4\uffff\1\2"),
        DFA.unpack(u"\1\4\5\2\31\uffff\2\2\1\uffff\3\2\1\uffff\4\2\1\3\20"
        u"\2\1\uffff\10\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\5\2\31\uffff\2\2\1\uffff\3\2\1\uffff\4\2\1\3\20"
        u"\2\1\uffff\10\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2")
    ]

    # class definition for DFA #175

    DFA175 = DFA
    # lookup tables for DFA #178

    DFA178_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA178_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA178_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA178_max = DFA.unpack(
        u"\2\125\2\uffff"
        )

    DFA178_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA178_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA178_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\12\uffff\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #178

    DFA178 = DFA
    # lookup tables for DFA #227

    DFA227_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA227_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA227_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA227_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA227_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA227_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA227_transition = [
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\3\uffff\2\2\6\uffff\1\2\10\uffff"
        u"\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\uffff\1\3\3\2\3\uffff\2\2\6\uffff\1\2\10\uffff"
        u"\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #227

    DFA227 = DFA
    # lookup tables for DFA #245

    DFA245_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA245_eof = DFA.unpack(
        u"\1\3\3\uffff"
        )

    DFA245_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA245_max = DFA.unpack(
        u"\2\177\2\uffff"
        )

    DFA245_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA245_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA245_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\3\3\uffff\1\3\6\uffff\1\3\20\uffff\1"
        u"\3\30\uffff\1\2"),
        DFA.unpack(u"\1\1\36\uffff\1\3\3\uffff\1\3\6\uffff\1\3\20\uffff\1"
        u"\3\30\uffff\1\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #245

    DFA245 = DFA
    # lookup tables for DFA #251

    DFA251_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA251_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA251_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA251_max = DFA.unpack(
        u"\2\u0080\2\uffff"
        )

    DFA251_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA251_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA251_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\1\2\1\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\1\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #251

    DFA251 = DFA
    # lookup tables for DFA #257

    DFA257_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA257_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA257_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA257_max = DFA.unpack(
        u"\2\u0081\2\uffff"
        )

    DFA257_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA257_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA257_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\2\2\1\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\2\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #257

    DFA257 = DFA
    # lookup tables for DFA #263

    DFA263_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA263_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA263_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA263_max = DFA.unpack(
        u"\2\u0082\2\uffff"
        )

    DFA263_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA263_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA263_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\3\2\1\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\3\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #263

    DFA263 = DFA
    # lookup tables for DFA #269

    DFA269_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA269_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA269_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA269_max = DFA.unpack(
        u"\2\u0083\2\uffff"
        )

    DFA269_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA269_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA269_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\4\2\1\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\4\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #269

    DFA269 = DFA
    # lookup tables for DFA #275

    DFA275_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA275_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA275_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA275_max = DFA.unpack(
        u"\2\u0084\2\uffff"
        )

    DFA275_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA275_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA275_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\5\2\1\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\5\2\1\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #275

    DFA275 = DFA
    # lookup tables for DFA #281

    DFA281_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA281_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA281_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA281_max = DFA.unpack(
        u"\2\u0088\2\uffff"
        )

    DFA281_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA281_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA281_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\6\2\4\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1"
        u"\2\30\uffff\6\2\4\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #281

    DFA281 = DFA
    # lookup tables for DFA #287

    DFA287_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA287_eof = DFA.unpack(
        u"\1\2\3\uffff"
        )

    DFA287_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA287_max = DFA.unpack(
        u"\2\u008b\2\uffff"
        )

    DFA287_accept = DFA.unpack(
        u"\2\uffff\1\2\1\1"
        )

    DFA287_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA287_transition = [
        DFA.unpack(u"\1\1\36\uffff\1\2\2\3\1\uffff\1\2\6\uffff\1\2\20\uffff"
        u"\1\2\30\uffff\12\2\3\3"),
        DFA.unpack(u"\1\1\36\uffff\1\2\2\3\1\uffff\1\2\6\uffff\1\2\20\uffff"
        u"\1\2\30\uffff\12\2\3\3"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #287

    DFA287 = DFA
    # lookup tables for DFA #303

    DFA303_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA303_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA303_min = DFA.unpack(
        u"\1\53\1\uffff\1\53\1\uffff"
        )

    DFA303_max = DFA.unpack(
        u"\1\u009d\1\uffff\1\137\1\uffff"
        )

    DFA303_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA303_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA303_transition = [
        DFA.unpack(u"\1\2\5\1\32\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\2\1\1\3\1\uffff\3\1\3\uffff\2\1\1\3\5\uffff\1\1\10"
        u"\uffff\1\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\35\uffff\1\1\5\uffff\1\1\3\uffff\1"
        u"\3\11\uffff\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #303

    DFA303 = DFA
    # lookup tables for DFA #307

    DFA307_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA307_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA307_min = DFA.unpack(
        u"\2\53\1\0\2\uffff"
        )

    DFA307_max = DFA.unpack(
        u"\2\137\1\0\2\uffff"
        )

    DFA307_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA307_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA307_transition = [
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #307

    class DFA307(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA307_2 = input.LA(1)

                 
                index307_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred393()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index307_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 307, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #306

    DFA306_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA306_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA306_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA306_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA306_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA306_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA306_transition = [
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\3\uffff\2\2\1\3\5\uffff\1\2\10"
        u"\uffff\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\3\uffff\2\2\1\3\5\uffff\1\2\10"
        u"\uffff\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #306

    DFA306 = DFA
    # lookup tables for DFA #326

    DFA326_eot = DFA.unpack(
        u"\6\uffff"
        )

    DFA326_eof = DFA.unpack(
        u"\6\uffff"
        )

    DFA326_min = DFA.unpack(
        u"\3\53\1\uffff\1\53\1\uffff"
        )

    DFA326_max = DFA.unpack(
        u"\2\125\1\u009d\1\uffff\1\u009d\1\uffff"
        )

    DFA326_accept = DFA.unpack(
        u"\3\uffff\1\2\1\uffff\1\1"
        )

    DFA326_special = DFA.unpack(
        u"\6\uffff"
        )

            
    DFA326_transition = [
        DFA.unpack(u"\1\1\46\uffff\1\3\2\uffff\1\2"),
        DFA.unpack(u"\1\1\46\uffff\1\3\2\uffff\1\2"),
        DFA.unpack(u"\1\4\1\5\1\uffff\2\5\42\uffff\1\3\4\uffff\3\5\3\uffff"
        u"\1\5\7\uffff\1\5\10\uffff\1\5\52\uffff\5\5"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\1\5\1\uffff\2\5\42\uffff\1\3\4\uffff\3\5\3\uffff"
        u"\1\5\7\uffff\1\5\10\uffff\1\5\52\uffff\5\5"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #326

    DFA326 = DFA
    # lookup tables for DFA #340

    DFA340_eot = DFA.unpack(
        u"\11\uffff"
        )

    DFA340_eof = DFA.unpack(
        u"\11\uffff"
        )

    DFA340_min = DFA.unpack(
        u"\1\54\1\53\1\uffff\3\53\1\uffff\1\53\1\uffff"
        )

    DFA340_max = DFA.unpack(
        u"\1\u009d\1\u009a\1\uffff\3\u009a\1\uffff\1\u009a\1\uffff"
        )

    DFA340_accept = DFA.unpack(
        u"\2\uffff\1\1\3\uffff\1\3\1\uffff\1\2"
        )

    DFA340_special = DFA.unpack(
        u"\11\uffff"
        )

            
    DFA340_transition = [
        DFA.unpack(u"\1\2\1\uffff\2\2\47\uffff\3\2\3\uffff\1\2\7\uffff\1"
        u"\2\10\uffff\1\2\52\uffff\1\1\1\3\3\2"),
        DFA.unpack(u"\1\4\3\uffff\1\5\36\uffff\1\2\10\uffff\3\5\3\uffff\1"
        u"\5\7\uffff\1\5\10\uffff\1\5\52\uffff\2\5"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\4\3\uffff\1\5\36\uffff\1\2\10\uffff\3\5\3\uffff\1"
        u"\5\7\uffff\1\5\10\uffff\1\5\52\uffff\2\5"),
        DFA.unpack(u"\1\4\3\uffff\1\6\36\uffff\1\2\10\uffff\3\6\3\uffff\1"
        u"\6\7\uffff\1\6\10\uffff\1\6\52\uffff\2\6"),
        DFA.unpack(u"\1\7\3\uffff\1\10\44\uffff\1\6\2\uffff\3\10\3\uffff"
        u"\1\10\7\uffff\1\10\10\uffff\1\10\52\uffff\2\10"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\7\3\uffff\1\10\44\uffff\1\6\2\uffff\3\10\3\uffff"
        u"\1\10\7\uffff\1\10\10\uffff\1\10\52\uffff\2\10"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #340

    DFA340 = DFA
    # lookup tables for DFA #370

    DFA370_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA370_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA370_min = DFA.unpack(
        u"\1\53\1\uffff\1\53\1\uffff"
        )

    DFA370_max = DFA.unpack(
        u"\1\u009d\1\uffff\1\122\1\uffff"
        )

    DFA370_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA370_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA370_transition = [
        DFA.unpack(u"\1\2\5\1\31\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\3\2\1\2\uffff\10\1\1\uffff\1\1\1\uffff\4\1\1\uffff\4\1\1"
        u"\uffff\3\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\35\uffff\1\1\5\uffff\1\1\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #370

    DFA370 = DFA
    # lookup tables for DFA #498

    DFA498_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA498_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA498_min = DFA.unpack(
        u"\1\53\1\uffff\1\53\1\uffff"
        )

    DFA498_max = DFA.unpack(
        u"\1\u009d\1\uffff\1\137\1\uffff"
        )

    DFA498_accept = DFA.unpack(
        u"\1\uffff\1\1\1\uffff\1\2"
        )

    DFA498_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA498_transition = [
        DFA.unpack(u"\1\2\5\1\32\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"
        u"\1\1\1\uffff\2\1\1\3\1\uffff\3\1\3\uffff\2\1\1\3\5\uffff\1\1\10"
        u"\uffff\1\1\2\uffff\1\1\35\uffff\1\1\1\uffff\15\1"),
        DFA.unpack(u""),
        DFA.unpack(u"\1\2\1\uffff\1\1\35\uffff\1\1\5\uffff\1\1\3\uffff\1"
        u"\3\11\uffff\1\3"),
        DFA.unpack(u"")
    ]

    # class definition for DFA #498

    DFA498 = DFA
    # lookup tables for DFA #502

    DFA502_eot = DFA.unpack(
        u"\5\uffff"
        )

    DFA502_eof = DFA.unpack(
        u"\5\uffff"
        )

    DFA502_min = DFA.unpack(
        u"\2\53\1\0\2\uffff"
        )

    DFA502_max = DFA.unpack(
        u"\2\137\1\0\2\uffff"
        )

    DFA502_accept = DFA.unpack(
        u"\3\uffff\1\2\1\1"
        )

    DFA502_special = DFA.unpack(
        u"\2\uffff\1\0\2\uffff"
        )

            
    DFA502_transition = [
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\1\51\uffff\1\2\11\uffff\1\3"),
        DFA.unpack(u"\1\uffff"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #502

    class DFA502(DFA):
        def specialStateTransition(self_, s, input):
            # convince pylint that my self_ magic is ok ;)
            # pylint: disable-msg=E0213

            # pretend we are a member of the recognizer
            # thus semantic predicates can be evaluated
            self = self_.recognizer

            _s = s

            if s == 0: 
                LA502_2 = input.LA(1)

                 
                index502_2 = input.index()
                input.rewind()
                s = -1
                if (self.synpred393()):
                    s = 4

                elif (True):
                    s = 3

                 
                input.seek(index502_2)
                if s >= 0:
                    return s

            if self.backtracking >0:
                self.failed = True
                return -1
            nvae = NoViableAltException(self_.getDescription(), 502, _s, input)
            self_.error(nvae)
            raise nvae
    # lookup tables for DFA #501

    DFA501_eot = DFA.unpack(
        u"\4\uffff"
        )

    DFA501_eof = DFA.unpack(
        u"\4\uffff"
        )

    DFA501_min = DFA.unpack(
        u"\2\53\2\uffff"
        )

    DFA501_max = DFA.unpack(
        u"\2\u009d\2\uffff"
        )

    DFA501_accept = DFA.unpack(
        u"\2\uffff\1\1\1\2"
        )

    DFA501_special = DFA.unpack(
        u"\4\uffff"
        )

            
    DFA501_transition = [
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\3\uffff\2\2\1\3\5\uffff\1\2\10"
        u"\uffff\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u"\1\1\5\2\32\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"
        u"\1\2\1\uffff\2\2\1\3\1\uffff\3\2\3\uffff\2\2\1\3\5\uffff\1\2\10"
        u"\uffff\1\2\2\uffff\1\2\35\uffff\1\2\1\uffff\15\2"),
        DFA.unpack(u""),
        DFA.unpack(u"")
    ]

    # class definition for DFA #501

    DFA501 = DFA
 

    FOLLOW_LT_in_program204 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_sourceElements_in_program207 = frozenset([43])
    FOLLOW_LT_in_program209 = frozenset([43])
    FOLLOW_EOF_in_program212 = frozenset([1])
    FOLLOW_LT_in_standaloneExpression237 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_standaloneExpression240 = frozenset([43, 74])
    FOLLOW_LT_in_standaloneExpression242 = frozenset([43, 74])
    FOLLOW_74_in_standaloneExpression246 = frozenset([43])
    FOLLOW_LT_in_standaloneExpression248 = frozenset([43])
    FOLLOW_EOF_in_standaloneExpression253 = frozenset([1])
    FOLLOW_sourceElement_in_sourceElements270 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_sourceElements273 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_sourceElement_in_sourceElements277 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_sourceElement291 = frozenset([1])
    FOLLOW_75_in_xmlStartTag309 = frozenset([47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_xmlTagName_in_xmlStartTag311 = frozenset([43, 47, 76, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_xmlStartTag314 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_xmlAttribute_in_xmlStartTag318 = frozenset([43, 47, 76, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_xmlStartTag322 = frozenset([1])
    FOLLOW_76_in_xmlStartTag326 = frozenset([1])
    FOLLOW_75_in_xmlEndTag344 = frozenset([77])
    FOLLOW_77_in_xmlEndTag346 = frozenset([47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_xmlTagName_in_xmlEndTag348 = frozenset([76])
    FOLLOW_76_in_xmlEndTag350 = frozenset([1])
    FOLLOW_75_in_xmlEmptyTag368 = frozenset([47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_xmlTagName_in_xmlEmptyTag370 = frozenset([43, 47, 77, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_xmlEmptyTag373 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_xmlAttribute_in_xmlEmptyTag377 = frozenset([43, 47, 77, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_xmlEmptyTag381 = frozenset([1])
    FOLLOW_77_in_xmlEmptyTag385 = frozenset([76])
    FOLLOW_76_in_xmlEmptyTag387 = frozenset([1])
    FOLLOW_identifier_in_xmlTagName405 = frozenset([1, 78, 79])
    FOLLOW_set_in_xmlTagName409 = frozenset([47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_xmlTagName415 = frozenset([1, 78, 79])
    FOLLOW_xmlAttributeName_in_xmlAttribute435 = frozenset([80])
    FOLLOW_80_in_xmlAttribute437 = frozenset([44, 81])
    FOLLOW_xmlAttributeValue_in_xmlAttribute439 = frozenset([1])
    FOLLOW_identifier_in_xmlAttributeName458 = frozenset([1, 78, 79])
    FOLLOW_set_in_xmlAttributeName462 = frozenset([47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_xmlAttributeName468 = frozenset([1, 78, 79])
    FOLLOW_e4xSplice_in_xmlAttributeValue493 = frozenset([1])
    FOLLOW_StringLiteral_in_xmlAttributeValue498 = frozenset([1])
    FOLLOW_81_in_e4xSplice516 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_e4xSplice518 = frozenset([82])
    FOLLOW_82_in_e4xSplice520 = frozenset([1])
    FOLLOW_xmlEndTag_in_xmlPayload534 = frozenset([1])
    FOLLOW_xmlEmptyTag_in_xmlPayload539 = frozenset([1])
    FOLLOW_xmlStartTag_in_xmlPayload544 = frozenset([1])
    FOLLOW_e4xSplice_in_xmlPayload549 = frozenset([1])
    FOLLOW_XMLComment_in_xmlPayload554 = frozenset([1])
    FOLLOW_LT_in_xmlLiteral567 = frozenset([43, 45, 75, 81])
    FOLLOW_xmlPayload_in_xmlLiteral570 = frozenset([1, 43, 45, 75, 81])
    FOLLOW_83_in_functionExpression585 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_functionExpression587 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_functionExpression590 = frozenset([43, 84])
    FOLLOW_LT_in_functionExpression592 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_functionExpression595 = frozenset([43, 81])
    FOLLOW_LT_in_functionExpression597 = frozenset([43, 81])
    FOLLOW_statementBlock_in_functionExpression600 = frozenset([1])
    FOLLOW_83_in_functionExpression627 = frozenset([43, 84])
    FOLLOW_LT_in_functionExpression629 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_functionExpression632 = frozenset([43, 81])
    FOLLOW_LT_in_functionExpression634 = frozenset([43, 81])
    FOLLOW_statementBlock_in_functionExpression637 = frozenset([1])
    FOLLOW_83_in_functionExpression663 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_functionExpression665 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_functionExpression668 = frozenset([43, 84])
    FOLLOW_LT_in_functionExpression670 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_functionExpression673 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_functionExpression675 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_functionExpression678 = frozenset([1])
    FOLLOW_83_in_functionExpression705 = frozenset([43, 84])
    FOLLOW_LT_in_functionExpression707 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_functionExpression710 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_functionExpression712 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_functionExpression715 = frozenset([1])
    FOLLOW_84_in_formalParameterList748 = frozenset([43, 47, 86, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_formalParameterList751 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_formalParameterList754 = frozenset([43, 85, 86])
    FOLLOW_LT_in_formalParameterList757 = frozenset([43, 85])
    FOLLOW_85_in_formalParameterList760 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_formalParameterList762 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_formalParameterList765 = frozenset([43, 85, 86])
    FOLLOW_LT_in_formalParameterList771 = frozenset([43, 86])
    FOLLOW_86_in_formalParameterList774 = frozenset([1])
    FOLLOW_statementBlock_in_statement797 = frozenset([1])
    FOLLOW_variableStatement_in_statement802 = frozenset([1])
    FOLLOW_emptyStatement_in_statement807 = frozenset([1])
    FOLLOW_expressionStatement_in_statement812 = frozenset([1])
    FOLLOW_ifStatement_in_statement817 = frozenset([1])
    FOLLOW_iterationStatement_in_statement822 = frozenset([1])
    FOLLOW_continueStatement_in_statement827 = frozenset([1])
    FOLLOW_breakStatement_in_statement832 = frozenset([1])
    FOLLOW_returnStatement_in_statement837 = frozenset([1])
    FOLLOW_withStatement_in_statement842 = frozenset([1])
    FOLLOW_letStatement_in_statement847 = frozenset([1])
    FOLLOW_labelledStatement_in_statement852 = frozenset([1])
    FOLLOW_switchStatement_in_statement857 = frozenset([1])
    FOLLOW_throwStatement_in_statement862 = frozenset([1])
    FOLLOW_tryStatement_in_statement867 = frozenset([1])
    FOLLOW_yieldStatement_in_statement872 = frozenset([1])
    FOLLOW_defaultXmlNamespaceStatement_in_statement877 = frozenset([1])
    FOLLOW_87_in_defaultXmlNamespaceStatement888 = frozenset([88])
    FOLLOW_88_in_defaultXmlNamespaceStatement890 = frozenset([89])
    FOLLOW_89_in_defaultXmlNamespaceStatement892 = frozenset([43, 80])
    FOLLOW_LT_in_defaultXmlNamespaceStatement894 = frozenset([43, 80])
    FOLLOW_80_in_defaultXmlNamespaceStatement897 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_defaultXmlNamespaceStatement899 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_defaultXmlNamespaceStatement902 = frozenset([43, 74])
    FOLLOW_LT_in_defaultXmlNamespaceStatement905 = frozenset([1])
    FOLLOW_74_in_defaultXmlNamespaceStatement909 = frozenset([1])
    FOLLOW_81_in_statementBlock931 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_statementBlock933 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statementList_in_statementBlock936 = frozenset([43, 82])
    FOLLOW_LT_in_statementBlock939 = frozenset([43, 82])
    FOLLOW_82_in_statementBlock942 = frozenset([1])
    FOLLOW_81_in_statementBlock960 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_90_in_statementBlock962 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_statementBlock965 = frozenset([82])
    FOLLOW_82_in_statementBlock967 = frozenset([1])
    FOLLOW_statement_in_statementList996 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_statementList999 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_statementList1003 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_91_in_variableStatement1019 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_92_in_variableStatement1023 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_93_in_variableStatement1027 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_variableStatement1030 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationList_in_variableStatement1033 = frozenset([43, 74])
    FOLLOW_LT_in_variableStatement1036 = frozenset([1])
    FOLLOW_74_in_variableStatement1040 = frozenset([1])
    FOLLOW_variableDeclaration_in_variableDeclarationList1065 = frozenset([1, 43, 85])
    FOLLOW_LT_in_variableDeclarationList1068 = frozenset([43, 85])
    FOLLOW_85_in_variableDeclarationList1072 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_variableDeclarationList1075 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclaration_in_variableDeclarationList1079 = frozenset([1, 43, 85])
    FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1093 = frozenset([1, 43, 85])
    FOLLOW_LT_in_variableDeclarationListNoIn1096 = frozenset([43, 85])
    FOLLOW_85_in_variableDeclarationListNoIn1100 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_variableDeclarationListNoIn1103 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1107 = frozenset([1, 43, 85])
    FOLLOW_destructuringDeclaration_in_variableDeclaration1121 = frozenset([1, 43, 80])
    FOLLOW_LT_in_variableDeclaration1124 = frozenset([43, 80])
    FOLLOW_initialiser_in_variableDeclaration1127 = frozenset([1])
    FOLLOW_identifier_in_destructuringDeclaration1154 = frozenset([1])
    FOLLOW_94_in_destructuringDeclaration1159 = frozenset([43, 47, 85, 87, 88, 89, 93, 94, 95, 101, 110, 153, 154])
    FOLLOW_LT_in_destructuringDeclaration1161 = frozenset([43, 47, 85, 87, 88, 89, 93, 94, 95, 101, 110, 153, 154])
    FOLLOW_destructuringDeclaration_in_destructuringDeclaration1164 = frozenset([43, 85, 95])
    FOLLOW_LT_in_destructuringDeclaration1168 = frozenset([43, 85])
    FOLLOW_85_in_destructuringDeclaration1171 = frozenset([43, 47, 85, 87, 88, 89, 93, 94, 95, 101, 110, 153, 154])
    FOLLOW_LT_in_destructuringDeclaration1174 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_destructuringDeclaration_in_destructuringDeclaration1177 = frozenset([43, 85, 95])
    FOLLOW_LT_in_destructuringDeclaration1183 = frozenset([43, 85, 95])
    FOLLOW_85_in_destructuringDeclaration1187 = frozenset([43, 95])
    FOLLOW_LT_in_destructuringDeclaration1189 = frozenset([43, 95])
    FOLLOW_95_in_destructuringDeclaration1194 = frozenset([1])
    FOLLOW_identifier_in_variableDeclarationNoIn1217 = frozenset([1, 43, 80])
    FOLLOW_LT_in_variableDeclarationNoIn1220 = frozenset([43, 80])
    FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1223 = frozenset([1])
    FOLLOW_94_in_variableDeclarationNoIn1243 = frozenset([43, 47, 85, 87, 88, 89, 93, 95, 101, 110, 153, 154])
    FOLLOW_LT_in_variableDeclarationNoIn1245 = frozenset([43, 47, 85, 87, 88, 89, 93, 95, 101, 110, 153, 154])
    FOLLOW_identifier_in_variableDeclarationNoIn1248 = frozenset([43, 85, 95])
    FOLLOW_LT_in_variableDeclarationNoIn1252 = frozenset([43, 85])
    FOLLOW_85_in_variableDeclarationNoIn1255 = frozenset([43, 47, 85, 87, 88, 89, 93, 95, 101, 110, 153, 154])
    FOLLOW_LT_in_variableDeclarationNoIn1258 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_variableDeclarationNoIn1261 = frozenset([43, 85, 95])
    FOLLOW_LT_in_variableDeclarationNoIn1267 = frozenset([43, 85, 95])
    FOLLOW_85_in_variableDeclarationNoIn1271 = frozenset([43, 95])
    FOLLOW_LT_in_variableDeclarationNoIn1273 = frozenset([43, 95])
    FOLLOW_95_in_variableDeclarationNoIn1278 = frozenset([1, 43, 80])
    FOLLOW_LT_in_variableDeclarationNoIn1281 = frozenset([43, 80])
    FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1284 = frozenset([1])
    FOLLOW_80_in_initialiser1316 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_initialiser1318 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_initialiser1321 = frozenset([1])
    FOLLOW_80_in_initialiserNoIn1339 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_initialiserNoIn1341 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1344 = frozenset([1])
    FOLLOW_74_in_emptyStatement1362 = frozenset([1])
    FOLLOW_expression_in_expressionStatement1375 = frozenset([43, 74])
    FOLLOW_set_in_expressionStatement1377 = frozenset([1])
    FOLLOW_96_in_ifStatement1396 = frozenset([43, 84])
    FOLLOW_LT_in_ifStatement1398 = frozenset([43, 84])
    FOLLOW_84_in_ifStatement1401 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_ifStatement1403 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_ifStatement1406 = frozenset([43, 86])
    FOLLOW_LT_in_ifStatement1408 = frozenset([43, 86])
    FOLLOW_86_in_ifStatement1411 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_ifStatement1413 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_ifStatement1416 = frozenset([1, 43, 97])
    FOLLOW_LT_in_ifStatement1419 = frozenset([43, 97])
    FOLLOW_97_in_ifStatement1422 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_ifStatement1424 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_ifStatement1427 = frozenset([1])
    FOLLOW_doWhileStatement_in_iterationStatement1462 = frozenset([1])
    FOLLOW_whileStatement_in_iterationStatement1467 = frozenset([1])
    FOLLOW_forStatement_in_iterationStatement1472 = frozenset([1])
    FOLLOW_forInStatement_in_iterationStatement1477 = frozenset([1])
    FOLLOW_98_in_doWhileStatement1489 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_doWhileStatement1491 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_doWhileStatement1494 = frozenset([43, 99])
    FOLLOW_LT_in_doWhileStatement1496 = frozenset([43, 99])
    FOLLOW_99_in_doWhileStatement1499 = frozenset([43, 84])
    FOLLOW_LT_in_doWhileStatement1501 = frozenset([43, 84])
    FOLLOW_84_in_doWhileStatement1504 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_doWhileStatement1506 = frozenset([86])
    FOLLOW_86_in_doWhileStatement1508 = frozenset([43, 74])
    FOLLOW_LT_in_doWhileStatement1511 = frozenset([1])
    FOLLOW_74_in_doWhileStatement1515 = frozenset([1])
    FOLLOW_99_in_whileStatement1556 = frozenset([43, 84])
    FOLLOW_LT_in_whileStatement1558 = frozenset([43, 84])
    FOLLOW_84_in_whileStatement1561 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_whileStatement1563 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_whileStatement1566 = frozenset([43, 86])
    FOLLOW_LT_in_whileStatement1568 = frozenset([43, 86])
    FOLLOW_86_in_whileStatement1571 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_whileStatement1573 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_whileStatement1576 = frozenset([1])
    FOLLOW_100_in_forStatement1606 = frozenset([43, 84])
    FOLLOW_LT_in_forStatement1608 = frozenset([43, 84])
    FOLLOW_84_in_forStatement1611 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 91, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_forStatement1614 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 91, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_forStatementInitialiserPart_in_forStatement1617 = frozenset([43, 74])
    FOLLOW_LT_in_forStatement1621 = frozenset([43, 74])
    FOLLOW_74_in_forStatement1624 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_forStatement1627 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_forStatement1632 = frozenset([43, 74])
    FOLLOW_LT_in_forStatement1636 = frozenset([43, 74])
    FOLLOW_74_in_forStatement1639 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 86, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_forStatement1642 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_forStatement1647 = frozenset([43, 86])
    FOLLOW_LT_in_forStatement1651 = frozenset([43, 86])
    FOLLOW_86_in_forStatement1654 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_forStatement1656 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_forStatement1661 = frozenset([1])
    FOLLOW_expressionNoIn_in_forStatementInitialiserPart1717 = frozenset([1])
    FOLLOW_91_in_forStatementInitialiserPart1725 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_93_in_forStatementInitialiserPart1729 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_forStatementInitialiserPart1732 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1735 = frozenset([1])
    FOLLOW_100_in_forInStatement1760 = frozenset([43, 84, 101])
    FOLLOW_LT_in_forInStatement1762 = frozenset([43, 84, 101])
    FOLLOW_101_in_forInStatement1765 = frozenset([43, 84])
    FOLLOW_LT_in_forInStatement1768 = frozenset([43, 84])
    FOLLOW_84_in_forInStatement1771 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 91, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_forInStatement1773 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 91, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_forInStatementInitialiserPart_in_forInStatement1776 = frozenset([43, 102])
    FOLLOW_LT_in_forInStatement1778 = frozenset([43, 102])
    FOLLOW_102_in_forInStatement1781 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_forInStatement1783 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_forInStatement1786 = frozenset([43, 86])
    FOLLOW_LT_in_forInStatement1788 = frozenset([43, 86])
    FOLLOW_86_in_forInStatement1791 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_forInStatement1793 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_forInStatement1796 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1828 = frozenset([1])
    FOLLOW_91_in_forInStatementInitialiserPart1836 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_93_in_forInStatementInitialiserPart1840 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_forInStatementInitialiserPart1843 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1846 = frozenset([1])
    FOLLOW_103_in_continueStatement1870 = frozenset([43, 47, 74, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_continueStatement1872 = frozenset([43, 74])
    FOLLOW_set_in_continueStatement1875 = frozenset([1])
    FOLLOW_104_in_breakStatement1893 = frozenset([43, 47, 74, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_breakStatement1895 = frozenset([43, 74])
    FOLLOW_set_in_breakStatement1898 = frozenset([1])
    FOLLOW_90_in_returnStatement1916 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_returnStatement1918 = frozenset([43, 74])
    FOLLOW_LT_in_returnStatement1922 = frozenset([1])
    FOLLOW_74_in_returnStatement1926 = frozenset([1])
    FOLLOW_105_in_withStatement1950 = frozenset([43, 84])
    FOLLOW_LT_in_withStatement1952 = frozenset([43, 84])
    FOLLOW_84_in_withStatement1955 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_withStatement1957 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_withStatement1960 = frozenset([43, 86])
    FOLLOW_LT_in_withStatement1962 = frozenset([43, 86])
    FOLLOW_86_in_withStatement1965 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_withStatement1967 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_withStatement1970 = frozenset([1])
    FOLLOW_93_in_letStatement1995 = frozenset([43, 84])
    FOLLOW_LT_in_letStatement1997 = frozenset([43, 84])
    FOLLOW_84_in_letStatement2000 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_letStatement2002 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationList_in_letStatement2005 = frozenset([43, 86])
    FOLLOW_LT_in_letStatement2007 = frozenset([43, 86])
    FOLLOW_86_in_letStatement2010 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_letStatement2012 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_letStatement2015 = frozenset([1])
    FOLLOW_identifier_in_labelledStatement2048 = frozenset([43, 78])
    FOLLOW_LT_in_labelledStatement2050 = frozenset([1])
    FOLLOW_78_in_labelledStatement2054 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_labelledStatement2056 = frozenset([1])
    FOLLOW_statement_in_labelledStatement2060 = frozenset([1])
    FOLLOW_106_in_switchStatement2072 = frozenset([43, 84])
    FOLLOW_LT_in_switchStatement2074 = frozenset([43, 84])
    FOLLOW_84_in_switchStatement2077 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_switchStatement2079 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_switchStatement2082 = frozenset([43, 86])
    FOLLOW_LT_in_switchStatement2084 = frozenset([43, 86])
    FOLLOW_86_in_switchStatement2087 = frozenset([43, 81])
    FOLLOW_LT_in_switchStatement2089 = frozenset([43, 81])
    FOLLOW_caseBlock_in_switchStatement2092 = frozenset([1])
    FOLLOW_81_in_caseBlock2132 = frozenset([43, 82, 87, 107])
    FOLLOW_LT_in_caseBlock2135 = frozenset([43, 107])
    FOLLOW_caseClause_in_caseBlock2138 = frozenset([43, 82, 87, 107])
    FOLLOW_LT_in_caseBlock2143 = frozenset([43, 87])
    FOLLOW_defaultClause_in_caseBlock2146 = frozenset([43, 82, 107])
    FOLLOW_LT_in_caseBlock2149 = frozenset([43, 107])
    FOLLOW_caseClause_in_caseBlock2152 = frozenset([43, 82, 107])
    FOLLOW_LT_in_caseBlock2158 = frozenset([43, 82])
    FOLLOW_82_in_caseBlock2161 = frozenset([1])
    FOLLOW_107_in_caseClause2183 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_caseClause2185 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_caseClause2188 = frozenset([43, 78])
    FOLLOW_LT_in_caseClause2190 = frozenset([43, 78])
    FOLLOW_78_in_caseClause2193 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_caseClause2195 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statementList_in_caseClause2198 = frozenset([1])
    FOLLOW_87_in_defaultClause2229 = frozenset([43, 78])
    FOLLOW_LT_in_defaultClause2231 = frozenset([43, 78])
    FOLLOW_78_in_defaultClause2234 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_defaultClause2236 = frozenset([1, 43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statementList_in_defaultClause2239 = frozenset([1])
    FOLLOW_108_in_throwStatement2262 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_throwStatement2264 = frozenset([43, 74])
    FOLLOW_set_in_throwStatement2266 = frozenset([1])
    FOLLOW_109_in_tryStatement2284 = frozenset([43, 81])
    FOLLOW_LT_in_tryStatement2286 = frozenset([1])
    FOLLOW_statementBlock_in_tryStatement2290 = frozenset([43, 111, 112])
    FOLLOW_LT_in_tryStatement2292 = frozenset([1])
    FOLLOW_finallyClause_in_tryStatement2297 = frozenset([1])
    FOLLOW_catchClause_in_tryStatement2301 = frozenset([1, 43, 112])
    FOLLOW_LT_in_tryStatement2304 = frozenset([43, 112])
    FOLLOW_finallyClause_in_tryStatement2308 = frozenset([1])
    FOLLOW_110_in_yieldStatement2322 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_yieldStatement2324 = frozenset([1])
    FOLLOW_expression_in_yieldStatement2328 = frozenset([43, 74])
    FOLLOW_set_in_yieldStatement2330 = frozenset([1])
    FOLLOW_111_in_catchClause2348 = frozenset([43, 84])
    FOLLOW_LT_in_catchClause2350 = frozenset([43, 84])
    FOLLOW_84_in_catchClause2353 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_catchClause2355 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_catchClause2358 = frozenset([43, 86, 96])
    FOLLOW_LT_in_catchClause2360 = frozenset([43, 86, 96])
    FOLLOW_96_in_catchClause2364 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_catchClause2366 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_catchClause2369 = frozenset([43, 86])
    FOLLOW_LT_in_catchClause2371 = frozenset([43, 86])
    FOLLOW_86_in_catchClause2376 = frozenset([43, 81])
    FOLLOW_LT_in_catchClause2378 = frozenset([43, 81])
    FOLLOW_statementBlock_in_catchClause2381 = frozenset([1])
    FOLLOW_112_in_finallyClause2412 = frozenset([43, 81])
    FOLLOW_LT_in_finallyClause2414 = frozenset([1])
    FOLLOW_statementBlock_in_finallyClause2418 = frozenset([1])
    FOLLOW_assignmentExpression_in_expression2430 = frozenset([1, 43, 85])
    FOLLOW_LT_in_expression2433 = frozenset([43, 85])
    FOLLOW_85_in_expression2437 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_expression2440 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_expression2444 = frozenset([1, 43, 85])
    FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2458 = frozenset([1, 43, 85])
    FOLLOW_LT_in_expressionNoIn2461 = frozenset([43, 85])
    FOLLOW_85_in_expressionNoIn2465 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_expressionNoIn2468 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2472 = frozenset([1, 43, 85])
    FOLLOW_leftHandSideExpression_in_assignmentExpression2486 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_LT_in_assignmentExpression2488 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_assignmentOperator_in_assignmentExpression2491 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_assignmentExpression2493 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_assignmentExpression2496 = frozenset([1])
    FOLLOW_93_in_assignmentExpression2517 = frozenset([43, 84])
    FOLLOW_LT_in_assignmentExpression2519 = frozenset([43, 84])
    FOLLOW_84_in_assignmentExpression2522 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_assignmentExpression2524 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationList_in_assignmentExpression2527 = frozenset([43, 86])
    FOLLOW_LT_in_assignmentExpression2529 = frozenset([43, 86])
    FOLLOW_86_in_assignmentExpression2532 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_assignmentExpression2534 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_assignmentExpression2537 = frozenset([1])
    FOLLOW_conditionalExpression_in_assignmentExpression2566 = frozenset([43, 100])
    FOLLOW_LT_in_assignmentExpression2568 = frozenset([43, 100])
    FOLLOW_100_in_assignmentExpression2571 = frozenset([43, 84])
    FOLLOW_LT_in_assignmentExpression2573 = frozenset([43, 84])
    FOLLOW_84_in_assignmentExpression2576 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_assignmentExpression2578 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_assignmentExpression2581 = frozenset([43, 102])
    FOLLOW_LT_in_assignmentExpression2583 = frozenset([43, 102])
    FOLLOW_102_in_assignmentExpression2586 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_assignmentExpression2588 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_assignmentExpression2593 = frozenset([43, 86])
    FOLLOW_LT_in_assignmentExpression2595 = frozenset([43, 86])
    FOLLOW_86_in_assignmentExpression2598 = frozenset([1, 96])
    FOLLOW_96_in_assignmentExpression2601 = frozenset([43, 84])
    FOLLOW_LT_in_assignmentExpression2603 = frozenset([43, 84])
    FOLLOW_84_in_assignmentExpression2606 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_assignmentExpression2608 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_assignmentExpression2613 = frozenset([43, 86])
    FOLLOW_LT_in_assignmentExpression2615 = frozenset([43, 86])
    FOLLOW_86_in_assignmentExpression2618 = frozenset([1])
    FOLLOW_conditionalExpression_in_assignmentExpression2656 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2668 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_LT_in_assignmentExpressionNoIn2670 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2673 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_assignmentExpressionNoIn2675 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2678 = frozenset([1])
    FOLLOW_93_in_assignmentExpressionNoIn2699 = frozenset([43, 84])
    FOLLOW_LT_in_assignmentExpressionNoIn2701 = frozenset([43, 84])
    FOLLOW_84_in_assignmentExpressionNoIn2704 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_assignmentExpressionNoIn2706 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationList_in_assignmentExpressionNoIn2709 = frozenset([43, 86])
    FOLLOW_LT_in_assignmentExpressionNoIn2711 = frozenset([43, 86])
    FOLLOW_86_in_assignmentExpressionNoIn2714 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_assignmentExpressionNoIn2716 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2719 = frozenset([1])
    FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2746 = frozenset([1])
    FOLLOW_callExpression_in_leftHandSideExpression2758 = frozenset([1])
    FOLLOW_newExpression_in_leftHandSideExpression2763 = frozenset([1])
    FOLLOW_memberExpression_in_newExpression2775 = frozenset([1])
    FOLLOW_113_in_newExpression2780 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_newExpression2782 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_newExpression_in_newExpression2785 = frozenset([1])
    FOLLOW_primaryExpression_in_memberExpression2807 = frozenset([1, 43, 78, 94, 114])
    FOLLOW_LT_in_memberExpression2810 = frozenset([43, 78, 94, 114])
    FOLLOW_memberExpressionSuffix_in_memberExpression2813 = frozenset([1, 43, 78, 94, 114])
    FOLLOW_functionExpression_in_memberExpression2833 = frozenset([1, 43, 78, 94, 114])
    FOLLOW_LT_in_memberExpression2836 = frozenset([43, 78, 94, 114])
    FOLLOW_memberExpressionSuffix_in_memberExpression2840 = frozenset([1, 43, 78, 94, 114])
    FOLLOW_113_in_memberExpression2847 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_memberExpression2849 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_memberExpression_in_memberExpression2852 = frozenset([43, 84])
    FOLLOW_LT_in_memberExpression2854 = frozenset([43, 84])
    FOLLOW_arguments_in_memberExpression2857 = frozenset([1, 43, 78, 94, 114])
    FOLLOW_LT_in_memberExpression2860 = frozenset([43, 78, 94, 114])
    FOLLOW_memberExpressionSuffix_in_memberExpression2863 = frozenset([1, 43, 78, 94, 114])
    FOLLOW_indexSuffix_in_memberExpressionSuffix2900 = frozenset([1])
    FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2905 = frozenset([1])
    FOLLOW_descendentSuffix_in_memberExpressionSuffix2910 = frozenset([1])
    FOLLOW_namespaceSuffix_in_memberExpressionSuffix2916 = frozenset([1])
    FOLLOW_memberExpression_in_callExpression2931 = frozenset([43, 84, 114])
    FOLLOW_LT_in_callExpression2933 = frozenset([43, 84, 114])
    FOLLOW_114_in_callExpression2936 = frozenset([43, 84])
    FOLLOW_LT_in_callExpression2939 = frozenset([43, 84])
    FOLLOW_arguments_in_callExpression2942 = frozenset([1, 43, 78, 84, 94, 114])
    FOLLOW_LT_in_callExpression2945 = frozenset([43, 78, 84, 94, 114])
    FOLLOW_callExpressionSuffix_in_callExpression2948 = frozenset([1, 43, 78, 84, 94, 114])
    FOLLOW_arguments_in_callExpressionSuffix2977 = frozenset([1])
    FOLLOW_indexSuffix_in_callExpressionSuffix2982 = frozenset([1])
    FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2987 = frozenset([1])
    FOLLOW_descendentSuffix_in_callExpressionSuffix2992 = frozenset([1])
    FOLLOW_namespaceSuffix_in_callExpressionSuffix2998 = frozenset([1])
    FOLLOW_84_in_arguments3013 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 86, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_arguments3016 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_arguments3019 = frozenset([43, 85, 86])
    FOLLOW_LT_in_arguments3021 = frozenset([43, 85, 86])
    FOLLOW_85_in_arguments3025 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_arguments3027 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_arguments3030 = frozenset([43, 85, 86])
    FOLLOW_LT_in_arguments3032 = frozenset([43, 85, 86])
    FOLLOW_LT_in_arguments3039 = frozenset([43, 86])
    FOLLOW_86_in_arguments3042 = frozenset([1])
    FOLLOW_94_in_indexSuffix3065 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_indexSuffix3067 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_indexSuffix3070 = frozenset([43, 95])
    FOLLOW_LT_in_indexSuffix3072 = frozenset([43, 95])
    FOLLOW_95_in_indexSuffix3075 = frozenset([1])
    FOLLOW_114_in_propertyReferenceSuffix3098 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 115, 153, 154])
    FOLLOW_LT_in_propertyReferenceSuffix3100 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 115, 153, 154])
    FOLLOW_e4xIdentifier_in_propertyReferenceSuffix3103 = frozenset([1])
    FOLLOW_114_in_descendentSuffix3124 = frozenset([114])
    FOLLOW_114_in_descendentSuffix3126 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 115, 153, 154])
    FOLLOW_LT_in_descendentSuffix3128 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 115, 153, 154])
    FOLLOW_e4xIdentifier_in_descendentSuffix3131 = frozenset([1])
    FOLLOW_78_in_namespaceSuffix3152 = frozenset([78])
    FOLLOW_78_in_namespaceSuffix3154 = frozenset([1, 43, 47, 87, 88, 89, 93, 101, 110, 115, 153, 154])
    FOLLOW_LT_in_namespaceSuffix3156 = frozenset([1, 43, 47, 87, 88, 89, 93, 101, 110, 115, 153, 154])
    FOLLOW_e4xIdentifier_in_namespaceSuffix3159 = frozenset([1])
    FOLLOW_identifier_in_e4xIdentifier3182 = frozenset([1])
    FOLLOW_115_in_e4xIdentifier3187 = frozenset([1])
    FOLLOW_set_in_assignmentOperator0 = frozenset([1])
    FOLLOW_logicalORExpression_in_conditionalExpression3254 = frozenset([1, 43, 127])
    FOLLOW_LT_in_conditionalExpression3257 = frozenset([43, 127])
    FOLLOW_127_in_conditionalExpression3261 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_conditionalExpression3263 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_conditionalExpression3267 = frozenset([43, 78])
    FOLLOW_LT_in_conditionalExpression3269 = frozenset([43, 78])
    FOLLOW_78_in_conditionalExpression3273 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_conditionalExpression3275 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_conditionalExpression3279 = frozenset([1])
    FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3292 = frozenset([1, 43, 127])
    FOLLOW_LT_in_conditionalExpressionNoIn3295 = frozenset([43, 127])
    FOLLOW_127_in_conditionalExpressionNoIn3299 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_conditionalExpressionNoIn3301 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3305 = frozenset([43, 78])
    FOLLOW_LT_in_conditionalExpressionNoIn3307 = frozenset([43, 78])
    FOLLOW_78_in_conditionalExpressionNoIn3311 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_conditionalExpressionNoIn3313 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3317 = frozenset([1])
    FOLLOW_logicalANDExpression_in_logicalORExpression3330 = frozenset([1, 43, 128])
    FOLLOW_LT_in_logicalORExpression3333 = frozenset([43, 128])
    FOLLOW_128_in_logicalORExpression3337 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_logicalORExpression3339 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_logicalANDExpression_in_logicalORExpression3343 = frozenset([1, 43, 128])
    FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3357 = frozenset([1, 43, 128])
    FOLLOW_LT_in_logicalORExpressionNoIn3360 = frozenset([43, 128])
    FOLLOW_128_in_logicalORExpressionNoIn3364 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_logicalORExpressionNoIn3366 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3370 = frozenset([1, 43, 128])
    FOLLOW_bitwiseORExpression_in_logicalANDExpression3384 = frozenset([1, 43, 129])
    FOLLOW_LT_in_logicalANDExpression3387 = frozenset([43, 129])
    FOLLOW_129_in_logicalANDExpression3391 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_logicalANDExpression3393 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseORExpression_in_logicalANDExpression3397 = frozenset([1, 43, 129])
    FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3411 = frozenset([1, 43, 129])
    FOLLOW_LT_in_logicalANDExpressionNoIn3414 = frozenset([43, 129])
    FOLLOW_129_in_logicalANDExpressionNoIn3418 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_logicalANDExpressionNoIn3420 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3424 = frozenset([1, 43, 129])
    FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3438 = frozenset([1, 43, 130])
    FOLLOW_LT_in_bitwiseORExpression3441 = frozenset([43, 130])
    FOLLOW_130_in_bitwiseORExpression3445 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_bitwiseORExpression3447 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3451 = frozenset([1, 43, 130])
    FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3465 = frozenset([1, 43, 130])
    FOLLOW_LT_in_bitwiseORExpressionNoIn3468 = frozenset([43, 130])
    FOLLOW_130_in_bitwiseORExpressionNoIn3472 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_bitwiseORExpressionNoIn3474 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3478 = frozenset([1, 43, 130])
    FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3492 = frozenset([1, 43, 131])
    FOLLOW_LT_in_bitwiseXORExpression3495 = frozenset([43, 131])
    FOLLOW_131_in_bitwiseXORExpression3499 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_bitwiseXORExpression3501 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3505 = frozenset([1, 43, 131])
    FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3519 = frozenset([1, 43, 131])
    FOLLOW_LT_in_bitwiseXORExpressionNoIn3522 = frozenset([43, 131])
    FOLLOW_131_in_bitwiseXORExpressionNoIn3526 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_bitwiseXORExpressionNoIn3528 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3532 = frozenset([1, 43, 131])
    FOLLOW_equalityExpression_in_bitwiseANDExpression3546 = frozenset([1, 43, 132])
    FOLLOW_LT_in_bitwiseANDExpression3549 = frozenset([43, 132])
    FOLLOW_132_in_bitwiseANDExpression3553 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_bitwiseANDExpression3555 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_equalityExpression_in_bitwiseANDExpression3559 = frozenset([1, 43, 132])
    FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3573 = frozenset([1, 43, 132])
    FOLLOW_LT_in_bitwiseANDExpressionNoIn3576 = frozenset([43, 132])
    FOLLOW_132_in_bitwiseANDExpressionNoIn3580 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_bitwiseANDExpressionNoIn3582 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3586 = frozenset([1, 43, 132])
    FOLLOW_relationalExpression_in_equalityExpression3600 = frozenset([1, 43, 133, 134, 135, 136])
    FOLLOW_LT_in_equalityExpression3603 = frozenset([43, 133, 134, 135, 136])
    FOLLOW_set_in_equalityExpression3607 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_equalityExpression3623 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_relationalExpression_in_equalityExpression3627 = frozenset([1, 43, 133, 134, 135, 136])
    FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3640 = frozenset([1, 43, 133, 134, 135, 136])
    FOLLOW_LT_in_equalityExpressionNoIn3643 = frozenset([43, 133, 134, 135, 136])
    FOLLOW_set_in_equalityExpressionNoIn3647 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_equalityExpressionNoIn3663 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3667 = frozenset([1, 43, 133, 134, 135, 136])
    FOLLOW_shiftExpression_in_relationalExpression3681 = frozenset([1, 43, 75, 76, 102, 137, 138, 139])
    FOLLOW_LT_in_relationalExpression3684 = frozenset([43, 75, 76, 102, 137, 138, 139])
    FOLLOW_set_in_relationalExpression3688 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_relationalExpression3712 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_shiftExpression_in_relationalExpression3716 = frozenset([1, 43, 75, 76, 102, 137, 138, 139])
    FOLLOW_shiftExpression_in_relationalExpressionNoIn3729 = frozenset([1, 43, 75, 76, 137, 138, 139])
    FOLLOW_LT_in_relationalExpressionNoIn3732 = frozenset([43, 75, 76, 137, 138, 139])
    FOLLOW_set_in_relationalExpressionNoIn3736 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_relationalExpressionNoIn3756 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_shiftExpression_in_relationalExpressionNoIn3760 = frozenset([1, 43, 75, 76, 137, 138, 139])
    FOLLOW_additiveExpression_in_shiftExpression3773 = frozenset([1, 43, 140, 141, 142])
    FOLLOW_LT_in_shiftExpression3776 = frozenset([43, 140, 141, 142])
    FOLLOW_set_in_shiftExpression3780 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_shiftExpression3792 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_additiveExpression_in_shiftExpression3796 = frozenset([1, 43, 140, 141, 142])
    FOLLOW_multiplicativeExpression_in_additiveExpression3809 = frozenset([1, 43, 79, 143])
    FOLLOW_LT_in_additiveExpression3812 = frozenset([43, 79, 143])
    FOLLOW_set_in_additiveExpression3816 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_additiveExpression3824 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_multiplicativeExpression_in_additiveExpression3828 = frozenset([1, 43, 79, 143])
    FOLLOW_unaryExpression_in_multiplicativeExpression3841 = frozenset([1, 43, 77, 115, 144])
    FOLLOW_LT_in_multiplicativeExpression3844 = frozenset([43, 77, 115, 144])
    FOLLOW_set_in_multiplicativeExpression3848 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_multiplicativeExpression3860 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_unaryExpression_in_multiplicativeExpression3864 = frozenset([1, 43, 77, 115, 144])
    FOLLOW_postfixExpression_in_unaryExpression3877 = frozenset([1])
    FOLLOW_set_in_unaryExpression3882 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_unaryExpression_in_unaryExpression3918 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_postfixExpression3930 = frozenset([1, 148, 149])
    FOLLOW_set_in_postfixExpression3932 = frozenset([1])
    FOLLOW_152_in_primaryExpression3950 = frozenset([1])
    FOLLOW_xmlLiteral_in_primaryExpression3967 = frozenset([1])
    FOLLOW_identifier_in_primaryExpression3972 = frozenset([1])
    FOLLOW_literal_in_primaryExpression3987 = frozenset([1])
    FOLLOW_arrayLiteral_in_primaryExpression3992 = frozenset([1])
    FOLLOW_objectLiteral_in_primaryExpression3997 = frozenset([1])
    FOLLOW_84_in_primaryExpression4002 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_primaryExpression4004 = frozenset([1])
    FOLLOW_expression_in_primaryExpression4008 = frozenset([43, 86])
    FOLLOW_LT_in_primaryExpression4010 = frozenset([1])
    FOLLOW_86_in_primaryExpression4014 = frozenset([1])
    FOLLOW_94_in_arrayLiteral4027 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 85, 87, 88, 89, 93, 94, 95, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_arrayLiteral4029 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 85, 87, 88, 89, 93, 94, 95, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_arrayLiteral4032 = frozenset([43, 85, 95])
    FOLLOW_LT_in_arrayLiteral4036 = frozenset([43, 85])
    FOLLOW_85_in_arrayLiteral4039 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 85, 87, 88, 89, 93, 94, 95, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_arrayLiteral4042 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_arrayLiteral4045 = frozenset([43, 85, 95])
    FOLLOW_LT_in_arrayLiteral4051 = frozenset([43, 85, 95])
    FOLLOW_85_in_arrayLiteral4055 = frozenset([43, 95])
    FOLLOW_LT_in_arrayLiteral4057 = frozenset([43, 95])
    FOLLOW_95_in_arrayLiteral4062 = frozenset([1])
    FOLLOW_94_in_arrayLiteral4078 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_arrayLiteral4080 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_arrayLiteral4085 = frozenset([43, 100])
    FOLLOW_LT_in_arrayLiteral4087 = frozenset([43, 100])
    FOLLOW_100_in_arrayLiteral4090 = frozenset([43, 84, 101])
    FOLLOW_LT_in_arrayLiteral4092 = frozenset([43, 84, 101])
    FOLLOW_101_in_arrayLiteral4095 = frozenset([43, 84])
    FOLLOW_LT_in_arrayLiteral4098 = frozenset([43, 84])
    FOLLOW_84_in_arrayLiteral4101 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 91, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_arrayLiteral4103 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 81, 83, 84, 87, 88, 89, 91, 93, 94, 101, 110, 113, 152, 153, 154, 155, 156, 157])
    FOLLOW_forInStatementInitialiserPart_in_arrayLiteral4108 = frozenset([43, 102])
    FOLLOW_LT_in_arrayLiteral4110 = frozenset([43, 102])
    FOLLOW_102_in_arrayLiteral4113 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_arrayLiteral4115 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_arrayLiteral4120 = frozenset([43, 86])
    FOLLOW_LT_in_arrayLiteral4122 = frozenset([43, 86])
    FOLLOW_86_in_arrayLiteral4125 = frozenset([43, 95])
    FOLLOW_LT_in_arrayLiteral4127 = frozenset([43, 95])
    FOLLOW_95_in_arrayLiteral4130 = frozenset([1])
    FOLLOW_81_in_objectLiteral4166 = frozenset([43, 44, 46, 47, 82, 85, 87, 88, 89, 93, 101, 110, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_objectLiteral4168 = frozenset([43, 44, 46, 47, 82, 85, 87, 88, 89, 93, 101, 110, 153, 154, 155, 156, 157])
    FOLLOW_propertyNameAndValue_in_objectLiteral4171 = frozenset([43, 82, 85])
    FOLLOW_LT_in_objectLiteral4175 = frozenset([43, 85])
    FOLLOW_85_in_objectLiteral4178 = frozenset([43, 44, 46, 47, 87, 88, 89, 93, 101, 110, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_objectLiteral4180 = frozenset([43, 44, 46, 47, 87, 88, 89, 93, 101, 110, 153, 154, 155, 156, 157])
    FOLLOW_propertyNameAndValue_in_objectLiteral4183 = frozenset([43, 82, 85])
    FOLLOW_LT_in_objectLiteral4187 = frozenset([43, 82, 85])
    FOLLOW_85_in_objectLiteral4191 = frozenset([43, 82])
    FOLLOW_LT_in_objectLiteral4193 = frozenset([43, 82])
    FOLLOW_82_in_objectLiteral4198 = frozenset([1])
    FOLLOW_propertyName_in_propertyNameAndValue4222 = frozenset([43, 78])
    FOLLOW_LT_in_propertyNameAndValue4224 = frozenset([43, 78])
    FOLLOW_78_in_propertyNameAndValue4227 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_propertyNameAndValue4229 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_propertyNameAndValue4232 = frozenset([1])
    FOLLOW_153_in_propertyNameAndValue4254 = frozenset([47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_154_in_propertyNameAndValue4258 = frozenset([47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_propertyNameAndValue4263 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_propertyNameAndValue4265 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_propertyNameAndValue4270 = frozenset([43, 84])
    FOLLOW_LT_in_propertyNameAndValue4272 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_propertyNameAndValue4275 = frozenset([43, 81])
    FOLLOW_LT_in_propertyNameAndValue4277 = frozenset([43, 81])
    FOLLOW_statementBlock_in_propertyNameAndValue4280 = frozenset([1])
    FOLLOW_153_in_propertyNameAndValue4313 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_154_in_propertyNameAndValue4317 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_propertyNameAndValue4320 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_propertyNameAndValue4325 = frozenset([43, 84])
    FOLLOW_LT_in_propertyNameAndValue4327 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_propertyNameAndValue4330 = frozenset([43, 81])
    FOLLOW_LT_in_propertyNameAndValue4332 = frozenset([43, 81])
    FOLLOW_statementBlock_in_propertyNameAndValue4335 = frozenset([1])
    FOLLOW_identifier_in_propertyName4370 = frozenset([1])
    FOLLOW_literalNoRegex_in_propertyName4375 = frozenset([1])
    FOLLOW_literalNoRegex_in_literal4387 = frozenset([1])
    FOLLOW_regularExpressionLiteral_in_literal4392 = frozenset([1])
    FOLLOW_155_in_literalNoRegex4411 = frozenset([1])
    FOLLOW_156_in_literalNoRegex4420 = frozenset([1])
    FOLLOW_157_in_literalNoRegex4429 = frozenset([1])
    FOLLOW_StringLiteral_in_literalNoRegex4438 = frozenset([1])
    FOLLOW_NumericLiteral_in_literalNoRegex4451 = frozenset([1])
    FOLLOW_set_in_reFirstChar0 = frozenset([1])
    FOLLOW_reFirstChar_in_reChars4852 = frozenset([1])
    FOLLOW_115_in_reChars4857 = frozenset([1])
    FOLLOW_77_in_regularExpressionLiteral4871 = frozenset([44, 46, 47, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158])
    FOLLOW_reFirstChar_in_regularExpressionLiteral4873 = frozenset([44, 46, 47, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158])
    FOLLOW_reChars_in_regularExpressionLiteral4876 = frozenset([44, 46, 47, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158])
    FOLLOW_77_in_regularExpressionLiteral4879 = frozenset([1, 47])
    FOLLOW_Identifier_in_regularExpressionLiteral4881 = frozenset([1])
    FOLLOW_RegularExpressionHacks_in_regularExpressionLiteral4887 = frozenset([1, 47])
    FOLLOW_Identifier_in_regularExpressionLiteral4889 = frozenset([1])
    FOLLOW_set_in_identifier0 = frozenset([1])
    FOLLOW_LT_in_synpred1204 = frozenset([1])
    FOLLOW_LT_in_synpred3237 = frozenset([1])
    FOLLOW_LT_in_synpred7273 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_81_in_synpred19489 = frozenset([1])
    FOLLOW_xmlEmptyTag_in_synpred21539 = frozenset([1])
    FOLLOW_xmlStartTag_in_synpred22544 = frozenset([1])
    FOLLOW_LT_in_synpred25567 = frozenset([43, 45, 75, 81])
    FOLLOW_xmlPayload_in_synpred25570 = frozenset([1])
    FOLLOW_83_in_synpred29585 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_synpred29587 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_synpred29590 = frozenset([43, 84])
    FOLLOW_LT_in_synpred29592 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_synpred29595 = frozenset([43, 81])
    FOLLOW_LT_in_synpred29597 = frozenset([43, 81])
    FOLLOW_statementBlock_in_synpred29600 = frozenset([1])
    FOLLOW_83_in_synpred32627 = frozenset([43, 84])
    FOLLOW_LT_in_synpred32629 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_synpred32632 = frozenset([43, 81])
    FOLLOW_LT_in_synpred32634 = frozenset([43, 81])
    FOLLOW_statementBlock_in_synpred32637 = frozenset([1])
    FOLLOW_LT_in_synpred35675 = frozenset([1])
    FOLLOW_83_in_synpred36663 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_synpred36665 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_synpred36668 = frozenset([43, 84])
    FOLLOW_LT_in_synpred36670 = frozenset([43, 84])
    FOLLOW_formalParameterList_in_synpred36673 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred36675 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred36678 = frozenset([1])
    FOLLOW_LT_in_synpred38712 = frozenset([1])
    FOLLOW_statementBlock_in_synpred45797 = frozenset([1])
    FOLLOW_variableStatement_in_synpred46802 = frozenset([1])
    FOLLOW_expressionStatement_in_synpred48812 = frozenset([1])
    FOLLOW_letStatement_in_synpred55847 = frozenset([1])
    FOLLOW_labelledStatement_in_synpred56852 = frozenset([1])
    FOLLOW_yieldStatement_in_synpred60872 = frozenset([1])
    FOLLOW_LT_in_synpred64933 = frozenset([1])
    FOLLOW_81_in_synpred67931 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred67933 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statementList_in_synpred67936 = frozenset([43, 82])
    FOLLOW_LT_in_synpred67939 = frozenset([43, 82])
    FOLLOW_82_in_synpred67942 = frozenset([1])
    FOLLOW_LT_in_synpred69999 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred70999 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_synpred701003 = frozenset([1])
    FOLLOW_LT_in_synpred841161 = frozenset([1])
    FOLLOW_LT_in_synpred891168 = frozenset([43, 85])
    FOLLOW_85_in_synpred891171 = frozenset([1, 43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_synpred891174 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_destructuringDeclaration_in_synpred891177 = frozenset([1])
    FOLLOW_LT_in_synpred961245 = frozenset([1])
    FOLLOW_LT_in_synpred1011252 = frozenset([43, 85])
    FOLLOW_85_in_synpred1011255 = frozenset([1, 43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_synpred1011258 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_synpred1011261 = frozenset([1])
    FOLLOW_LT_in_synpred1071318 = frozenset([1])
    FOLLOW_LT_in_synpred1081341 = frozenset([1])
    FOLLOW_LT_in_synpred1111403 = frozenset([1])
    FOLLOW_LT_in_synpred1131413 = frozenset([1])
    FOLLOW_LT_in_synpred1151424 = frozenset([1])
    FOLLOW_LT_in_synpred1161419 = frozenset([43, 97])
    FOLLOW_97_in_synpred1161422 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred1161424 = frozenset([43, 44, 45, 46, 47, 48, 74, 75, 77, 79, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_statement_in_synpred1161427 = frozenset([1])
    FOLLOW_forStatement_in_synpred1191472 = frozenset([1])
    FOLLOW_LT_in_synpred1201491 = frozenset([1])
    FOLLOW_LT_in_synpred1251563 = frozenset([1])
    FOLLOW_LT_in_synpred1271573 = frozenset([1])
    FOLLOW_LT_in_synpred1291614 = frozenset([1])
    FOLLOW_LT_in_synpred1321627 = frozenset([1])
    FOLLOW_LT_in_synpred1351642 = frozenset([1])
    FOLLOW_LT_in_synpred1381656 = frozenset([1])
    FOLLOW_expressionNoIn_in_synpred1391717 = frozenset([1])
    FOLLOW_LT_in_synpred1421762 = frozenset([1])
    FOLLOW_LT_in_synpred1451773 = frozenset([1])
    FOLLOW_LT_in_synpred1471783 = frozenset([1])
    FOLLOW_LT_in_synpred1491793 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_synpred1501828 = frozenset([1])
    FOLLOW_expression_in_synpred1571918 = frozenset([1])
    FOLLOW_LT_in_synpred1601957 = frozenset([1])
    FOLLOW_LT_in_synpred1621967 = frozenset([1])
    FOLLOW_LT_in_synpred1662012 = frozenset([1])
    FOLLOW_LT_in_synpred1682056 = frozenset([1])
    FOLLOW_LT_in_synpred1702079 = frozenset([1])
    FOLLOW_LT_in_synpred1802185 = frozenset([1])
    FOLLOW_LT_in_synpred1822195 = frozenset([1])
    FOLLOW_statementList_in_synpred1832198 = frozenset([1])
    FOLLOW_LT_in_synpred1852236 = frozenset([1])
    FOLLOW_LT_in_synpred1932324 = frozenset([1])
    FOLLOW_LT_in_synpred1982366 = frozenset([1])
    FOLLOW_LT_in_synpred2042440 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2072468 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2102493 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_synpred2112486 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_LT_in_synpred2112488 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_assignmentOperator_in_synpred2112491 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2112493 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred2112496 = frozenset([1])
    FOLLOW_LT_in_synpred2152534 = frozenset([1])
    FOLLOW_93_in_synpred2162517 = frozenset([43, 84])
    FOLLOW_LT_in_synpred2162519 = frozenset([43, 84])
    FOLLOW_84_in_synpred2162522 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_synpred2162524 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationList_in_synpred2162527 = frozenset([43, 86])
    FOLLOW_LT_in_synpred2162529 = frozenset([43, 86])
    FOLLOW_86_in_synpred2162532 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2162534 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred2162537 = frozenset([1])
    FOLLOW_LT_in_synpred2212588 = frozenset([1])
    FOLLOW_LT_in_synpred2242608 = frozenset([1])
    FOLLOW_conditionalExpression_in_synpred2272566 = frozenset([43, 100])
    FOLLOW_LT_in_synpred2272568 = frozenset([43, 100])
    FOLLOW_100_in_synpred2272571 = frozenset([43, 84])
    FOLLOW_LT_in_synpred2272573 = frozenset([43, 84])
    FOLLOW_84_in_synpred2272576 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_LT_in_synpred2272578 = frozenset([43, 47, 87, 88, 89, 93, 101, 110, 153, 154])
    FOLLOW_identifier_in_synpred2272581 = frozenset([43, 102])
    FOLLOW_LT_in_synpred2272583 = frozenset([43, 102])
    FOLLOW_102_in_synpred2272586 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2272588 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_synpred2272593 = frozenset([43, 86])
    FOLLOW_LT_in_synpred2272595 = frozenset([43, 86])
    FOLLOW_86_in_synpred2272598 = frozenset([1, 96])
    FOLLOW_96_in_synpred2272601 = frozenset([43, 84])
    FOLLOW_LT_in_synpred2272603 = frozenset([43, 84])
    FOLLOW_84_in_synpred2272606 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2272608 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_expression_in_synpred2272613 = frozenset([43, 86])
    FOLLOW_LT_in_synpred2272615 = frozenset([43, 86])
    FOLLOW_86_in_synpred2272618 = frozenset([1])
    FOLLOW_LT_in_synpred2292675 = frozenset([1])
    FOLLOW_leftHandSideExpression_in_synpred2302668 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_LT_in_synpred2302670 = frozenset([43, 80, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126])
    FOLLOW_assignmentOperator_in_synpred2302673 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2302675 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_synpred2302678 = frozenset([1])
    FOLLOW_LT_in_synpred2342716 = frozenset([1])
    FOLLOW_93_in_synpred2352699 = frozenset([43, 84])
    FOLLOW_LT_in_synpred2352701 = frozenset([43, 84])
    FOLLOW_84_in_synpred2352704 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_LT_in_synpred2352706 = frozenset([43, 47, 87, 88, 89, 93, 94, 101, 110, 153, 154])
    FOLLOW_variableDeclarationList_in_synpred2352709 = frozenset([43, 86])
    FOLLOW_LT_in_synpred2352711 = frozenset([43, 86])
    FOLLOW_86_in_synpred2352714 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2352716 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpressionNoIn_in_synpred2352719 = frozenset([1])
    FOLLOW_callExpression_in_synpred2362758 = frozenset([1])
    FOLLOW_memberExpression_in_synpred2372775 = frozenset([1])
    FOLLOW_LT_in_synpred2382782 = frozenset([1])
    FOLLOW_LT_in_synpred2402810 = frozenset([43, 78, 94, 114])
    FOLLOW_memberExpressionSuffix_in_synpred2402813 = frozenset([1])
    FOLLOW_LT_in_synpred2432836 = frozenset([43, 78, 94, 114])
    FOLLOW_memberExpressionSuffix_in_synpred2432840 = frozenset([1])
    FOLLOW_LT_in_synpred2452849 = frozenset([1])
    FOLLOW_LT_in_synpred2482860 = frozenset([43, 78, 94, 114])
    FOLLOW_memberExpressionSuffix_in_synpred2482863 = frozenset([1])
    FOLLOW_LT_in_synpred2522933 = frozenset([1])
    FOLLOW_LT_in_synpred2562945 = frozenset([43, 78, 84, 94, 114])
    FOLLOW_callExpressionSuffix_in_synpred2562948 = frozenset([1])
    FOLLOW_LT_in_synpred2613016 = frozenset([1])
    FOLLOW_LT_in_synpred2623021 = frozenset([1])
    FOLLOW_LT_in_synpred2633027 = frozenset([1])
    FOLLOW_LT_in_synpred2643032 = frozenset([1])
    FOLLOW_LT_in_synpred2683067 = frozenset([1])
    FOLLOW_LT_in_synpred2723156 = frozenset([1])
    FOLLOW_e4xIdentifier_in_synpred2733159 = frozenset([1])
    FOLLOW_LT_in_synpred2873263 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2893275 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2903257 = frozenset([43, 127])
    FOLLOW_127_in_synpred2903261 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2903263 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred2903267 = frozenset([43, 78])
    FOLLOW_LT_in_synpred2903269 = frozenset([43, 78])
    FOLLOW_78_in_synpred2903273 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2903275 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred2903279 = frozenset([1])
    FOLLOW_LT_in_synpred2923301 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2943313 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2973339 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2983333 = frozenset([43, 128])
    FOLLOW_128_in_synpred2983337 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred2983339 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_logicalANDExpression_in_synpred2983343 = frozenset([1])
    FOLLOW_LT_in_synpred3003366 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3033393 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3043387 = frozenset([43, 129])
    FOLLOW_129_in_synpred3043391 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3043393 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseORExpression_in_synpred3043397 = frozenset([1])
    FOLLOW_LT_in_synpred3063420 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3093447 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3103441 = frozenset([43, 130])
    FOLLOW_130_in_synpred3103445 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3103447 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseXORExpression_in_synpred3103451 = frozenset([1])
    FOLLOW_LT_in_synpred3123474 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3153501 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3163495 = frozenset([43, 131])
    FOLLOW_131_in_synpred3163499 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3163501 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_bitwiseANDExpression_in_synpred3163505 = frozenset([1])
    FOLLOW_LT_in_synpred3183528 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3213555 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3223549 = frozenset([43, 132])
    FOLLOW_132_in_synpred3223553 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3223555 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_equalityExpression_in_synpred3223559 = frozenset([1])
    FOLLOW_LT_in_synpred3243582 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3303623 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3313603 = frozenset([43, 133, 134, 135, 136])
    FOLLOW_set_in_synpred3313607 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3313623 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_relationalExpression_in_synpred3313627 = frozenset([1])
    FOLLOW_LT_in_synpred3363663 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3443712 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3453684 = frozenset([43, 75, 76, 102, 137, 138, 139])
    FOLLOW_set_in_synpred3453688 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3453712 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_shiftExpression_in_synpred3453716 = frozenset([1])
    FOLLOW_LT_in_synpred3513756 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3563792 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3573776 = frozenset([43, 140, 141, 142])
    FOLLOW_set_in_synpred3573780 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3573792 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_additiveExpression_in_synpred3573796 = frozenset([1])
    FOLLOW_LT_in_synpred3603824 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3613812 = frozenset([43, 79, 143])
    FOLLOW_set_in_synpred3613816 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3613824 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_multiplicativeExpression_in_synpred3613828 = frozenset([1])
    FOLLOW_LT_in_synpred3653860 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3663844 = frozenset([43, 77, 115, 144])
    FOLLOW_set_in_synpred3663848 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3663860 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_unaryExpression_in_synpred3663864 = frozenset([1])
    FOLLOW_LT_in_synpred3813956 = frozenset([43, 45, 75])
    FOLLOW_set_in_synpred3813959 = frozenset([1])
    FOLLOW_objectLiteral_in_synpred3853997 = frozenset([1])
    FOLLOW_LT_in_synpred3864004 = frozenset([1])
    FOLLOW_LT_in_synpred3884029 = frozenset([1])
    FOLLOW_LT_in_synpred3914042 = frozenset([1])
    FOLLOW_LT_in_synpred3934036 = frozenset([43, 85])
    FOLLOW_85_in_synpred3934039 = frozenset([1, 43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3934042 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred3934045 = frozenset([1])
    FOLLOW_94_in_synpred3974027 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 85, 87, 88, 89, 93, 94, 95, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3974029 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 85, 87, 88, 89, 93, 94, 95, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred3974032 = frozenset([43, 85, 95])
    FOLLOW_LT_in_synpred3974036 = frozenset([43, 85])
    FOLLOW_85_in_synpred3974039 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 85, 87, 88, 89, 93, 94, 95, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_LT_in_synpred3974042 = frozenset([43, 44, 45, 46, 47, 48, 75, 77, 79, 81, 83, 84, 87, 88, 89, 93, 94, 101, 110, 113, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157])
    FOLLOW_assignmentExpression_in_synpred3974045 = frozenset([43, 85, 95])
    FOLLOW_LT_in_synpred3974051 = frozenset([43, 85, 95])
    FOLLOW_85_in_synpred3974055 = frozenset([43, 95])
    FOLLOW_LT_in_synpred3974057 = frozenset([43, 95])
    FOLLOW_95_in_synpred3974062 = frozenset([1])
    FOLLOW_LT_in_synpred3984080 = frozenset([1])
    FOLLOW_LT_in_synpred4004092 = frozenset([1])
    FOLLOW_LT_in_synpred4034103 = frozenset([1])
    FOLLOW_LT_in_synpred4054115 = frozenset([1])
    FOLLOW_LT_in_synpred4084168 = frozenset([1])
    FOLLOW_LT_in_synpred4174229 = frozenset([1])
    FOLLOW_reFirstChar_in_synpred5154873 = frozenset([1])

